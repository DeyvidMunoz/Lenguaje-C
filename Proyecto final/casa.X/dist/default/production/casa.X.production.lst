

Microchip MPLAB XC8 Assembler V2.50 build 20240725155939 
                                                                                               Thu Nov 14 08:21:07 2024

Microchip MPLAB XC8 C Compiler v2.50 (Free license) build 20240725155939 Og9 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,space=0,delta=2,noexec
     5                           	psect	idataBANK3,global,class=CODE,space=0,delta=2,noexec
     6                           	psect	stringtext,global,reloc=256,class=STRCODE,space=0,delta=2,noexec
     7                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    12                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1,noexec
    13                           	psect	inittext,global,class=CODE,space=0,delta=2
    14                           	psect	clrtext,global,class=CODE,space=0,delta=2
    15                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    16                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    18                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
    19                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
    20                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2
    21                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2
    22                           	psect	text4,local,class=CODE,space=0,merge=1,delta=2
    23                           	psect	text5,local,class=CODE,space=0,merge=1,delta=2,group=1
    24                           	psect	text6,local,class=CODE,space=0,merge=1,delta=2,group=1
    25                           	psect	text7,local,class=CODE,space=0,merge=1,delta=2,group=2
    26                           	psect	text8,local,class=CODE,space=0,merge=1,delta=2,group=2
    27                           	psect	text9,local,class=CODE,space=0,merge=1,delta=2,group=3
    28                           	psect	text10,local,class=CODE,space=0,merge=1,delta=2,group=1
    29                           	psect	text11,local,class=CODE,space=0,merge=1,delta=2,group=2
    30                           	psect	text12,local,class=CODE,space=0,merge=1,delta=2,group=2
    31                           	psect	text13,local,class=CODE,space=0,merge=1,delta=2,group=2
    32                           	psect	text14,local,class=CODE,space=0,merge=1,delta=2,group=2
    33                           	psect	text15,local,class=CODE,space=0,merge=1,delta=2,group=2
    34                           	psect	text16,local,class=CODE,space=0,merge=1,delta=2,group=2
    35                           	psect	text17,local,class=CODE,space=0,merge=1,delta=2,group=2
    36                           	psect	text18,local,class=CODE,space=0,merge=1,delta=2,group=2
    37                           	psect	text19,local,class=CODE,space=0,merge=1,delta=2,group=2
    38                           	psect	text20,local,class=CODE,space=0,merge=1,delta=2,group=2
    39                           	psect	text21,local,class=CODE,space=0,merge=1,delta=2,group=2
    40                           	psect	text22,local,class=CODE,space=0,merge=1,delta=2,group=2
    41                           	psect	text23,local,class=CODE,space=0,merge=1,delta=2,group=2
    42                           	psect	text24,local,class=CODE,space=0,merge=1,delta=2,group=2
    43                           	psect	text25,local,class=CODE,space=0,merge=1,delta=2,group=2
    44                           	psect	text26,local,class=CODE,space=0,merge=1,delta=2
    45                           	psect	text27,local,class=CODE,space=0,merge=1,delta=2,group=2
    46                           	psect	text28,local,class=CODE,space=0,merge=1,delta=2,group=2
    47                           	psect	text29,local,class=CODE,space=0,merge=1,delta=2
    48                           	psect	text30,local,class=CODE,space=0,merge=1,delta=2
    49                           	psect	text31,local,class=CODE,space=0,merge=1,delta=2,group=3
    50                           	psect	text32,local,class=CODE,space=0,merge=1,delta=2
    51                           	psect	text33,local,class=CODE,space=0,merge=1,delta=2
    52                           	psect	text34,local,class=CODE,space=0,merge=1,delta=2
    53                           	psect	text35,local,class=CODE,space=0,merge=1,delta=2
    54                           	psect	text36,local,class=CODE,space=0,merge=1,delta=2
    55                           	psect	text37,local,class=CODE,space=0,merge=1,delta=2
    56                           	psect	text38,local,class=CODE,space=0,merge=1,delta=2
    57                           	psect	text39,local,class=CODE,space=0,merge=1,delta=2
    58                           	psect	text40,local,class=CODE,space=0,merge=1,delta=2
    59                           	psect	text41,local,class=CODE,space=0,merge=1,delta=2
    60                           	psect	text42,local,class=CODE,space=0,merge=1,delta=2
    61                           	psect	text43,local,class=CODE,space=0,merge=1,delta=2
    62                           	psect	text44,local,class=CODE,space=0,merge=1,delta=2
    63                           	psect	text45,local,class=CODE,space=0,merge=1,delta=2
    64                           	psect	text46,local,class=CODE,space=0,merge=1,delta=2
    65                           	psect	text47,local,class=CODE,space=0,merge=1,delta=2
    66                           	psect	text48,local,class=CODE,space=0,merge=1,delta=2
    67                           	psect	text49,local,class=CODE,space=0,merge=1,delta=2
    68                           	psect	text50,local,class=CODE,space=0,merge=1,delta=2
    69                           	psect	intentry,global,class=CODE,space=0,delta=2
    70                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    71                           	dabs	1,0x7E,2
    72     0000                     
    73                           ; Generated 25/07/2024 GMT
    74                           ; 
    75                           ; Copyright Â© 2024, Microchip Technology Inc. and its subsidiaries ("Microchip")
    76                           ; All rights reserved.
    77                           ; 
    78                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    79                           ; 
    80                           ; Redistribution and use in source and binary forms, with or without modification, are
    81                           ; permitted provided that the following conditions are met:
    82                           ; 
    83                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    84                           ;        conditions and the following disclaimer.
    85                           ; 
    86                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    87                           ;        of conditions and the following disclaimer in the documentation and/or other
    88                           ;        materials provided with the distribution. Publication is not required when
    89                           ;        this file is used in an embedded application.
    90                           ; 
    91                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    92                           ;        software without specific prior written permission.
    93                           ; 
    94                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    95                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    96                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    97                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    98                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    99                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   100                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   101                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   102                           ; 
   103                           ; 
   104                           ; Code-generator required, PIC16F887 Definitions
   105                           ; 
   106                           ; SFR Addresses
   107     0004                     fsr             equ	4
   108     0004                     fsr0            equ	4
   109     0000                     indf            equ	0
   110     0000                     indf0           equ	0
   111     0002                     pc              equ	2
   112     0002                     pcl             equ	2
   113     000A                     pclath          equ	10
   114     0003                     status          equ	3
   115     0000                     INDF            equ	0	;# 
   116     0001                     TMR0            equ	1	;# 
   117     0002                     PCL             equ	2	;# 
   118     0003                     STATUS          equ	3	;# 
   119     0004                     FSR             equ	4	;# 
   120     0005                     PORTA           equ	5	;# 
   121     0006                     PORTB           equ	6	;# 
   122     0007                     PORTC           equ	7	;# 
   123     0008                     PORTD           equ	8	;# 
   124     0009                     PORTE           equ	9	;# 
   125     000A                     PCLATH          equ	10	;# 
   126     000B                     INTCON          equ	11	;# 
   127     000C                     PIR1            equ	12	;# 
   128     000D                     PIR2            equ	13	;# 
   129     000E                     TMR1            equ	14	;# 
   130     000E                     TMR1L           equ	14	;# 
   131     000F                     TMR1H           equ	15	;# 
   132     0010                     T1CON           equ	16	;# 
   133     0011                     TMR2            equ	17	;# 
   134     0012                     T2CON           equ	18	;# 
   135     0013                     SSPBUF          equ	19	;# 
   136     0014                     SSPCON          equ	20	;# 
   137     0015                     CCPR1           equ	21	;# 
   138     0015                     CCPR1L          equ	21	;# 
   139     0016                     CCPR1H          equ	22	;# 
   140     0017                     CCP1CON         equ	23	;# 
   141     0018                     RCSTA           equ	24	;# 
   142     0019                     TXREG           equ	25	;# 
   143     001A                     RCREG           equ	26	;# 
   144     001B                     CCPR2           equ	27	;# 
   145     001B                     CCPR2L          equ	27	;# 
   146     001C                     CCPR2H          equ	28	;# 
   147     001D                     CCP2CON         equ	29	;# 
   148     001E                     ADRESH          equ	30	;# 
   149     001F                     ADCON0          equ	31	;# 
   150     0081                     OPTION_REG      equ	129	;# 
   151     0085                     TRISA           equ	133	;# 
   152     0086                     TRISB           equ	134	;# 
   153     0087                     TRISC           equ	135	;# 
   154     0088                     TRISD           equ	136	;# 
   155     0089                     TRISE           equ	137	;# 
   156     008C                     PIE1            equ	140	;# 
   157     008D                     PIE2            equ	141	;# 
   158     008E                     PCON            equ	142	;# 
   159     008F                     OSCCON          equ	143	;# 
   160     0090                     OSCTUNE         equ	144	;# 
   161     0091                     SSPCON2         equ	145	;# 
   162     0092                     PR2             equ	146	;# 
   163     0093                     SSPADD          equ	147	;# 
   164     0093                     SSPMSK          equ	147	;# 
   165     0093                     MSK             equ	147	;# 
   166     0094                     SSPSTAT         equ	148	;# 
   167     0095                     WPUB            equ	149	;# 
   168     0096                     IOCB            equ	150	;# 
   169     0097                     VRCON           equ	151	;# 
   170     0098                     TXSTA           equ	152	;# 
   171     0099                     SPBRG           equ	153	;# 
   172     009A                     SPBRGH          equ	154	;# 
   173     009B                     PWM1CON         equ	155	;# 
   174     009C                     ECCPAS          equ	156	;# 
   175     009D                     PSTRCON         equ	157	;# 
   176     009E                     ADRESL          equ	158	;# 
   177     009F                     ADCON1          equ	159	;# 
   178     0105                     WDTCON          equ	261	;# 
   179     0107                     CM1CON0         equ	263	;# 
   180     0108                     CM2CON0         equ	264	;# 
   181     0109                     CM2CON1         equ	265	;# 
   182     010C                     EEDATA          equ	268	;# 
   183     010C                     EEDAT           equ	268	;# 
   184     010D                     EEADR           equ	269	;# 
   185     010E                     EEDATH          equ	270	;# 
   186     010F                     EEADRH          equ	271	;# 
   187     0185                     SRCON           equ	389	;# 
   188     0187                     BAUDCTL         equ	391	;# 
   189     0188                     ANSEL           equ	392	;# 
   190     0189                     ANSELH          equ	393	;# 
   191     018C                     EECON1          equ	396	;# 
   192     018D                     EECON2          equ	397	;# 
   193     0000                     INDF            equ	0	;# 
   194     0001                     TMR0            equ	1	;# 
   195     0002                     PCL             equ	2	;# 
   196     0003                     STATUS          equ	3	;# 
   197     0004                     FSR             equ	4	;# 
   198     0005                     PORTA           equ	5	;# 
   199     0006                     PORTB           equ	6	;# 
   200     0007                     PORTC           equ	7	;# 
   201     0008                     PORTD           equ	8	;# 
   202     0009                     PORTE           equ	9	;# 
   203     000A                     PCLATH          equ	10	;# 
   204     000B                     INTCON          equ	11	;# 
   205     000C                     PIR1            equ	12	;# 
   206     000D                     PIR2            equ	13	;# 
   207     000E                     TMR1            equ	14	;# 
   208     000E                     TMR1L           equ	14	;# 
   209     000F                     TMR1H           equ	15	;# 
   210     0010                     T1CON           equ	16	;# 
   211     0011                     TMR2            equ	17	;# 
   212     0012                     T2CON           equ	18	;# 
   213     0013                     SSPBUF          equ	19	;# 
   214     0014                     SSPCON          equ	20	;# 
   215     0015                     CCPR1           equ	21	;# 
   216     0015                     CCPR1L          equ	21	;# 
   217     0016                     CCPR1H          equ	22	;# 
   218     0017                     CCP1CON         equ	23	;# 
   219     0018                     RCSTA           equ	24	;# 
   220     0019                     TXREG           equ	25	;# 
   221     001A                     RCREG           equ	26	;# 
   222     001B                     CCPR2           equ	27	;# 
   223     001B                     CCPR2L          equ	27	;# 
   224     001C                     CCPR2H          equ	28	;# 
   225     001D                     CCP2CON         equ	29	;# 
   226     001E                     ADRESH          equ	30	;# 
   227     001F                     ADCON0          equ	31	;# 
   228     0081                     OPTION_REG      equ	129	;# 
   229     0085                     TRISA           equ	133	;# 
   230     0086                     TRISB           equ	134	;# 
   231     0087                     TRISC           equ	135	;# 
   232     0088                     TRISD           equ	136	;# 
   233     0089                     TRISE           equ	137	;# 
   234     008C                     PIE1            equ	140	;# 
   235     008D                     PIE2            equ	141	;# 
   236     008E                     PCON            equ	142	;# 
   237     008F                     OSCCON          equ	143	;# 
   238     0090                     OSCTUNE         equ	144	;# 
   239     0091                     SSPCON2         equ	145	;# 
   240     0092                     PR2             equ	146	;# 
   241     0093                     SSPADD          equ	147	;# 
   242     0093                     SSPMSK          equ	147	;# 
   243     0093                     MSK             equ	147	;# 
   244     0094                     SSPSTAT         equ	148	;# 
   245     0095                     WPUB            equ	149	;# 
   246     0096                     IOCB            equ	150	;# 
   247     0097                     VRCON           equ	151	;# 
   248     0098                     TXSTA           equ	152	;# 
   249     0099                     SPBRG           equ	153	;# 
   250     009A                     SPBRGH          equ	154	;# 
   251     009B                     PWM1CON         equ	155	;# 
   252     009C                     ECCPAS          equ	156	;# 
   253     009D                     PSTRCON         equ	157	;# 
   254     009E                     ADRESL          equ	158	;# 
   255     009F                     ADCON1          equ	159	;# 
   256     0105                     WDTCON          equ	261	;# 
   257     0107                     CM1CON0         equ	263	;# 
   258     0108                     CM2CON0         equ	264	;# 
   259     0109                     CM2CON1         equ	265	;# 
   260     010C                     EEDATA          equ	268	;# 
   261     010C                     EEDAT           equ	268	;# 
   262     010D                     EEADR           equ	269	;# 
   263     010E                     EEDATH          equ	270	;# 
   264     010F                     EEADRH          equ	271	;# 
   265     0185                     SRCON           equ	389	;# 
   266     0187                     BAUDCTL         equ	391	;# 
   267     0188                     ANSEL           equ	392	;# 
   268     0189                     ANSELH          equ	393	;# 
   269     018C                     EECON1          equ	396	;# 
   270     018D                     EECON2          equ	397	;# 
   271     0000                     INDF            equ	0	;# 
   272     0001                     TMR0            equ	1	;# 
   273     0002                     PCL             equ	2	;# 
   274     0003                     STATUS          equ	3	;# 
   275     0004                     FSR             equ	4	;# 
   276     0005                     PORTA           equ	5	;# 
   277     0006                     PORTB           equ	6	;# 
   278     0007                     PORTC           equ	7	;# 
   279     0008                     PORTD           equ	8	;# 
   280     0009                     PORTE           equ	9	;# 
   281     000A                     PCLATH          equ	10	;# 
   282     000B                     INTCON          equ	11	;# 
   283     000C                     PIR1            equ	12	;# 
   284     000D                     PIR2            equ	13	;# 
   285     000E                     TMR1            equ	14	;# 
   286     000E                     TMR1L           equ	14	;# 
   287     000F                     TMR1H           equ	15	;# 
   288     0010                     T1CON           equ	16	;# 
   289     0011                     TMR2            equ	17	;# 
   290     0012                     T2CON           equ	18	;# 
   291     0013                     SSPBUF          equ	19	;# 
   292     0014                     SSPCON          equ	20	;# 
   293     0015                     CCPR1           equ	21	;# 
   294     0015                     CCPR1L          equ	21	;# 
   295     0016                     CCPR1H          equ	22	;# 
   296     0017                     CCP1CON         equ	23	;# 
   297     0018                     RCSTA           equ	24	;# 
   298     0019                     TXREG           equ	25	;# 
   299     001A                     RCREG           equ	26	;# 
   300     001B                     CCPR2           equ	27	;# 
   301     001B                     CCPR2L          equ	27	;# 
   302     001C                     CCPR2H          equ	28	;# 
   303     001D                     CCP2CON         equ	29	;# 
   304     001E                     ADRESH          equ	30	;# 
   305     001F                     ADCON0          equ	31	;# 
   306     0081                     OPTION_REG      equ	129	;# 
   307     0085                     TRISA           equ	133	;# 
   308     0086                     TRISB           equ	134	;# 
   309     0087                     TRISC           equ	135	;# 
   310     0088                     TRISD           equ	136	;# 
   311     0089                     TRISE           equ	137	;# 
   312     008C                     PIE1            equ	140	;# 
   313     008D                     PIE2            equ	141	;# 
   314     008E                     PCON            equ	142	;# 
   315     008F                     OSCCON          equ	143	;# 
   316     0090                     OSCTUNE         equ	144	;# 
   317     0091                     SSPCON2         equ	145	;# 
   318     0092                     PR2             equ	146	;# 
   319     0093                     SSPADD          equ	147	;# 
   320     0093                     SSPMSK          equ	147	;# 
   321     0093                     MSK             equ	147	;# 
   322     0094                     SSPSTAT         equ	148	;# 
   323     0095                     WPUB            equ	149	;# 
   324     0096                     IOCB            equ	150	;# 
   325     0097                     VRCON           equ	151	;# 
   326     0098                     TXSTA           equ	152	;# 
   327     0099                     SPBRG           equ	153	;# 
   328     009A                     SPBRGH          equ	154	;# 
   329     009B                     PWM1CON         equ	155	;# 
   330     009C                     ECCPAS          equ	156	;# 
   331     009D                     PSTRCON         equ	157	;# 
   332     009E                     ADRESL          equ	158	;# 
   333     009F                     ADCON1          equ	159	;# 
   334     0105                     WDTCON          equ	261	;# 
   335     0107                     CM1CON0         equ	263	;# 
   336     0108                     CM2CON0         equ	264	;# 
   337     0109                     CM2CON1         equ	265	;# 
   338     010C                     EEDATA          equ	268	;# 
   339     010C                     EEDAT           equ	268	;# 
   340     010D                     EEADR           equ	269	;# 
   341     010E                     EEDATH          equ	270	;# 
   342     010F                     EEADRH          equ	271	;# 
   343     0185                     SRCON           equ	389	;# 
   344     0187                     BAUDCTL         equ	391	;# 
   345     0188                     ANSEL           equ	392	;# 
   346     0189                     ANSELH          equ	393	;# 
   347     018C                     EECON1          equ	396	;# 
   348     018D                     EECON2          equ	397	;# 
   349     0000                     INDF            equ	0	;# 
   350     0001                     TMR0            equ	1	;# 
   351     0002                     PCL             equ	2	;# 
   352     0003                     STATUS          equ	3	;# 
   353     0004                     FSR             equ	4	;# 
   354     0005                     PORTA           equ	5	;# 
   355     0006                     PORTB           equ	6	;# 
   356     0007                     PORTC           equ	7	;# 
   357     0008                     PORTD           equ	8	;# 
   358     0009                     PORTE           equ	9	;# 
   359     000A                     PCLATH          equ	10	;# 
   360     000B                     INTCON          equ	11	;# 
   361     000C                     PIR1            equ	12	;# 
   362     000D                     PIR2            equ	13	;# 
   363     000E                     TMR1            equ	14	;# 
   364     000E                     TMR1L           equ	14	;# 
   365     000F                     TMR1H           equ	15	;# 
   366     0010                     T1CON           equ	16	;# 
   367     0011                     TMR2            equ	17	;# 
   368     0012                     T2CON           equ	18	;# 
   369     0013                     SSPBUF          equ	19	;# 
   370     0014                     SSPCON          equ	20	;# 
   371     0015                     CCPR1           equ	21	;# 
   372     0015                     CCPR1L          equ	21	;# 
   373     0016                     CCPR1H          equ	22	;# 
   374     0017                     CCP1CON         equ	23	;# 
   375     0018                     RCSTA           equ	24	;# 
   376     0019                     TXREG           equ	25	;# 
   377     001A                     RCREG           equ	26	;# 
   378     001B                     CCPR2           equ	27	;# 
   379     001B                     CCPR2L          equ	27	;# 
   380     001C                     CCPR2H          equ	28	;# 
   381     001D                     CCP2CON         equ	29	;# 
   382     001E                     ADRESH          equ	30	;# 
   383     001F                     ADCON0          equ	31	;# 
   384     0081                     OPTION_REG      equ	129	;# 
   385     0085                     TRISA           equ	133	;# 
   386     0086                     TRISB           equ	134	;# 
   387     0087                     TRISC           equ	135	;# 
   388     0088                     TRISD           equ	136	;# 
   389     0089                     TRISE           equ	137	;# 
   390     008C                     PIE1            equ	140	;# 
   391     008D                     PIE2            equ	141	;# 
   392     008E                     PCON            equ	142	;# 
   393     008F                     OSCCON          equ	143	;# 
   394     0090                     OSCTUNE         equ	144	;# 
   395     0091                     SSPCON2         equ	145	;# 
   396     0092                     PR2             equ	146	;# 
   397     0093                     SSPADD          equ	147	;# 
   398     0093                     SSPMSK          equ	147	;# 
   399     0093                     MSK             equ	147	;# 
   400     0094                     SSPSTAT         equ	148	;# 
   401     0095                     WPUB            equ	149	;# 
   402     0096                     IOCB            equ	150	;# 
   403     0097                     VRCON           equ	151	;# 
   404     0098                     TXSTA           equ	152	;# 
   405     0099                     SPBRG           equ	153	;# 
   406     009A                     SPBRGH          equ	154	;# 
   407     009B                     PWM1CON         equ	155	;# 
   408     009C                     ECCPAS          equ	156	;# 
   409     009D                     PSTRCON         equ	157	;# 
   410     009E                     ADRESL          equ	158	;# 
   411     009F                     ADCON1          equ	159	;# 
   412     0105                     WDTCON          equ	261	;# 
   413     0107                     CM1CON0         equ	263	;# 
   414     0108                     CM2CON0         equ	264	;# 
   415     0109                     CM2CON1         equ	265	;# 
   416     010C                     EEDATA          equ	268	;# 
   417     010C                     EEDAT           equ	268	;# 
   418     010D                     EEADR           equ	269	;# 
   419     010E                     EEDATH          equ	270	;# 
   420     010F                     EEADRH          equ	271	;# 
   421     0185                     SRCON           equ	389	;# 
   422     0187                     BAUDCTL         equ	391	;# 
   423     0188                     ANSEL           equ	392	;# 
   424     0189                     ANSELH          equ	393	;# 
   425     018C                     EECON1          equ	396	;# 
   426     018D                     EECON2          equ	397	;# 
   427     0000                     INDF            equ	0	;# 
   428     0001                     TMR0            equ	1	;# 
   429     0002                     PCL             equ	2	;# 
   430     0003                     STATUS          equ	3	;# 
   431     0004                     FSR             equ	4	;# 
   432     0005                     PORTA           equ	5	;# 
   433     0006                     PORTB           equ	6	;# 
   434     0007                     PORTC           equ	7	;# 
   435     0008                     PORTD           equ	8	;# 
   436     0009                     PORTE           equ	9	;# 
   437     000A                     PCLATH          equ	10	;# 
   438     000B                     INTCON          equ	11	;# 
   439     000C                     PIR1            equ	12	;# 
   440     000D                     PIR2            equ	13	;# 
   441     000E                     TMR1            equ	14	;# 
   442     000E                     TMR1L           equ	14	;# 
   443     000F                     TMR1H           equ	15	;# 
   444     0010                     T1CON           equ	16	;# 
   445     0011                     TMR2            equ	17	;# 
   446     0012                     T2CON           equ	18	;# 
   447     0013                     SSPBUF          equ	19	;# 
   448     0014                     SSPCON          equ	20	;# 
   449     0015                     CCPR1           equ	21	;# 
   450     0015                     CCPR1L          equ	21	;# 
   451     0016                     CCPR1H          equ	22	;# 
   452     0017                     CCP1CON         equ	23	;# 
   453     0018                     RCSTA           equ	24	;# 
   454     0019                     TXREG           equ	25	;# 
   455     001A                     RCREG           equ	26	;# 
   456     001B                     CCPR2           equ	27	;# 
   457     001B                     CCPR2L          equ	27	;# 
   458     001C                     CCPR2H          equ	28	;# 
   459     001D                     CCP2CON         equ	29	;# 
   460     001E                     ADRESH          equ	30	;# 
   461     001F                     ADCON0          equ	31	;# 
   462     0081                     OPTION_REG      equ	129	;# 
   463     0085                     TRISA           equ	133	;# 
   464     0086                     TRISB           equ	134	;# 
   465     0087                     TRISC           equ	135	;# 
   466     0088                     TRISD           equ	136	;# 
   467     0089                     TRISE           equ	137	;# 
   468     008C                     PIE1            equ	140	;# 
   469     008D                     PIE2            equ	141	;# 
   470     008E                     PCON            equ	142	;# 
   471     008F                     OSCCON          equ	143	;# 
   472     0090                     OSCTUNE         equ	144	;# 
   473     0091                     SSPCON2         equ	145	;# 
   474     0092                     PR2             equ	146	;# 
   475     0093                     SSPADD          equ	147	;# 
   476     0093                     SSPMSK          equ	147	;# 
   477     0093                     MSK             equ	147	;# 
   478     0094                     SSPSTAT         equ	148	;# 
   479     0095                     WPUB            equ	149	;# 
   480     0096                     IOCB            equ	150	;# 
   481     0097                     VRCON           equ	151	;# 
   482     0098                     TXSTA           equ	152	;# 
   483     0099                     SPBRG           equ	153	;# 
   484     009A                     SPBRGH          equ	154	;# 
   485     009B                     PWM1CON         equ	155	;# 
   486     009C                     ECCPAS          equ	156	;# 
   487     009D                     PSTRCON         equ	157	;# 
   488     009E                     ADRESL          equ	158	;# 
   489     009F                     ADCON1          equ	159	;# 
   490     0105                     WDTCON          equ	261	;# 
   491     0107                     CM1CON0         equ	263	;# 
   492     0108                     CM2CON0         equ	264	;# 
   493     0109                     CM2CON1         equ	265	;# 
   494     010C                     EEDATA          equ	268	;# 
   495     010C                     EEDAT           equ	268	;# 
   496     010D                     EEADR           equ	269	;# 
   497     010E                     EEDATH          equ	270	;# 
   498     010F                     EEADRH          equ	271	;# 
   499     0185                     SRCON           equ	389	;# 
   500     0187                     BAUDCTL         equ	391	;# 
   501     0188                     ANSEL           equ	392	;# 
   502     0189                     ANSELH          equ	393	;# 
   503     018C                     EECON1          equ	396	;# 
   504     018D                     EECON2          equ	397	;# 
   505     0000                     INDF            equ	0	;# 
   506     0001                     TMR0            equ	1	;# 
   507     0002                     PCL             equ	2	;# 
   508     0003                     STATUS          equ	3	;# 
   509     0004                     FSR             equ	4	;# 
   510     0005                     PORTA           equ	5	;# 
   511     0006                     PORTB           equ	6	;# 
   512     0007                     PORTC           equ	7	;# 
   513     0008                     PORTD           equ	8	;# 
   514     0009                     PORTE           equ	9	;# 
   515     000A                     PCLATH          equ	10	;# 
   516     000B                     INTCON          equ	11	;# 
   517     000C                     PIR1            equ	12	;# 
   518     000D                     PIR2            equ	13	;# 
   519     000E                     TMR1            equ	14	;# 
   520     000E                     TMR1L           equ	14	;# 
   521     000F                     TMR1H           equ	15	;# 
   522     0010                     T1CON           equ	16	;# 
   523     0011                     TMR2            equ	17	;# 
   524     0012                     T2CON           equ	18	;# 
   525     0013                     SSPBUF          equ	19	;# 
   526     0014                     SSPCON          equ	20	;# 
   527     0015                     CCPR1           equ	21	;# 
   528     0015                     CCPR1L          equ	21	;# 
   529     0016                     CCPR1H          equ	22	;# 
   530     0017                     CCP1CON         equ	23	;# 
   531     0018                     RCSTA           equ	24	;# 
   532     0019                     TXREG           equ	25	;# 
   533     001A                     RCREG           equ	26	;# 
   534     001B                     CCPR2           equ	27	;# 
   535     001B                     CCPR2L          equ	27	;# 
   536     001C                     CCPR2H          equ	28	;# 
   537     001D                     CCP2CON         equ	29	;# 
   538     001E                     ADRESH          equ	30	;# 
   539     001F                     ADCON0          equ	31	;# 
   540     0081                     OPTION_REG      equ	129	;# 
   541     0085                     TRISA           equ	133	;# 
   542     0086                     TRISB           equ	134	;# 
   543     0087                     TRISC           equ	135	;# 
   544     0088                     TRISD           equ	136	;# 
   545     0089                     TRISE           equ	137	;# 
   546     008C                     PIE1            equ	140	;# 
   547     008D                     PIE2            equ	141	;# 
   548     008E                     PCON            equ	142	;# 
   549     008F                     OSCCON          equ	143	;# 
   550     0090                     OSCTUNE         equ	144	;# 
   551     0091                     SSPCON2         equ	145	;# 
   552     0092                     PR2             equ	146	;# 
   553     0093                     SSPADD          equ	147	;# 
   554     0093                     SSPMSK          equ	147	;# 
   555     0093                     MSK             equ	147	;# 
   556     0094                     SSPSTAT         equ	148	;# 
   557     0095                     WPUB            equ	149	;# 
   558     0096                     IOCB            equ	150	;# 
   559     0097                     VRCON           equ	151	;# 
   560     0098                     TXSTA           equ	152	;# 
   561     0099                     SPBRG           equ	153	;# 
   562     009A                     SPBRGH          equ	154	;# 
   563     009B                     PWM1CON         equ	155	;# 
   564     009C                     ECCPAS          equ	156	;# 
   565     009D                     PSTRCON         equ	157	;# 
   566     009E                     ADRESL          equ	158	;# 
   567     009F                     ADCON1          equ	159	;# 
   568     0105                     WDTCON          equ	261	;# 
   569     0107                     CM1CON0         equ	263	;# 
   570     0108                     CM2CON0         equ	264	;# 
   571     0109                     CM2CON1         equ	265	;# 
   572     010C                     EEDATA          equ	268	;# 
   573     010C                     EEDAT           equ	268	;# 
   574     010D                     EEADR           equ	269	;# 
   575     010E                     EEDATH          equ	270	;# 
   576     010F                     EEADRH          equ	271	;# 
   577     0185                     SRCON           equ	389	;# 
   578     0187                     BAUDCTL         equ	391	;# 
   579     0188                     ANSEL           equ	392	;# 
   580     0189                     ANSELH          equ	393	;# 
   581     018C                     EECON1          equ	396	;# 
   582     018D                     EECON2          equ	397	;# 
   583     0000                     INDF            equ	0	;# 
   584     0001                     TMR0            equ	1	;# 
   585     0002                     PCL             equ	2	;# 
   586     0003                     STATUS          equ	3	;# 
   587     0004                     FSR             equ	4	;# 
   588     0005                     PORTA           equ	5	;# 
   589     0006                     PORTB           equ	6	;# 
   590     0007                     PORTC           equ	7	;# 
   591     0008                     PORTD           equ	8	;# 
   592     0009                     PORTE           equ	9	;# 
   593     000A                     PCLATH          equ	10	;# 
   594     000B                     INTCON          equ	11	;# 
   595     000C                     PIR1            equ	12	;# 
   596     000D                     PIR2            equ	13	;# 
   597     000E                     TMR1            equ	14	;# 
   598     000E                     TMR1L           equ	14	;# 
   599     000F                     TMR1H           equ	15	;# 
   600     0010                     T1CON           equ	16	;# 
   601     0011                     TMR2            equ	17	;# 
   602     0012                     T2CON           equ	18	;# 
   603     0013                     SSPBUF          equ	19	;# 
   604     0014                     SSPCON          equ	20	;# 
   605     0015                     CCPR1           equ	21	;# 
   606     0015                     CCPR1L          equ	21	;# 
   607     0016                     CCPR1H          equ	22	;# 
   608     0017                     CCP1CON         equ	23	;# 
   609     0018                     RCSTA           equ	24	;# 
   610     0019                     TXREG           equ	25	;# 
   611     001A                     RCREG           equ	26	;# 
   612     001B                     CCPR2           equ	27	;# 
   613     001B                     CCPR2L          equ	27	;# 
   614     001C                     CCPR2H          equ	28	;# 
   615     001D                     CCP2CON         equ	29	;# 
   616     001E                     ADRESH          equ	30	;# 
   617     001F                     ADCON0          equ	31	;# 
   618     0081                     OPTION_REG      equ	129	;# 
   619     0085                     TRISA           equ	133	;# 
   620     0086                     TRISB           equ	134	;# 
   621     0087                     TRISC           equ	135	;# 
   622     0088                     TRISD           equ	136	;# 
   623     0089                     TRISE           equ	137	;# 
   624     008C                     PIE1            equ	140	;# 
   625     008D                     PIE2            equ	141	;# 
   626     008E                     PCON            equ	142	;# 
   627     008F                     OSCCON          equ	143	;# 
   628     0090                     OSCTUNE         equ	144	;# 
   629     0091                     SSPCON2         equ	145	;# 
   630     0092                     PR2             equ	146	;# 
   631     0093                     SSPADD          equ	147	;# 
   632     0093                     SSPMSK          equ	147	;# 
   633     0093                     MSK             equ	147	;# 
   634     0094                     SSPSTAT         equ	148	;# 
   635     0095                     WPUB            equ	149	;# 
   636     0096                     IOCB            equ	150	;# 
   637     0097                     VRCON           equ	151	;# 
   638     0098                     TXSTA           equ	152	;# 
   639     0099                     SPBRG           equ	153	;# 
   640     009A                     SPBRGH          equ	154	;# 
   641     009B                     PWM1CON         equ	155	;# 
   642     009C                     ECCPAS          equ	156	;# 
   643     009D                     PSTRCON         equ	157	;# 
   644     009E                     ADRESL          equ	158	;# 
   645     009F                     ADCON1          equ	159	;# 
   646     0105                     WDTCON          equ	261	;# 
   647     0107                     CM1CON0         equ	263	;# 
   648     0108                     CM2CON0         equ	264	;# 
   649     0109                     CM2CON1         equ	265	;# 
   650     010C                     EEDATA          equ	268	;# 
   651     010C                     EEDAT           equ	268	;# 
   652     010D                     EEADR           equ	269	;# 
   653     010E                     EEDATH          equ	270	;# 
   654     010F                     EEADRH          equ	271	;# 
   655     0185                     SRCON           equ	389	;# 
   656     0187                     BAUDCTL         equ	391	;# 
   657     0188                     ANSEL           equ	392	;# 
   658     0189                     ANSELH          equ	393	;# 
   659     018C                     EECON1          equ	396	;# 
   660     018D                     EECON2          equ	397	;# 
   661                           
   662                           	psect	idataBANK0
   663     0003                     __pidataBANK0:
   664                           
   665                           ;initializer for _key
   666     0003  3430               	retlw	48
   667                           
   668                           	psect	idataBANK3
   669     1F85                     __pidataBANK3:
   670                           
   671                           ;initializer for keypad_getkey@F1301
   672     1F85  3431               	retlw	49
   673     1F86  3432               	retlw	50
   674     1F87  3433               	retlw	51
   675     1F88  3441               	retlw	65
   676     1F89  3434               	retlw	52
   677     1F8A  3435               	retlw	53
   678     1F8B  3436               	retlw	54
   679     1F8C  3442               	retlw	66
   680     1F8D  3437               	retlw	55
   681     1F8E  3438               	retlw	56
   682     1F8F  3439               	retlw	57
   683     1F90  3443               	retlw	67
   684     1F91  342A               	retlw	42
   685     1F92  3430               	retlw	48
   686     1F93  3423               	retlw	35
   687     1F94  3444               	retlw	68
   688                           
   689                           	psect	stringtext
   690     1000                     __pstringtext:
   691     1000                     stringtab:
   692     1000                     __stringtab:
   693                           
   694                           ;	String table - string pointers are 2 bytes each
   695     1000  1BFF               	btfsc	btemp+1,7
   696     1001  280A               	ljmp	stringcode
   697     1002  1383               	bcf	3,7
   698     1003  187F               	btfsc	btemp+1,0
   699     1004  1783               	bsf	3,7
   700     1005  0800               	movf	0,w
   701     1006  0A84               	incf	4,f
   702     1007  1903               	skipnz
   703     1008  0AFF               	incf	btemp+1,f
   704     1009  0008               	return
   705     100A                     stringcode:
   706     100A  087F               	movf	btemp+1,w
   707     100B  397F               	andlw	127
   708     100C  008A               	movwf	10
   709     100D  0804               	movf	4,w
   710     100E  0A84               	incf	4,f
   711     100F  1903               	skipnz
   712     1010  0AFF               	incf	btemp+1,f
   713     1011  0082               	movwf	2
   714     1012                     __stringbase:
   715     1012                     __end_of__stringtab:
   716     1012                     __powers_:
   717     1012  3400               	retlw	0
   718     1013  3480               	retlw	128
   719     1014  343F               	retlw	63
   720     1015  3400               	retlw	0
   721     1016  3420               	retlw	32
   722     1017  3441               	retlw	65
   723     1018  3400               	retlw	0
   724     1019  34C8               	retlw	200
   725     101A  3442               	retlw	66
   726     101B  3400               	retlw	0
   727     101C  347A               	retlw	122
   728     101D  3444               	retlw	68
   729     101E  3440               	retlw	64
   730     101F  341C               	retlw	28
   731     1020  3446               	retlw	70
   732     1021  3450               	retlw	80
   733     1022  34C3               	retlw	195
   734     1023  3447               	retlw	71
   735     1024  3424               	retlw	36
   736     1025  3474               	retlw	116
   737     1026  3449               	retlw	73
   738     1027  3497               	retlw	151
   739     1028  3418               	retlw	24
   740     1029  344B               	retlw	75
   741     102A  34BC               	retlw	188
   742     102B  34BE               	retlw	190
   743     102C  344C               	retlw	76
   744     102D  346B               	retlw	107
   745     102E  346E               	retlw	110
   746     102F  344E               	retlw	78
   747     1030  3403               	retlw	3
   748     1031  3415               	retlw	21
   749     1032  3450               	retlw	80
   750     1033  3479               	retlw	121
   751     1034  34AD               	retlw	173
   752     1035  3460               	retlw	96
   753     1036  34F3               	retlw	243
   754     1037  3449               	retlw	73
   755     1038  3471               	retlw	113
   756     1039                     __end_of__powers_:
   757     1039                     __npowers_:
   758     1039  3400               	retlw	0
   759     103A  3480               	retlw	128
   760     103B  343F               	retlw	63
   761     103C  34CD               	retlw	205
   762     103D  34CC               	retlw	204
   763     103E  343D               	retlw	61
   764     103F  34D7               	retlw	215
   765     1040  3423               	retlw	35
   766     1041  343C               	retlw	60
   767     1042  3412               	retlw	18
   768     1043  3483               	retlw	131
   769     1044  343A               	retlw	58
   770     1045  34B7               	retlw	183
   771     1046  34D1               	retlw	209
   772     1047  3438               	retlw	56
   773     1048  34C6               	retlw	198
   774     1049  3427               	retlw	39
   775     104A  3437               	retlw	55
   776     104B  3438               	retlw	56
   777     104C  3486               	retlw	134
   778     104D  3435               	retlw	53
   779     104E  34C0               	retlw	192
   780     104F  34D6               	retlw	214
   781     1050  3433               	retlw	51
   782     1051  34CC               	retlw	204
   783     1052  342B               	retlw	43
   784     1053  3432               	retlw	50
   785     1054  3470               	retlw	112
   786     1055  3489               	retlw	137
   787     1056  3430               	retlw	48
   788     1057  34E7               	retlw	231
   789     1058  34DB               	retlw	219
   790     1059  342E               	retlw	46
   791     105A  34E5               	retlw	229
   792     105B  343C               	retlw	60
   793     105C  341E               	retlw	30
   794     105D  3442               	retlw	66
   795     105E  34A2               	retlw	162
   796     105F  340D               	retlw	13
   797     1060                     __end_of__npowers_:
   798     1060                     _dpowers:
   799     1060  3401               	retlw	1
   800     1061  3400               	retlw	0
   801     1062  3400               	retlw	0
   802     1063  3400               	retlw	0
   803     1064  340A               	retlw	10
   804     1065  3400               	retlw	0
   805     1066  3400               	retlw	0
   806     1067  3400               	retlw	0
   807     1068  3464               	retlw	100
   808     1069  3400               	retlw	0
   809     106A  3400               	retlw	0
   810     106B  3400               	retlw	0
   811     106C  34E8               	retlw	232
   812     106D  3403               	retlw	3
   813     106E  3400               	retlw	0
   814     106F  3400               	retlw	0
   815     1070  3410               	retlw	16
   816     1071  3427               	retlw	39
   817     1072  3400               	retlw	0
   818     1073  3400               	retlw	0
   819     1074  34A0               	retlw	160
   820     1075  3486               	retlw	134
   821     1076  3401               	retlw	1
   822     1077  3400               	retlw	0
   823     1078  3440               	retlw	64
   824     1079  3442               	retlw	66
   825     107A  340F               	retlw	15
   826     107B  3400               	retlw	0
   827     107C  3480               	retlw	128
   828     107D  3496               	retlw	150
   829     107E  3498               	retlw	152
   830     107F  3400               	retlw	0
   831     1080  3400               	retlw	0
   832     1081  34E1               	retlw	225
   833     1082  34F5               	retlw	245
   834     1083  3405               	retlw	5
   835     1084  3400               	retlw	0
   836     1085  34CA               	retlw	202
   837     1086  349A               	retlw	154
   838     1087  343B               	retlw	59
   839     1088                     __end_of_dpowers:
   840     1088                     _password:
   841     1088  3431               	retlw	49
   842     1089  3431               	retlw	49
   843     108A  3431               	retlw	49
   844     108B  3431               	retlw	49
   845     108C  3436               	retlw	54
   846     108D  3430               	retlw	48
   847     108E  3400               	retlw	0
   848     108F  3400               	retlw	0
   849     1090                     __end_of_password:
   850     000E                     _TMR1           set	14
   851     0005                     _PORTA          set	5
   852     0005                     _PORTAbits      set	5
   853     0010                     _T1CON          set	16
   854     000C                     _PIR1bits       set	12
   855     0007                     _PORTCbits      set	7
   856     0007                     _PORTC          set	7
   857     0006                     _PORTB          set	6
   858     001E                     _ADRESH         set	30
   859     001F                     _ADCON0bits     set	31
   860     002B                     _RA3            set	43
   861     002A                     _RA2            set	42
   862     0080                     _TMR1ON         set	128
   863     0060                     _TMR1IF         set	96
   864     005E                     _PEIE           set	94
   865     005F                     _GIE            set	95
   866     0085                     _TRISA          set	133
   867     008F                     _OSCCON         set	143
   868     0087                     _TRISC          set	135
   869     0081                     _OPTION_REGbits set	129
   870     0086                     _TRISB          set	134
   871     009E                     _ADRESL         set	158
   872     009F                     _ADCON1bits     set	159
   873     042B                     _TRISA3         set	1067
   874     042A                     _TRISA2         set	1066
   875     0429                     _TRISA1         set	1065
   876     0428                     _TRISA0         set	1064
   877     0460                     _TMR1IE         set	1120
   878     0188                     _ANSEL          set	392
   879     0189                     _ANSELH         set	393
   880     1090                     STR_8:
   881     1090  344D               	retlw	77	;'M'
   882     1091  344F               	retlw	79	;'O'
   883     1092  344E               	retlw	78	;'N'
   884     1093  3449               	retlw	73	;'I'
   885     1094  3454               	retlw	84	;'T'
   886     1095  344F               	retlw	79	;'O'
   887     1096  3452               	retlw	82	;'R'
   888     1097  3445               	retlw	69	;'E'
   889     1098  344F               	retlw	79	;'O'
   890     1099  3420               	retlw	32	;' '
   891     109A  3441               	retlw	65	;'A'
   892     109B  344D               	retlw	77	;'M'
   893     109C  3442               	retlw	66	;'B'
   894     109D  3449               	retlw	73	;'I'
   895     109E  3445               	retlw	69	;'E'
   896     109F  344E               	retlw	78	;'N'
   897     10A0  3454               	retlw	84	;'T'
   898     10A1  3441               	retlw	65	;'A'
   899     10A2  344C               	retlw	76	;'L'
   900     10A3  3400               	retlw	0
   901     10A4                     STR_7:
   902     10A4  3453               	retlw	83	;'S'
   903     10A5  3469               	retlw	105	;'i'
   904     10A6  3473               	retlw	115	;'s'
   905     10A7  3474               	retlw	116	;'t'
   906     10A8  3465               	retlw	101	;'e'
   907     10A9  346D               	retlw	109	;'m'
   908     10AA  3461               	retlw	97	;'a'
   909     10AB  3420               	retlw	32	;' '
   910     10AC  3442               	retlw	66	;'B'
   911     10AD  346C               	retlw	108	;'l'
   912     10AE  346F               	retlw	111	;'o'
   913     10AF  3471               	retlw	113	;'q'
   914     10B0  3475               	retlw	117	;'u'
   915     10B1  3465               	retlw	101	;'e'
   916     10B2  3461               	retlw	97	;'a'
   917     10B3  3464               	retlw	100	;'d'
   918     10B4  346F               	retlw	111	;'o'
   919     10B5  3400               	retlw	0
   920     10B6                     STR_6:
   921     10B6  3443               	retlw	67	;'C'
   922     10B7  346C               	retlw	108	;'l'
   923     10B8  3461               	retlw	97	;'a'
   924     10B9  3476               	retlw	118	;'v'
   925     10BA  3465               	retlw	101	;'e'
   926     10BB  3420               	retlw	32	;' '
   927     10BC  3449               	retlw	73	;'I'
   928     10BD  346E               	retlw	110	;'n'
   929     10BE  3463               	retlw	99	;'c'
   930     10BF  346F               	retlw	111	;'o'
   931     10C0  3472               	retlw	114	;'r'
   932     10C1  3472               	retlw	114	;'r'
   933     10C2  3465               	retlw	101	;'e'
   934     10C3  3463               	retlw	99	;'c'
   935     10C4  3474               	retlw	116	;'t'
   936     10C5  3461               	retlw	97	;'a'
   937     10C6  3400               	retlw	0
   938     10C7                     STR_12:
   939     10C7  3441               	retlw	65	;'A'
   940     10C8  346D               	retlw	109	;'m'
   941     10C9  3462               	retlw	98	;'b'
   942     10CA  3461               	retlw	97	;'a'
   943     10CB  3473               	retlw	115	;'s'
   944     10CC  3420               	retlw	32	;' '
   945     10CD  3443               	retlw	67	;'C'
   946     10CE  3465               	retlw	101	;'e'
   947     10CF  3472               	retlw	114	;'r'
   948     10D0  3472               	retlw	114	;'r'
   949     10D1  3461               	retlw	97	;'a'
   950     10D2  3464               	retlw	100	;'d'
   951     10D3  3461               	retlw	97	;'a'
   952     10D4  3473               	retlw	115	;'s'
   953     10D5  3400               	retlw	0
   954     10D6                     STR_15:
   955     10D6  3441               	retlw	65	;'A'
   956     10D7  346D               	retlw	109	;'m'
   957     10D8  3462               	retlw	98	;'b'
   958     10D9  3461               	retlw	97	;'a'
   959     10DA  3473               	retlw	115	;'s'
   960     10DB  3420               	retlw	32	;' '
   961     10DC  3441               	retlw	65	;'A'
   962     10DD  3462               	retlw	98	;'b'
   963     10DE  3469               	retlw	105	;'i'
   964     10DF  3465               	retlw	101	;'e'
   965     10E0  3472               	retlw	114	;'r'
   966     10E1  3474               	retlw	116	;'t'
   967     10E2  3461               	retlw	97	;'a'
   968     10E3  3473               	retlw	115	;'s'
   969     10E4  3400               	retlw	0
   970     10E5                     STR_5:
   971     10E5  3443               	retlw	67	;'C'
   972     10E6  346C               	retlw	108	;'l'
   973     10E7  3461               	retlw	97	;'a'
   974     10E8  3476               	retlw	118	;'v'
   975     10E9  3465               	retlw	101	;'e'
   976     10EA  3420               	retlw	32	;' '
   977     10EB  3443               	retlw	67	;'C'
   978     10EC  346F               	retlw	111	;'o'
   979     10ED  3472               	retlw	114	;'r'
   980     10EE  3472               	retlw	114	;'r'
   981     10EF  3465               	retlw	101	;'e'
   982     10F0  3463               	retlw	99	;'c'
   983     10F1  3474               	retlw	116	;'t'
   984     10F2  3461               	retlw	97	;'a'
   985     10F3  3400               	retlw	0
   986     10F4                     STR_13:
   987     10F4  3450               	retlw	80	;'P'
   988     10F5  3431               	retlw	49	;'1'
   989     10F6  3420               	retlw	32	;' '
   990     10F7  3443               	retlw	67	;'C'
   991     10F8  3465               	retlw	101	;'e'
   992     10F9  3420               	retlw	32	;' '
   993     10FA  342C               	retlw	44	;','
   994     10FB  3450               	retlw	80	;'P'
   995     10FC  3432               	retlw	50	;'2'
   996     10FD  3420               	retlw	32	;' '
   997     10FE  3441               	retlw	65	;'A'
   998     10FF  3462               	retlw	98	;'b'
   999     1100  3400               	retlw	0
  1000     1101                     STR_10:
  1001     1101  3454               	retlw	84	;'T'
  1002     1102  343A               	retlw	58	;':'
  1003     1103  3420               	retlw	32	;' '
  1004     1104  3425               	retlw	37	;'%'
  1005     1105  342E               	retlw	46	;'.'
  1006     1106  3432               	retlw	50	;'2'
  1007     1107  3466               	retlw	102	;'f'
  1008     1108  3420               	retlw	32	;' '
  1009     1109  344C               	retlw	76	;'L'
  1010     110A  343A               	retlw	58	;':'
  1011     110B  3425               	retlw	37	;'%'
  1012     110C  3464               	retlw	100	;'d'
  1013     110D  3400               	retlw	0
  1014     110E                     STR_14:
  1015     110E  3450               	retlw	80	;'P'
  1016     110F  3431               	retlw	49	;'1'
  1017     1110  3420               	retlw	32	;' '
  1018     1111  3441               	retlw	65	;'A'
  1019     1112  3462               	retlw	98	;'b'
  1020     1113  342C               	retlw	44	;','
  1021     1114  3420               	retlw	32	;' '
  1022     1115  3450               	retlw	80	;'P'
  1023     1116  3432               	retlw	50	;'2'
  1024     1117  3420               	retlw	32	;' '
  1025     1118  3443               	retlw	67	;'C'
  1026     1119  3465               	retlw	101	;'e'
  1027     111A  3400               	retlw	0
  1028     111B                     STR_4:
  1029     111B  3450               	retlw	80	;'P'
  1030     111C  3472               	retlw	114	;'r'
  1031     111D  3465               	retlw	101	;'e'
  1032     111E  3473               	retlw	115	;'s'
  1033     111F  3473               	retlw	115	;'s'
  1034     1120  3420               	retlw	32	;' '
  1035     1121  3461               	retlw	97	;'a'
  1036     1122  3420               	retlw	32	;' '
  1037     1123  344B               	retlw	75	;'K'
  1038     1124  3465               	retlw	101	;'e'
  1039     1125  3479               	retlw	121	;'y'
  1040     1126  3400               	retlw	0
  1041     1127                     STR_3:
  1042     1127  3442               	retlw	66	;'B'
  1043     1128  3469               	retlw	105	;'i'
  1044     1129  3465               	retlw	101	;'e'
  1045     112A  346E               	retlw	110	;'n'
  1046     112B  3476               	retlw	118	;'v'
  1047     112C  3465               	retlw	101	;'e'
  1048     112D  346E               	retlw	110	;'n'
  1049     112E  3469               	retlw	105	;'i'
  1050     112F  3464               	retlw	100	;'d'
  1051     1130  346F               	retlw	111	;'o'
  1052     1131  3400               	retlw	0
  1053     1132                     STR_11:
  1054     1132  3450               	retlw	80	;'P'
  1055     1133  3475               	retlw	117	;'u'
  1056     1134  3465               	retlw	101	;'e'
  1057     1135  3472               	retlw	114	;'r'
  1058     1136  3474               	retlw	116	;'t'
  1059     1137  3461               	retlw	97	;'a'
  1060     1138  3473               	retlw	115	;'s'
  1061     1139  343A               	retlw	58	;':'
  1062     113A  3400               	retlw	0
  1063     113B                     STR_9:
  1064     113B  3453               	retlw	83	;'S'
  1065     113C  3465               	retlw	101	;'e'
  1066     113D  346E               	retlw	110	;'n'
  1067     113E  3473               	retlw	115	;'s'
  1068     113F  346F               	retlw	111	;'o'
  1069     1140  3472               	retlw	114	;'r'
  1070     1141  3400               	retlw	0
  1071     1142                     STR_1:
  1072     1142  3441               	retlw	65	;'A'
  1073     1143  344C               	retlw	76	;'L'
  1074     1144  3441               	retlw	65	;'A'
  1075     1145  3452               	retlw	82	;'R'
  1076     1146  344D               	retlw	77	;'M'
  1077     1147  3441               	retlw	65	;'A'
  1078     1148  3400               	retlw	0
  1079     1149                     STR_2:
  1080     1149  3441               	retlw	65	;'A'
  1081     114A  344C               	retlw	76	;'L'
  1082     114B  3445               	retlw	69	;'E'
  1083     114C  3452               	retlw	82	;'R'
  1084     114D  3454               	retlw	84	;'T'
  1085     114E  3441               	retlw	65	;'A'
  1086     114F  3400               	retlw	0
  1087                           
  1088                           	psect	cinit
  1089     0011                     start_initialization:	
  1090                           ; #config settings
  1091                           
  1092     0011                     __initialization:
  1093                           
  1094                           ; Initialize objects allocated to BANK3
  1095     0011  1783               	bsf	3,7	;select IRP bank2
  1096     0012  30A0               	movlw	low (__pdataBANK3+16)
  1097     0013  00FD               	movwf	btemp+-1
  1098     0014  301F               	movlw	high __pidataBANK3
  1099     0015  00FE               	movwf	btemp
  1100     0016  3085               	movlw	low __pidataBANK3
  1101     0017  00FF               	movwf	btemp+1
  1102     0018  3090               	movlw	low __pdataBANK3
  1103     0019  0084               	movwf	4
  1104     001A  160A  158A  2799  120A  118A  	fcall	init_ram0
  1105                           
  1106                           ; Initialize objects allocated to BANK0
  1107     001F  120A  118A  2003  120A  118A  	fcall	__pidataBANK0	;fetch initializer
  1108     0024  00EC               	movwf	__pdataBANK0& (0+127)
  1109                           
  1110                           ; Clear objects allocated to BANK1
  1111     0025  1383               	bcf	3,7	;select IRP bank0
  1112     0026  30A0               	movlw	low __pbssBANK1
  1113     0027  0084               	movwf	4
  1114     0028  30CD               	movlw	low (__pbssBANK1+45)
  1115     0029  160A  158A  2714   	fcall	clear_ram0
  1116                           
  1117                           ; Clear objects allocated to BANK0
  1118     002C  01E9               	clrf	__pbssBANK0& (0+127)
  1119     002D  01EA               	clrf	(__pbssBANK0+1)& (0+127)
  1120     002E  01EB               	clrf	(__pbssBANK0+2)& (0+127)
  1121                           
  1122                           ; Clear objects allocated to COMMON
  1123     002F  01F8               	clrf	__pbssCOMMON& (0+127)
  1124     0030  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
  1125     0031  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
  1126     0032                     end_of_initialization:	
  1127                           ;End of C runtime variable initialization code
  1128                           
  1129     0032                     __end_of__initialization:
  1130     0032  0183               	clrf	3
  1131     0033  160A  118A  2BB1   	ljmp	_main	;jump to C main() function
  1132                           
  1133                           	psect	bssCOMMON
  1134     0078                     __pbssCOMMON:
  1135     0078                     _flag_3s:
  1136     0078                     	ds	1
  1137     0079                     _flag_2s:
  1138     0079                     	ds	1
  1139     007A                     _estado_actual:
  1140     007A                     	ds	1
  1141                           
  1142                           	psect	bssBANK0
  1143     0069                     __pbssBANK0:
  1144     0069                     _idx:
  1145     0069                     	ds	1
  1146     006A                     _clave:
  1147     006A                     	ds	1
  1148     006B                     _flag_1s:
  1149     006B                     	ds	1
  1150                           
  1151                           	psect	dataBANK0
  1152     006C                     __pdataBANK0:
  1153     006C                     _key:
  1154     006C                     	ds	1
  1155                           
  1156                           	psect	bssBANK1
  1157     00A0                     __pbssBANK1:
  1158     00A0                     _celsius:
  1159     00A0                     	ds	3
  1160     00A3                     _luz1:
  1161     00A3                     	ds	2
  1162     00A5                     _intentos:
  1163     00A5                     	ds	2
  1164     00A7                     _puerta2:
  1165     00A7                     	ds	2
  1166     00A9                     _puerta1:
  1167     00A9                     	ds	2
  1168     00AB                     _luz:
  1169     00AB                     	ds	2
  1170     00AD                     _humedad:
  1171     00AD                     	ds	2
  1172     00AF                     _count_3000ms:
  1173     00AF                     	ds	2
  1174     00B1                     _count_2000ms:
  1175     00B1                     	ds	2
  1176     00B3                     _count_1000ms:
  1177     00B3                     	ds	2
  1178     00B5                     _StringTemperature:
  1179     00B5                     	ds	16
  1180     00C5                     _pass_user:
  1181     00C5                     	ds	8
  1182                           
  1183                           	psect	dataBANK3
  1184     0190                     __pdataBANK3:
  1185     0190                     keypad_getkey@F1301:
  1186     0190                     	ds	16
  1187                           
  1188                           	psect	inittext
  1189     1F95                     init_fetch0:	
  1190                           ;	Called with low address in FSR and high address in W
  1191                           
  1192     1F95  087E               	movf	126,w
  1193     1F96  008A               	movwf	10
  1194     1F97  087F               	movf	127,w
  1195     1F98  0082               	movwf	2
  1196     1F99                     init_ram0:	
  1197                           ;Called with:
  1198                           ;	high address of idata address in btemp 
  1199                           ;	low address of idata address in btemp+1 
  1200                           ;	low address of data in FSR
  1201                           ;	high address + 1 of data in btemp-1
  1202                           
  1203     1F99  2795  160A  158A   	fcall	init_fetch0
  1204     1F9C  0080               	movwf	0
  1205     1F9D  0A84               	incf	4,f
  1206     1F9E  0804               	movf	4,w
  1207     1F9F  067D               	xorwf	125,w
  1208     1FA0  1903               	btfsc	3,2
  1209     1FA1  3400               	retlw	0
  1210     1FA2  0AFF               	incf	127,f
  1211     1FA3  1903               	btfsc	3,2
  1212     1FA4  0AFE               	incf	126,f
  1213     1FA5  2F99               	goto	init_ram0
  1214                           
  1215                           	psect	clrtext
  1216     1F14                     clear_ram0:	
  1217                           ;	Called with FSR containing the base address, and
  1218                           ;	W with the last address+1
  1219                           
  1220     1F14  0064               	clrwdt	;clear the watchdog before getting into this loop
  1221     1F15                     clrloop0:
  1222     1F15  0180               	clrf	0	;clear RAM location pointed to by FSR
  1223     1F16  0A84               	incf	4,f	;increment pointer
  1224     1F17  0604               	xorwf	4,w	;XOR with final address
  1225     1F18  1903               	btfsc	3,2	;have we reached the end yet?
  1226     1F19  3400               	retlw	0	;all done for this memory range, return
  1227     1F1A  0604               	xorwf	4,w	;XOR again to restore value
  1228     1F1B  2F15               	goto	clrloop0	;do the next byte
  1229                           
  1230                           	psect	cstackBANK1
  1231     00CD                     __pcstackBANK1:
  1232     00CD                     _sprintf$1103:
  1233                           
  1234                           ; 3 bytes @ 0x0
  1235     00CD                     	ds	3
  1236     00D0                     sprintf@ap:
  1237                           
  1238                           ; 1 bytes @ 0x3
  1239     00D0                     	ds	1
  1240     00D1                     sprintf@flag:
  1241                           
  1242                           ; 2 bytes @ 0x4
  1243     00D1                     	ds	2
  1244     00D3                     sprintf@eexp:
  1245                           
  1246                           ; 2 bytes @ 0x6
  1247     00D3                     	ds	2
  1248     00D5                     sprintf@tmpval:
  1249                           
  1250                           ; 4 bytes @ 0x8
  1251     00D5                     	ds	4
  1252     00D9                     sprintf@val:
  1253                           
  1254                           ; 4 bytes @ 0xC
  1255     00D9                     	ds	4
  1256     00DD                     sprintf@prec:
  1257                           
  1258                           ; 2 bytes @ 0x10
  1259     00DD                     	ds	2
  1260     00DF                     sprintf@fval:
  1261                           
  1262                           ; 3 bytes @ 0x12
  1263     00DF                     	ds	3
  1264     00E2                     sprintf@c:
  1265                           
  1266                           ; 1 bytes @ 0x15
  1267     00E2                     	ds	1
  1268     00E3                     ambiental@temperatura:
  1269                           
  1270                           ; 2 bytes @ 0x16
  1271     00E3                     	ds	2
  1272     00E5                     ambiental@value_adc:
  1273                           
  1274                           ; 2 bytes @ 0x18
  1275     00E5                     	ds	2
  1276                           
  1277                           	psect	cstackCOMMON
  1278     0070                     __pcstackCOMMON:
  1279     0070                     ?_LCD_Command:
  1280     0070                     ?_funcion_seguridad:	
  1281                           ; 1 bytes @ 0x0
  1282                           
  1283     0070                     ?_sistema_bloqueado:	
  1284                           ; 1 bytes @ 0x0
  1285                           
  1286     0070                     ?_ambiental:	
  1287                           ; 1 bytes @ 0x0
  1288                           
  1289     0070                     ?_puertas:	
  1290                           ; 1 bytes @ 0x0
  1291                           
  1292     0070                     ?_Timer1_start:	
  1293                           ; 1 bytes @ 0x0
  1294                           
  1295     0070                     ?_isdigit:	
  1296                           ; 1 bytes @ 0x0
  1297                           
  1298     0070                     ?_adc_int:	
  1299                           ; 1 bit 
  1300                           
  1301     0070                     ?_keypad_init:	
  1302                           ; 1 bytes @ 0x0
  1303                           
  1304     0070                     ?_keypad_getkey:	
  1305                           ; 1 bytes @ 0x0
  1306                           
  1307     0070                     ?_LCD_Init:	
  1308                           ; 1 bytes @ 0x0
  1309                           
  1310     0070                     ?_LCD_Char:	
  1311                           ; 1 bytes @ 0x0
  1312                           
  1313     0070                     ?_LCD_Clear:	
  1314                           ; 1 bytes @ 0x0
  1315                           
  1316     0070                     ?_inicializar:	
  1317                           ; 1 bytes @ 0x0
  1318                           
  1319     0070                     ?_inicializar_sistema:	
  1320                           ; 1 bytes @ 0x0
  1321                           
  1322     0070                     ?_manejar_estado_init:	
  1323                           ; 1 bytes @ 0x0
  1324                           
  1325     0070                     ?_manejar_estado_bloqueado:	
  1326                           ; 1 bytes @ 0x0
  1327                           
  1328     0070                     ?_manejar_estado_monitoreo_ambiental:	
  1329                           ; 1 bytes @ 0x0
  1330                           
  1331     0070                     ?_manejar_estado_monitoreo_eventos:	
  1332                           ; 1 bytes @ 0x0
  1333                           
  1334     0070                     ?_manejar_estado_alarma:	
  1335                           ; 1 bytes @ 0x0
  1336                           
  1337     0070                     ?_manejar_estado_alerta:	
  1338                           ; 1 bytes @ 0x0
  1339                           
  1340     0070                     ?_main:	
  1341                           ; 1 bytes @ 0x0
  1342                           
  1343     0070                     ?_Timer1_ISR:	
  1344                           ; 1 bytes @ 0x0
  1345                           
  1346     0070                     ??_Timer1_ISR:	
  1347                           ; 1 bytes @ 0x0
  1348                           
  1349                           
  1350                           ; 1 bytes @ 0x0
  1351     0070                     	ds	3
  1352     0073                     ?_delay_ms_variable:
  1353     0073                     ?___lbmod:	
  1354                           ; 1 bytes @ 0x3
  1355                           
  1356     0073                     ?_strncmp:	
  1357                           ; 1 bytes @ 0x3
  1358                           
  1359     0073                     ?_adc_read:	
  1360                           ; 2 bytes @ 0x3
  1361                           
  1362     0073                     ?___wmul:	
  1363                           ; 2 bytes @ 0x3
  1364                           
  1365     0073                     ?___awmod:	
  1366                           ; 2 bytes @ 0x3
  1367                           
  1368     0073                     ?___ftpack:	
  1369                           ; 2 bytes @ 0x3
  1370                           
  1371     0073                     ?___ftneg:	
  1372                           ; 3 bytes @ 0x3
  1373                           
  1374     0073                     ___lbmod@divisor:	
  1375                           ; 3 bytes @ 0x3
  1376                           
  1377     0073                     _isdigit$874:	
  1378                           ; 1 bytes @ 0x3
  1379                           
  1380     0073                     strncmp@s1:	
  1381                           ; 1 bytes @ 0x3
  1382                           
  1383     0073                     adc_read@channel:	
  1384                           ; 1 bytes @ 0x3
  1385                           
  1386     0073                     delay_ms_variable@ms:	
  1387                           ; 2 bytes @ 0x3
  1388                           
  1389     0073                     ___wmul@multiplier:	
  1390                           ; 2 bytes @ 0x3
  1391                           
  1392     0073                     ___awmod@divisor:	
  1393                           ; 2 bytes @ 0x3
  1394                           
  1395     0073                     ___ftpack@arg:	
  1396                           ; 2 bytes @ 0x3
  1397                           
  1398     0073                     ___ftneg@f1:	
  1399                           ; 3 bytes @ 0x3
  1400                           
  1401     0073                     ??_LCD_Command:	
  1402                           ; 3 bytes @ 0x3
  1403                           
  1404     0073                     ??_Timer1_start:	
  1405                           ; 1 bytes @ 0x3
  1406                           
  1407     0073                     ??_isdigit:	
  1408                           ; 1 bytes @ 0x3
  1409                           
  1410     0073                     ??__tdiv_to_l_:	
  1411                           ; 1 bytes @ 0x3
  1412                           
  1413     0073                     ??_adc_int:	
  1414                           ; 1 bytes @ 0x3
  1415                           
  1416     0073                     ??_keypad_init:	
  1417                           ; 1 bytes @ 0x3
  1418                           
  1419     0073                     ??_keypad_getkey:	
  1420                           ; 1 bytes @ 0x3
  1421                           
  1422     0073                     ??_LCD_Char:	
  1423                           ; 1 bytes @ 0x3
  1424                           
  1425     0073                     ??_inicializar:	
  1426                           ; 1 bytes @ 0x3
  1427                           
  1428     0073                     ??___lldiv:	
  1429                           ; 1 bytes @ 0x3
  1430                           
  1431     0073                     ??___ftge:	
  1432                           ; 1 bytes @ 0x3
  1433                           
  1434                           
  1435                           ; 1 bytes @ 0x3
  1436     0073                     	ds	1
  1437     0074                     isdigit@c:
  1438     0074                     strncmp@s2:	
  1439                           ; 1 bytes @ 0x4
  1440                           
  1441     0074                     ??___lbmod:	
  1442                           ; 2 bytes @ 0x4
  1443                           
  1444     0074                     ??___llmod:	
  1445                           ; 1 bytes @ 0x4
  1446                           
  1447                           
  1448                           ; 1 bytes @ 0x4
  1449     0074                     	ds	1
  1450     0075                     LCD_Command@cmd:
  1451     0075                     LCD_Char@dat:	
  1452                           ; 1 bytes @ 0x5
  1453                           
  1454     0075                     ___llmod@counter:	
  1455                           ; 1 bytes @ 0x5
  1456                           
  1457     0075                     adc_read@value_adc:	
  1458                           ; 1 bytes @ 0x5
  1459                           
  1460     0075                     ___wmul@multiplicand:	
  1461                           ; 2 bytes @ 0x5
  1462                           
  1463     0075                     ___awmod@dividend:	
  1464                           ; 2 bytes @ 0x5
  1465                           
  1466     0075                     ??_delay_ms_variable:	
  1467                           ; 2 bytes @ 0x5
  1468                           
  1469                           
  1470                           ; 1 bytes @ 0x5
  1471     0075                     	ds	1
  1472     0076                     ?_LCD_String:
  1473     0076                     ?___lbdiv:	
  1474                           ; 1 bytes @ 0x6
  1475                           
  1476     0076                     ___ftpack@exp:	
  1477                           ; 1 bytes @ 0x6
  1478                           
  1479     0076                     ___lbdiv@divisor:	
  1480                           ; 1 bytes @ 0x6
  1481                           
  1482     0076                     LCD_String@msg:	
  1483                           ; 1 bytes @ 0x6
  1484                           
  1485     0076                     strncmp@len:	
  1486                           ; 2 bytes @ 0x6
  1487                           
  1488     0076                     ??_LCD_Init:	
  1489                           ; 2 bytes @ 0x6
  1490                           
  1491     0076                     ??_LCD_Clear:	
  1492                           ; 1 bytes @ 0x6
  1493                           
  1494     0076                     ??___ftneg:	
  1495                           ; 1 bytes @ 0x6
  1496                           
  1497                           
  1498                           ; 1 bytes @ 0x6
  1499     0076                     	ds	1
  1500     0077                     ___ftpack@sign:
  1501     0077                     ??___wmul:	
  1502                           ; 1 bytes @ 0x7
  1503                           
  1504     0077                     ??___bmul:	
  1505                           ; 1 bytes @ 0x7
  1506                           
  1507     0077                     ??___awdiv:	
  1508                           ; 1 bytes @ 0x7
  1509                           
  1510     0077                     ??___awmod:	
  1511                           ; 1 bytes @ 0x7
  1512                           
  1513     0077                     ??___lbdiv:	
  1514                           ; 1 bytes @ 0x7
  1515                           
  1516                           
  1517                           ; 1 bytes @ 0x7
  1518     0077                     	ds	1
  1519     0078                     ??_sistema_bloqueado:
  1520     0078                     ??_LCD_String:	
  1521                           ; 1 bytes @ 0x8
  1522                           
  1523     0078                     ??_LCD_String_xy:	
  1524                           ; 1 bytes @ 0x8
  1525                           
  1526     0078                     ??_inicializar_sistema:	
  1527                           ; 1 bytes @ 0x8
  1528                           
  1529     0078                     ??_manejar_estado_init:	
  1530                           ; 1 bytes @ 0x8
  1531                           
  1532     0078                     ??_manejar_estado_bloqueado:	
  1533                           ; 1 bytes @ 0x8
  1534                           
  1535     0078                     ??_manejar_estado_monitoreo_ambiental:	
  1536                           ; 1 bytes @ 0x8
  1537                           
  1538     0078                     ??_manejar_estado_monitoreo_eventos:	
  1539                           ; 1 bytes @ 0x8
  1540                           
  1541     0078                     ??_manejar_estado_alarma:	
  1542                           ; 1 bytes @ 0x8
  1543                           
  1544     0078                     ??_manejar_estado_alerta:	
  1545                           ; 1 bytes @ 0x8
  1546                           
  1547     0078                     ??_main:	
  1548                           ; 1 bytes @ 0x8
  1549                           
  1550     0078                     ??_fround:	
  1551                           ; 1 bytes @ 0x8
  1552                           
  1553     0078                     ??_scale:	
  1554                           ; 1 bytes @ 0x8
  1555                           
  1556     0078                     ??___awtoft:	
  1557                           ; 1 bytes @ 0x8
  1558                           
  1559     0078                     ??___ftsub:	
  1560                           ; 1 bytes @ 0x8
  1561                           
  1562     0078                     ??___lltoft:	
  1563                           ; 1 bytes @ 0x8
  1564                           
  1565                           
  1566                           	psect	cstackBANK0
  1567     0020                     __pcstackBANK0:	
  1568                           ; 1 bytes @ 0x8
  1569                           
  1570     0020                     ?_LCD_String_xy:
  1571     0020                     ?_blink_led:	
  1572                           ; 1 bytes @ 0x0
  1573                           
  1574     0020                     ?___ftge:	
  1575                           ; 1 bytes @ 0x0
  1576                           
  1577     0020                     ?__tdiv_to_l_:	
  1578                           ; 1 bit 
  1579                           
  1580     0020                     ?__div_to_l_:	
  1581                           ; 4 bytes @ 0x0
  1582                           
  1583     0020                     ?___lldiv:	
  1584                           ; 4 bytes @ 0x0
  1585                           
  1586     0020                     LCD_String_xy@pos:	
  1587                           ; 4 bytes @ 0x0
  1588                           
  1589     0020                     ___awmod@counter:	
  1590                           ; 1 bytes @ 0x0
  1591                           
  1592     0020                     ___lbmod@dividend:	
  1593                           ; 1 bytes @ 0x0
  1594                           
  1595     0020                     blink_led@on_time:	
  1596                           ; 1 bytes @ 0x0
  1597                           
  1598     0020                     ___wmul@product:	
  1599                           ; 2 bytes @ 0x0
  1600                           
  1601     0020                     __div_to_l_@f1:	
  1602                           ; 2 bytes @ 0x0
  1603                           
  1604     0020                     __tdiv_to_l_@f1:	
  1605                           ; 3 bytes @ 0x0
  1606                           
  1607     0020                     ___ftge@ff1:	
  1608                           ; 3 bytes @ 0x0
  1609                           
  1610     0020                     ___lldiv@divisor:	
  1611                           ; 3 bytes @ 0x0
  1612                           
  1613     0020                     keypad_getkey@letras:	
  1614                           ; 4 bytes @ 0x0
  1615                           
  1616     0020                     ??_strncmp:	
  1617                           ; 16 bytes @ 0x0
  1618                           
  1619     0020                     ??___ftpack:	
  1620                           ; 1 bytes @ 0x0
  1621                           
  1622     0020                     ??_adc_read:	
  1623                           ; 1 bytes @ 0x0
  1624                           
  1625                           
  1626                           ; 1 bytes @ 0x0
  1627     0020                     	ds	1
  1628     0021                     ___awmod@sign:
  1629     0021                     ___lbmod@counter:	
  1630                           ; 1 bytes @ 0x1
  1631                           
  1632     0021                     LCD_String_xy@msg:	
  1633                           ; 1 bytes @ 0x1
  1634                           
  1635                           
  1636                           ; 2 bytes @ 0x1
  1637     0021                     	ds	1
  1638     0022                     ?___awdiv:
  1639     0022                     ___lbmod@rem:	
  1640                           ; 2 bytes @ 0x2
  1641                           
  1642     0022                     blink_led@off_time:	
  1643                           ; 1 bytes @ 0x2
  1644                           
  1645     0022                     ___awdiv@divisor:	
  1646                           ; 2 bytes @ 0x2
  1647                           
  1648                           
  1649                           ; 2 bytes @ 0x2
  1650     0022                     	ds	1
  1651     0023                     ?___awtoft:
  1652     0023                     ?___lltoft:	
  1653                           ; 3 bytes @ 0x3
  1654                           
  1655     0023                     LCD_String_xy@row:	
  1656                           ; 3 bytes @ 0x3
  1657                           
  1658     0023                     ___lbdiv@dividend:	
  1659                           ; 1 bytes @ 0x3
  1660                           
  1661     0023                     ___awtoft@c:	
  1662                           ; 1 bytes @ 0x3
  1663                           
  1664     0023                     __div_to_l_@f2:	
  1665                           ; 2 bytes @ 0x3
  1666                           
  1667     0023                     __tdiv_to_l_@f2:	
  1668                           ; 3 bytes @ 0x3
  1669                           
  1670     0023                     ___ftge@ff2:	
  1671                           ; 3 bytes @ 0x3
  1672                           
  1673     0023                     ___lltoft@c:	
  1674                           ; 3 bytes @ 0x3
  1675                           
  1676                           
  1677                           ; 4 bytes @ 0x3
  1678     0023                     	ds	1
  1679     0024                     LCD_String_xy@location:
  1680     0024                     ___lbdiv@counter:	
  1681                           ; 1 bytes @ 0x4
  1682                           
  1683     0024                     blink_led@duration:	
  1684                           ; 1 bytes @ 0x4
  1685                           
  1686     0024                     ___awdiv@dividend:	
  1687                           ; 2 bytes @ 0x4
  1688                           
  1689     0024                     ___lldiv@dividend:	
  1690                           ; 2 bytes @ 0x4
  1691                           
  1692                           
  1693                           ; 4 bytes @ 0x4
  1694     0024                     	ds	1
  1695     0025                     ___lbdiv@quotient:
  1696     0025                     ??_puertas:	
  1697                           ; 1 bytes @ 0x5
  1698                           
  1699                           
  1700                           ; 1 bytes @ 0x5
  1701     0025                     	ds	1
  1702     0026                     ___awdiv@counter:
  1703     0026                     ___awtoft@sign:	
  1704                           ; 1 bytes @ 0x6
  1705                           
  1706     0026                     __tdiv_to_l_@quot:	
  1707                           ; 1 bytes @ 0x6
  1708                           
  1709     0026                     ??__div_to_l_:	
  1710                           ; 4 bytes @ 0x6
  1711                           
  1712     0026                     ??_blink_led:	
  1713                           ; 1 bytes @ 0x6
  1714                           
  1715                           
  1716                           ; 1 bytes @ 0x6
  1717     0026                     	ds	1
  1718     0027                     ___awdiv@sign:
  1719     0027                     ___lltoft@exp:	
  1720                           ; 1 bytes @ 0x7
  1721                           
  1722                           
  1723                           ; 1 bytes @ 0x7
  1724     0027                     	ds	1
  1725     0028                     blink_led@elapsed_time:
  1726     0028                     puertas@puerta1:	
  1727                           ; 2 bytes @ 0x8
  1728                           
  1729     0028                     ___awdiv@quotient:	
  1730                           ; 2 bytes @ 0x8
  1731                           
  1732     0028                     ___lldiv@quotient:	
  1733                           ; 2 bytes @ 0x8
  1734                           
  1735                           
  1736                           ; 4 bytes @ 0x8
  1737     0028                     	ds	2
  1738     002A                     ?___bmul:
  1739     002A                     blink_led@led:	
  1740                           ; 1 bytes @ 0xA
  1741                           
  1742     002A                     ___bmul@multiplicand:	
  1743                           ; 1 bytes @ 0xA
  1744                           
  1745     002A                     __tdiv_to_l_@cntr:	
  1746                           ; 1 bytes @ 0xA
  1747                           
  1748     002A                     puertas@puerta2:	
  1749                           ; 1 bytes @ 0xA
  1750                           
  1751                           
  1752                           ; 2 bytes @ 0xA
  1753     002A                     	ds	1
  1754     002B                     ___bmul@product:
  1755     002B                     __tdiv_to_l_@exp1:	
  1756                           ; 1 bytes @ 0xB
  1757                           
  1758                           
  1759                           ; 1 bytes @ 0xB
  1760     002B                     	ds	1
  1761     002C                     ___bmul@multiplier:
  1762     002C                     ___lldiv@counter:	
  1763                           ; 1 bytes @ 0xC
  1764                           
  1765                           
  1766                           ; 1 bytes @ 0xC
  1767     002C                     	ds	1
  1768     002D                     ?___ftmul:
  1769     002D                     ?___llmod:	
  1770                           ; 3 bytes @ 0xD
  1771                           
  1772     002D                     ___ftmul@f1:	
  1773                           ; 4 bytes @ 0xD
  1774                           
  1775     002D                     ___llmod@divisor:	
  1776                           ; 3 bytes @ 0xD
  1777                           
  1778                           
  1779                           ; 4 bytes @ 0xD
  1780     002D                     	ds	1
  1781     002E                     __div_to_l_@quot:
  1782                           
  1783                           ; 4 bytes @ 0xE
  1784     002E                     	ds	2
  1785     0030                     keypad_getkey@valor:
  1786     0030                     ___ftmul@f2:	
  1787                           ; 1 bytes @ 0x10
  1788                           
  1789                           
  1790                           ; 3 bytes @ 0x10
  1791     0030                     	ds	1
  1792     0031                     keypad_getkey@i:
  1793     0031                     ___llmod@dividend:	
  1794                           ; 2 bytes @ 0x11
  1795                           
  1796                           
  1797                           ; 4 bytes @ 0x11
  1798     0031                     	ds	1
  1799     0032                     __div_to_l_@cntr:
  1800                           
  1801                           ; 1 bytes @ 0x12
  1802     0032                     	ds	1
  1803     0033                     __div_to_l_@exp1:
  1804     0033                     ??_funcion_seguridad:	
  1805                           ; 1 bytes @ 0x13
  1806                           
  1807     0033                     ??___ftmul:	
  1808                           ; 1 bytes @ 0x13
  1809                           
  1810                           
  1811                           ; 1 bytes @ 0x13
  1812     0033                     	ds	3
  1813     0036                     ___ftmul@exp:
  1814     0036                     funcion_seguridad@temp_str:	
  1815                           ; 1 bytes @ 0x16
  1816                           
  1817                           
  1818                           ; 2 bytes @ 0x16
  1819     0036                     	ds	1
  1820     0037                     ___ftmul@f3_as_product:
  1821                           
  1822                           ; 3 bytes @ 0x17
  1823     0037                     	ds	3
  1824     003A                     ___ftmul@cntr:
  1825                           
  1826                           ; 1 bytes @ 0x1A
  1827     003A                     	ds	1
  1828     003B                     ___ftmul@sign:
  1829                           
  1830                           ; 1 bytes @ 0x1B
  1831     003B                     	ds	1
  1832     003C                     ?_fround:
  1833     003C                     ?_scale:	
  1834                           ; 3 bytes @ 0x1C
  1835                           
  1836                           
  1837                           ; 3 bytes @ 0x1C
  1838     003C                     	ds	3
  1839     003F                     _fround$1101:
  1840     003F                     _scale$1102:	
  1841                           ; 3 bytes @ 0x1F
  1842                           
  1843                           
  1844                           ; 3 bytes @ 0x1F
  1845     003F                     	ds	3
  1846     0042                     scale@scl:
  1847     0042                     _fround$1100:	
  1848                           ; 1 bytes @ 0x22
  1849                           
  1850                           
  1851                           ; 3 bytes @ 0x22
  1852     0042                     	ds	1
  1853     0043                     ?___fttol:
  1854     0043                     ___fttol@f1:	
  1855                           ; 4 bytes @ 0x23
  1856                           
  1857                           
  1858                           ; 3 bytes @ 0x23
  1859     0043                     	ds	2
  1860     0045                     fround@prec:
  1861                           
  1862                           ; 1 bytes @ 0x25
  1863     0045                     	ds	1
  1864     0046                     ?___ftadd:
  1865     0046                     ___ftadd@f1:	
  1866                           ; 3 bytes @ 0x26
  1867                           
  1868                           
  1869                           ; 3 bytes @ 0x26
  1870     0046                     	ds	1
  1871     0047                     ??___fttol:
  1872                           
  1873                           ; 1 bytes @ 0x27
  1874     0047                     	ds	2
  1875     0049                     ___ftadd@f2:
  1876                           
  1877                           ; 3 bytes @ 0x29
  1878     0049                     	ds	1
  1879     004A                     ___fttol@sign1:
  1880                           
  1881                           ; 1 bytes @ 0x2A
  1882     004A                     	ds	1
  1883     004B                     ___fttol@lval:
  1884                           
  1885                           ; 4 bytes @ 0x2B
  1886     004B                     	ds	1
  1887     004C                     ??___ftadd:
  1888                           
  1889                           ; 1 bytes @ 0x2C
  1890     004C                     	ds	3
  1891     004F                     ___ftadd@sign:
  1892     004F                     ___fttol@exp1:	
  1893                           ; 1 bytes @ 0x2F
  1894                           
  1895                           
  1896                           ; 1 bytes @ 0x2F
  1897     004F                     	ds	1
  1898     0050                     ___ftadd@exp2:
  1899                           
  1900                           ; 1 bytes @ 0x30
  1901     0050                     	ds	1
  1902     0051                     ___ftadd@exp1:
  1903                           
  1904                           ; 1 bytes @ 0x31
  1905     0051                     	ds	1
  1906     0052                     ?___ftsub:
  1907     0052                     ___ftsub@f2:	
  1908                           ; 3 bytes @ 0x32
  1909                           
  1910                           
  1911                           ; 3 bytes @ 0x32
  1912     0052                     	ds	3
  1913     0055                     ___ftsub@f1:
  1914                           
  1915                           ; 3 bytes @ 0x35
  1916     0055                     	ds	3
  1917     0058                     ?_sprintf:
  1918     0058                     sprintf@sp:	
  1919                           ; 2 bytes @ 0x38
  1920                           
  1921                           
  1922                           ; 1 bytes @ 0x38
  1923     0058                     	ds	1
  1924     0059                     sprintf@f:
  1925                           
  1926                           ; 2 bytes @ 0x39
  1927     0059                     	ds	7
  1928     0060                     ??_sprintf:
  1929                           
  1930                           ; 1 bytes @ 0x40
  1931     0060                     	ds	6
  1932     0066                     ??_ambiental:
  1933                           
  1934                           ; 1 bytes @ 0x46
  1935     0066                     	ds	3
  1936                           
  1937                           	psect	maintext
  1938     13B1                     __pmaintext:	
  1939 ;;
  1940 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1941 ;;
  1942 ;; *************** function _main *****************
  1943 ;; Defined at:
  1944 ;;		line 110 in file "main.c"
  1945 ;; Parameters:    Size  Location     Type
  1946 ;;		None
  1947 ;; Auto vars:     Size  Location     Type
  1948 ;;		None
  1949 ;; Return value:  Size  Location     Type
  1950 ;;                  1    wreg      void 
  1951 ;; Registers used:
  1952 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1953 ;; Tracked objects:
  1954 ;;		On entry : B00/0
  1955 ;;		On exit  : 0/0
  1956 ;;		Unchanged: 0/0
  1957 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1958 ;;      Params:         0       0       0       0       0
  1959 ;;      Locals:         0       0       0       0       0
  1960 ;;      Temps:          0       0       0       0       0
  1961 ;;      Totals:         0       0       0       0       0
  1962 ;;Total ram usage:        0 bytes
  1963 ;; Hardware stack levels required when called: 7
  1964 ;; This function calls:
  1965 ;;		_Timer1_start
  1966 ;;		_inicializar_sistema
  1967 ;;		_manejar_estado_alarma
  1968 ;;		_manejar_estado_alerta
  1969 ;;		_manejar_estado_bloqueado
  1970 ;;		_manejar_estado_init
  1971 ;;		_manejar_estado_monitoreo_ambiental
  1972 ;;		_manejar_estado_monitoreo_eventos
  1973 ;; This function is called by:
  1974 ;;		Startup code after reset
  1975 ;; This function uses a non-reentrant model
  1976 ;;
  1977                           
  1978     13B1                     _main:	
  1979                           ;psect for function _main
  1980                           
  1981                           
  1982                           ;main.c: 111: inicializar_sistema();
  1983                           
  1984                           ;incstack = 0
  1985                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1986     13B1  160A  158A  274A  160A  118A  	fcall	_inicializar_sistema
  1987                           
  1988                           ;main.c: 112: Timer1_start();
  1989     13B6  160A  158A  2731  160A  118A  	fcall	_Timer1_start
  1990     13BB  2BE1               	goto	l5166
  1991     13BC                     l5150:
  1992                           
  1993                           ;main.c: 116: manejar_estado_init();
  1994     13BC  160A  118A  2150  160A  118A  	fcall	_manejar_estado_init
  1995                           
  1996                           ;main.c: 117: break;
  1997     13C1  2BE1               	goto	l5166
  1998     13C2                     l5152:
  1999                           
  2000                           ;main.c: 119: manejar_estado_monitoreo_ambiental();
  2001     13C2  160A  118A  2338  160A  118A  	fcall	_manejar_estado_monitoreo_ambiental
  2002                           
  2003                           ;main.c: 120: break;
  2004     13C7  2BE1               	goto	l5166
  2005     13C8                     l5154:
  2006                           
  2007                           ;main.c: 122: manejar_estado_monitoreo_eventos();
  2008     13C8  160A  158A  2726  160A  118A  	fcall	_manejar_estado_monitoreo_eventos
  2009                           
  2010                           ;main.c: 123: break;
  2011     13CD  2BE1               	goto	l5166
  2012     13CE                     l5156:
  2013                           
  2014                           ;main.c: 125: manejar_estado_alarma();
  2015     13CE  160A  158A  27CD  160A  118A  	fcall	_manejar_estado_alarma
  2016                           
  2017                           ;main.c: 126: break;
  2018     13D3  2BE1               	goto	l5166
  2019     13D4                     l5158:
  2020                           
  2021                           ;main.c: 128: manejar_estado_alerta();
  2022     13D4  160A  158A  27A6  160A  118A  	fcall	_manejar_estado_alerta
  2023                           
  2024                           ;main.c: 129: break;
  2025     13D9  2BE1               	goto	l5166
  2026     13DA                     l5160:
  2027                           
  2028                           ;main.c: 131: manejar_estado_bloqueado();
  2029     13DA  160A  158A  271C  160A  118A  	fcall	_manejar_estado_bloqueado
  2030                           
  2031                           ;main.c: 132: break;
  2032     13DF  2BE1               	goto	l5166
  2033     13E0                     l5162:
  2034                           
  2035                           ;main.c: 134: estado_actual = INIT;
  2036     13E0  01FA               	clrf	_estado_actual
  2037     13E1                     l5166:	
  2038                           ;main.c: 135: break;
  2039                           
  2040     13E1  087A               	movf	_estado_actual,w
  2041                           
  2042                           ; Switch size 1, requested type "simple"
  2043                           ; Number of cases is 6, Range of values is 0 to 5
  2044                           ; switch strategies available:
  2045                           ; Name         Instructions Cycles
  2046                           ; simple_byte           19    10 (average)
  2047                           ; direct_byte           26     8 (fixed)
  2048                           ; jumptable            260     6 (fixed)
  2049                           ;	Chosen strategy is simple_byte
  2050     13E2  3A00               	xorlw	0	; case 0
  2051     13E3  1903               	skipnz
  2052     13E4  2BBC               	goto	l5150
  2053     13E5  3A01               	xorlw	1	; case 1
  2054     13E6  1903               	skipnz
  2055     13E7  2BDA               	goto	l5160
  2056     13E8  3A03               	xorlw	3	; case 2
  2057     13E9  1903               	skipnz
  2058     13EA  2BC2               	goto	l5152
  2059     13EB  3A01               	xorlw	1	; case 3
  2060     13EC  1903               	skipnz
  2061     13ED  2BC8               	goto	l5154
  2062     13EE  3A07               	xorlw	7	; case 4
  2063     13EF  1903               	skipnz
  2064     13F0  2BCE               	goto	l5156
  2065     13F1  3A01               	xorlw	1	; case 5
  2066     13F2  1903               	skipnz
  2067     13F3  2BD4               	goto	l5158
  2068     13F4  2BE0               	goto	l5162
  2069     13F5  120A  118A  280E   	ljmp	start
  2070     13F8                     __end_of_main:
  2071                           
  2072                           	psect	text1
  2073     1F26                     __ptext1:	
  2074 ;; *************** function _manejar_estado_monitoreo_eventos *****************
  2075 ;; Defined at:
  2076 ;;		line 83 in file "main.c"
  2077 ;; Parameters:    Size  Location     Type
  2078 ;;		None
  2079 ;; Auto vars:     Size  Location     Type
  2080 ;;		None
  2081 ;; Return value:  Size  Location     Type
  2082 ;;                  1    wreg      void 
  2083 ;; Registers used:
  2084 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2085 ;; Tracked objects:
  2086 ;;		On entry : 0/0
  2087 ;;		On exit  : 300/0
  2088 ;;		Unchanged: 0/0
  2089 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2090 ;;      Params:         0       0       0       0       0
  2091 ;;      Locals:         0       0       0       0       0
  2092 ;;      Temps:          0       0       0       0       0
  2093 ;;      Totals:         0       0       0       0       0
  2094 ;;Total ram usage:        0 bytes
  2095 ;; Hardware stack levels used: 1
  2096 ;; Hardware stack levels required when called: 5
  2097 ;; This function calls:
  2098 ;;		_inicializar
  2099 ;;		_puertas
  2100 ;; This function is called by:
  2101 ;;		_main
  2102 ;; This function uses a non-reentrant model
  2103 ;;
  2104                           
  2105     1F26                     _manejar_estado_monitoreo_eventos:	
  2106                           ;psect for function _manejar_estado_monitoreo_eventos
  2107                           
  2108                           
  2109                           ;main.c: 84: puertas();
  2110                           
  2111                           ;incstack = 0
  2112                           ; Regs used in _manejar_estado_monitoreo_eventos: [wreg-fsr0h+status,2+status,0+btemp+1+
      +                          pclath+cstack]
  2113     1F26  160A  118A  2651  160A  158A  	fcall	_puertas
  2114                           
  2115                           ;main.c: 86: estado_actual = ALERTA;
  2116                           
  2117                           ;main.c: 85: if (puerta1 == 0 || puerta2 == 0) {
  2118     1F2B  3005               	movlw	5
  2119     1F2C  00FA               	movwf	_estado_actual
  2120                           
  2121                           ;main.c: 87: inicializar();
  2122     1F2D  120A  158A  2000   	fcall	_inicializar
  2123                           
  2124                           ;main.c: 88: } else if (flag_2s) {
  2125     1F30  0008               	return
  2126     1F31                     __end_of_manejar_estado_monitoreo_eventos:
  2127                           
  2128                           	psect	text2
  2129     1651                     __ptext2:	
  2130 ;; *************** function _puertas *****************
  2131 ;; Defined at:
  2132 ;;		line 41 in file "sensores.c"
  2133 ;; Parameters:    Size  Location     Type
  2134 ;;		None
  2135 ;; Auto vars:     Size  Location     Type
  2136 ;;  puerta2         2   10[BANK0 ] int 
  2137 ;;  puerta1         2    8[BANK0 ] int 
  2138 ;; Return value:  Size  Location     Type
  2139 ;;                  1    wreg      void 
  2140 ;; Registers used:
  2141 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2142 ;; Tracked objects:
  2143 ;;		On entry : 0/0
  2144 ;;		On exit  : 0/0
  2145 ;;		Unchanged: 0/0
  2146 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2147 ;;      Params:         0       0       0       0       0
  2148 ;;      Locals:         0       4       0       0       0
  2149 ;;      Temps:          0       3       0       0       0
  2150 ;;      Totals:         0       7       0       0       0
  2151 ;;Total ram usage:        7 bytes
  2152 ;; Hardware stack levels used: 1
  2153 ;; Hardware stack levels required when called: 4
  2154 ;; This function calls:
  2155 ;;		_LCD_Clear
  2156 ;;		_LCD_String_xy
  2157 ;; This function is called by:
  2158 ;;		_manejar_estado_monitoreo_eventos
  2159 ;; This function uses a non-reentrant model
  2160 ;;
  2161                           
  2162     1651                     _puertas:	
  2163                           ;psect for function _puertas
  2164                           
  2165                           
  2166                           ;sensores.c: 42: TRISA2 = 1;
  2167                           
  2168                           ;incstack = 0
  2169                           ; Regs used in _puertas: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2170     1651  1683               	bsf	3,5	;RP0=1, select bank1
  2171     1652  1303               	bcf	3,6	;RP1=0, select bank1
  2172     1653  1505               	bsf	5,2	;volatile
  2173                           
  2174                           ;sensores.c: 43: TRISA3 = 1;
  2175     1654  1585               	bsf	5,3	;volatile
  2176                           
  2177                           ;sensores.c: 44: ANSEL = 0x03;
  2178     1655  3003               	movlw	3
  2179     1656  1703               	bsf	3,6	;RP1=1, select bank3
  2180     1657  0088               	movwf	8	;volatile
  2181                           
  2182                           ;sensores.c: 45: int puerta1 = RA2;
  2183     1658  1003               	clrc
  2184     1659  1283               	bcf	3,5	;RP0=0, select bank0
  2185     165A  1303               	bcf	3,6	;RP1=0, select bank0
  2186     165B  1905               	btfsc	5,2	;volatile
  2187     165C  1403               	setc
  2188     165D  3000               	movlw	0
  2189     165E  1803               	skipnc
  2190     165F  3001               	movlw	1
  2191     1660  00A5               	movwf	??_puertas
  2192     1661  01A6               	clrf	??_puertas+1
  2193     1662  0825               	movf	??_puertas,w
  2194     1663  00A8               	movwf	puertas@puerta1
  2195     1664  0826               	movf	??_puertas+1,w
  2196     1665  00A9               	movwf	puertas@puerta1+1
  2197                           
  2198                           ;sensores.c: 46: int puerta2 = RA3;
  2199     1666  1003               	clrc
  2200     1667  1985               	btfsc	5,3	;volatile
  2201     1668  1403               	setc
  2202     1669  3000               	movlw	0
  2203     166A  1803               	skipnc
  2204     166B  3001               	movlw	1
  2205     166C  00A5               	movwf	??_puertas
  2206     166D  01A6               	clrf	??_puertas+1
  2207     166E  0825               	movf	??_puertas,w
  2208     166F  00AA               	movwf	puertas@puerta2
  2209     1670  0826               	movf	??_puertas+1,w
  2210     1671  00AB               	movwf	puertas@puerta2+1
  2211                           
  2212                           ;sensores.c: 48: LCD_String_xy(0, 0, "Puertas:");
  2213     1672  01A0               	clrf	LCD_String_xy@pos
  2214     1673  3032               	movlw	low (STR_11| (0+32768))
  2215     1674  00A1               	movwf	LCD_String_xy@msg
  2216     1675  3091               	movlw	high (STR_11| (0+32768))
  2217     1676  00A2               	movwf	LCD_String_xy@msg+1
  2218     1677  3000               	movlw	0
  2219     1678  160A  158A  27E3  160A  118A  	fcall	_LCD_String_xy
  2220                           
  2221                           ;sensores.c: 50: if (puerta1 == 1 && puerta2 == 1) {
  2222     167D  0328               	decf	puertas@puerta1,w
  2223     167E  0429               	iorwf	puertas@puerta1+1,w
  2224     167F  1D03               	btfss	3,2
  2225     1680  2E8A               	goto	l5066
  2226     1681  032A               	decf	puertas@puerta2,w
  2227     1682  042B               	iorwf	puertas@puerta2+1,w
  2228     1683  1D03               	btfss	3,2
  2229     1684  2E8A               	goto	l5066
  2230                           
  2231                           ;sensores.c: 51: LCD_String_xy(1, 0, "Ambas Cerradas");
  2232     1685  01A0               	clrf	LCD_String_xy@pos
  2233     1686  30C7               	movlw	low (STR_12| (0+32768))
  2234     1687  00A1               	movwf	LCD_String_xy@msg
  2235     1688  3090               	movlw	high (STR_12| (0+32768))
  2236     1689  2EA8               	goto	L1
  2237     168A                     l5066:	
  2238                           ;sensores.c: 52: } else if (puerta1 == 1 && puerta2 == 0) {
  2239                           
  2240     168A  0328               	decf	puertas@puerta1,w
  2241     168B  0429               	iorwf	puertas@puerta1+1,w
  2242     168C  1D03               	btfss	3,2
  2243     168D  2E97               	goto	l5072
  2244     168E  082A               	movf	puertas@puerta2,w
  2245     168F  042B               	iorwf	puertas@puerta2+1,w
  2246     1690  1D03               	btfss	3,2
  2247     1691  2E97               	goto	l5072
  2248                           
  2249                           ;sensores.c: 53: LCD_String_xy(1, 0, "P1 Ce ,P2 Ab");
  2250     1692  01A0               	clrf	LCD_String_xy@pos
  2251     1693  30F4               	movlw	low (STR_13| (0+32768))
  2252     1694  00A1               	movwf	LCD_String_xy@msg
  2253     1695  3090               	movlw	high (STR_13| (0+32768))
  2254     1696  2EA8               	goto	L1
  2255     1697                     l5072:	
  2256                           ;sensores.c: 54: } else if (puerta1 == 0 && puerta2 == 1) {
  2257                           
  2258     1697  0828               	movf	puertas@puerta1,w
  2259     1698  0429               	iorwf	puertas@puerta1+1,w
  2260     1699  1D03               	btfss	3,2
  2261     169A  2EA4               	goto	l5078
  2262     169B  032A               	decf	puertas@puerta2,w
  2263     169C  042B               	iorwf	puertas@puerta2+1,w
  2264     169D  1D03               	btfss	3,2
  2265     169E  2EA4               	goto	l5078
  2266                           
  2267                           ;sensores.c: 55: LCD_String_xy(1, 0, "P1 Ab, P2 Ce");
  2268     169F  01A0               	clrf	LCD_String_xy@pos
  2269     16A0  300E               	movlw	low (STR_14| (0+32768))
  2270     16A1  00A1               	movwf	LCD_String_xy@msg
  2271     16A2  3091               	movlw	high (STR_14| (0+32768))
  2272     16A3  2EA8               	goto	L1
  2273     16A4                     l5078:	
  2274                           ;sensores.c: 56: } else {
  2275                           
  2276                           
  2277                           ;sensores.c: 57: LCD_String_xy(1, 0, "Ambas Abiertas");
  2278     16A4  01A0               	clrf	LCD_String_xy@pos
  2279     16A5  30D6               	movlw	low (STR_15| (0+32768))
  2280     16A6  00A1               	movwf	LCD_String_xy@msg
  2281     16A7  3090               	movlw	high (STR_15| (0+32768))
  2282     16A8                     L1:
  2283     16A8  00A2               	movwf	LCD_String_xy@msg+1
  2284     16A9  3001               	movlw	1
  2285     16AA  160A  158A  27E3  160A  118A  	fcall	_LCD_String_xy
  2286                           
  2287                           ;sensores.c: 58: };sensores.c: 60: _delay((unsigned long)((2000)*(8000000/4000.0)));
  2288     16AF  3015               	movlw	21
  2289     16B0  1283               	bcf	3,5	;RP0=0, select bank0
  2290     16B1  1303               	bcf	3,6	;RP1=0, select bank0
  2291     16B2  00A7               	movwf	??_puertas+2
  2292     16B3  304B               	movlw	75
  2293     16B4  00A6               	movwf	??_puertas+1
  2294     16B5  30BD               	movlw	189
  2295     16B6  00A5               	movwf	??_puertas
  2296     16B7                     u7197:
  2297     16B7  0BA5               	decfsz	??_puertas,f
  2298     16B8  2EB7               	goto	u7197
  2299     16B9  0BA6               	decfsz	??_puertas+1,f
  2300     16BA  2EB7               	goto	u7197
  2301     16BB  0BA7               	decfsz	??_puertas+2,f
  2302     16BC  2EB7               	goto	u7197
  2303     16BD  2EBE               	nop2
  2304                           
  2305                           ;sensores.c: 61: LCD_Clear();
  2306     16BE  160A  158A  2775   	fcall	_LCD_Clear
  2307     16C1  0008               	return
  2308     16C2                     __end_of_puertas:
  2309                           
  2310                           	psect	text3
  2311     1338                     __ptext3:	
  2312 ;; *************** function _manejar_estado_monitoreo_ambiental *****************
  2313 ;; Defined at:
  2314 ;;		line 72 in file "main.c"
  2315 ;; Parameters:    Size  Location     Type
  2316 ;;		None
  2317 ;; Auto vars:     Size  Location     Type
  2318 ;;		None
  2319 ;; Return value:  Size  Location     Type
  2320 ;;                  1    wreg      void 
  2321 ;; Registers used:
  2322 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2323 ;; Tracked objects:
  2324 ;;		On entry : 0/0
  2325 ;;		On exit  : 0/0
  2326 ;;		Unchanged: 0/0
  2327 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2328 ;;      Params:         0       0       0       0       0
  2329 ;;      Locals:         0       0       0       0       0
  2330 ;;      Temps:          0       0       0       0       0
  2331 ;;      Totals:         0       0       0       0       0
  2332 ;;Total ram usage:        0 bytes
  2333 ;; Hardware stack levels used: 1
  2334 ;; Hardware stack levels required when called: 6
  2335 ;; This function calls:
  2336 ;;		___ftge
  2337 ;;		_ambiental
  2338 ;;		_inicializar
  2339 ;; This function is called by:
  2340 ;;		_main
  2341 ;; This function uses a non-reentrant model
  2342 ;;
  2343                           
  2344     1338                     _manejar_estado_monitoreo_ambiental:	
  2345                           ;psect for function _manejar_estado_monitoreo_ambiental
  2346                           
  2347                           
  2348                           ;main.c: 73: ambiental();
  2349                           
  2350                           ;incstack = 0
  2351                           ; Regs used in _manejar_estado_monitoreo_ambiental: [wreg-fsr0h+status,2+status,0+btemp+
      +                          1+pclath+cstack]
  2352     1338  120A  158A  2136  160A  118A  	fcall	_ambiental
  2353                           
  2354                           ;main.c: 74: if (celsius > 25 || luz > 700) {
  2355     133D  3000               	movlw	0
  2356     133E  1283               	bcf	3,5	;RP0=0, select bank0
  2357     133F  1303               	bcf	3,6	;RP1=0, select bank0
  2358     1340  00A0               	movwf	___ftge@ff1
  2359     1341  30C8               	movlw	200
  2360     1342  00A1               	movwf	___ftge@ff1+1
  2361     1343  3041               	movlw	65
  2362     1344  00A2               	movwf	___ftge@ff1+2
  2363     1345  1683               	bsf	3,5	;RP0=1, select bank1
  2364     1346  0820               	movf	_celsius^(0+128),w
  2365     1347  1283               	bcf	3,5	;RP0=0, select bank0
  2366     1348  00A3               	movwf	___ftge@ff2
  2367     1349  1683               	bsf	3,5	;RP0=1, select bank1
  2368     134A  0821               	movf	(_celsius+1)^(0+128),w
  2369     134B  1283               	bcf	3,5	;RP0=0, select bank0
  2370     134C  00A4               	movwf	___ftge@ff2+1
  2371     134D  1683               	bsf	3,5	;RP0=1, select bank1
  2372     134E  0822               	movf	(_celsius+2)^(0+128),w
  2373     134F  1283               	bcf	3,5	;RP0=0, select bank0
  2374     1350  00A5               	movwf	___ftge@ff2+2
  2375     1351  160A  118A  226C  160A  118A  	fcall	___ftge
  2376     1356  1C03               	btfss	3,0
  2377     1357  2B64               	goto	l207
  2378     1358  1683               	bsf	3,5	;RP0=1, select bank1
  2379     1359  082C               	movf	(_luz+1)^(0+128),w
  2380     135A  3A80               	xorlw	128
  2381     135B  00FF               	movwf	127
  2382     135C  3082               	movlw	130
  2383     135D  027F               	subwf	127,w
  2384     135E  1D03               	skipz
  2385     135F  2B62               	goto	u7155
  2386     1360  30BD               	movlw	189
  2387     1361  022B               	subwf	_luz^(0+128),w
  2388     1362                     u7155:
  2389     1362  1C03               	skipc
  2390     1363  2B6A               	goto	l5116
  2391     1364                     l207:
  2392                           
  2393                           ;main.c: 75: estado_actual = ALARMA;
  2394     1364  3004               	movlw	4
  2395     1365                     L2:
  2396     1365  00FA               	movwf	_estado_actual
  2397                           
  2398                           ;main.c: 76: inicializar();
  2399     1366  120A  158A  2000   	fcall	_inicializar
  2400                           
  2401                           ;main.c: 77: } else if (flag_3s) {
  2402     1369  0008               	return
  2403     136A                     l5116:
  2404     136A  0878               	movf	_flag_3s,w
  2405     136B  1903               	btfsc	3,2
  2406     136C  0008               	return
  2407                           
  2408                           ;main.c: 78: estado_actual = MONITOREO_EVENTOS;
  2409     136D  3003               	movlw	3
  2410     136E  2B65               	goto	L2
  2411     136F                     __end_of_manejar_estado_monitoreo_ambiental:
  2412                           
  2413                           	psect	text4
  2414     0936                     __ptext4:	
  2415 ;; *************** function _ambiental *****************
  2416 ;; Defined at:
  2417 ;;		line 13 in file "sensores.c"
  2418 ;; Parameters:    Size  Location     Type
  2419 ;;		None
  2420 ;; Auto vars:     Size  Location     Type
  2421 ;;  value_adc       2   24[BANK1 ] int 
  2422 ;;  temperatura     2   22[BANK1 ] unsigned int 
  2423 ;; Return value:  Size  Location     Type
  2424 ;;                  1    wreg      void 
  2425 ;; Registers used:
  2426 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2427 ;; Tracked objects:
  2428 ;;		On entry : 0/0
  2429 ;;		On exit  : 0/0
  2430 ;;		Unchanged: 0/0
  2431 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2432 ;;      Params:         0       0       0       0       0
  2433 ;;      Locals:         0       0       4       0       0
  2434 ;;      Temps:          0       3       0       0       0
  2435 ;;      Totals:         0       3       4       0       0
  2436 ;;Total ram usage:        7 bytes
  2437 ;; Hardware stack levels used: 1
  2438 ;; Hardware stack levels required when called: 5
  2439 ;; This function calls:
  2440 ;;		_LCD_Clear
  2441 ;;		_LCD_Command
  2442 ;;		_LCD_Init
  2443 ;;		_LCD_String
  2444 ;;		_LCD_String_xy
  2445 ;;		___awtoft
  2446 ;;		___ftmul
  2447 ;;		_adc_int
  2448 ;;		_adc_read
  2449 ;;		_sprintf
  2450 ;; This function is called by:
  2451 ;;		_manejar_estado_monitoreo_ambiental
  2452 ;; This function uses a non-reentrant model
  2453 ;;
  2454                           
  2455     0936                     _ambiental:	
  2456                           ;psect for function _ambiental
  2457                           
  2458                           
  2459                           ;sensores.c: 14: OSCCON = 0x71;
  2460                           
  2461                           ;incstack = 0
  2462                           ; Regs used in _ambiental: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2463     0936  3071               	movlw	113
  2464     0937  1683               	bsf	3,5	;RP0=1, select bank1
  2465     0938  1303               	bcf	3,6	;RP1=0, select bank1
  2466     0939  008F               	movwf	15	;volatile
  2467                           
  2468                           ;sensores.c: 15: LCD_Init();
  2469     093A  120A  118A  27D9  120A  158A  	fcall	_LCD_Init
  2470                           
  2471                           ;sensores.c: 16: LCD_String_xy(0,0,"MONITOREO AMBIENTAL");
  2472     093F  1283               	bcf	3,5	;RP0=0, select bank0
  2473     0940  1303               	bcf	3,6	;RP1=0, select bank0
  2474     0941  01A0               	clrf	LCD_String_xy@pos
  2475     0942  3090               	movlw	low (STR_8| (0+32768))
  2476     0943  00A1               	movwf	LCD_String_xy@msg
  2477     0944  3090               	movlw	high (STR_8| (0+32768))
  2478     0945  00A2               	movwf	LCD_String_xy@msg+1
  2479     0946  3000               	movlw	0
  2480     0947  160A  158A  27E3  120A  158A  	fcall	_LCD_String_xy
  2481                           
  2482                           ;sensores.c: 17: _delay((unsigned long)((2000)*(8000000/4000.0)));
  2483     094C  3015               	movlw	21
  2484     094D  1283               	bcf	3,5	;RP0=0, select bank0
  2485     094E  1303               	bcf	3,6	;RP1=0, select bank0
  2486     094F  00E8               	movwf	??_ambiental+2
  2487     0950  304B               	movlw	75
  2488     0951  00E7               	movwf	??_ambiental+1
  2489     0952  30BD               	movlw	189
  2490     0953  00E6               	movwf	??_ambiental
  2491     0954                     u7207:
  2492     0954  0BE6               	decfsz	??_ambiental,f
  2493     0955  2954               	goto	u7207
  2494     0956  0BE7               	decfsz	??_ambiental+1,f
  2495     0957  2954               	goto	u7207
  2496     0958  0BE8               	decfsz	??_ambiental+2,f
  2497     0959  2954               	goto	u7207
  2498     095A  295B               	nop2
  2499                           
  2500                           ;sensores.c: 18: LCD_Clear();
  2501     095B  160A  158A  2775  120A  158A  	fcall	_LCD_Clear
  2502                           
  2503                           ;sensores.c: 19: TRISA0 = 1;
  2504     0960  1683               	bsf	3,5	;RP0=1, select bank1
  2505     0961  1303               	bcf	3,6	;RP1=0, select bank1
  2506     0962  1405               	bsf	5,0	;volatile
  2507                           
  2508                           ;sensores.c: 20: TRISA1 = 1;
  2509     0963  1485               	bsf	5,1	;volatile
  2510                           
  2511                           ;sensores.c: 21: ANSEL = 0x03;
  2512     0964  3003               	movlw	3
  2513     0965  1703               	bsf	3,6	;RP1=1, select bank3
  2514     0966  0088               	movwf	8	;volatile
  2515                           
  2516                           ;sensores.c: 22: ANSELH= 0x00;
  2517     0967  0189               	clrf	9	;volatile
  2518                           
  2519                           ;sensores.c: 23: adc_int();
  2520     0968  160A  158A  273D  120A  158A  	fcall	_adc_int
  2521                           
  2522                           ;sensores.c: 25: LCD_String_xy (0,0,"Sensor");
  2523     096D  1283               	bcf	3,5	;RP0=0, select bank0
  2524     096E  01A0               	clrf	LCD_String_xy@pos
  2525     096F  303B               	movlw	low (STR_9| (0+32768))
  2526     0970  00A1               	movwf	LCD_String_xy@msg
  2527     0971  3091               	movlw	high (STR_9| (0+32768))
  2528     0972  00A2               	movwf	LCD_String_xy@msg+1
  2529     0973  3000               	movlw	0
  2530     0974  160A  158A  27E3  120A  158A  	fcall	_LCD_String_xy
  2531                           
  2532                           ;sensores.c: 26: LCD_Command (0xC0);
  2533     0979  30C0               	movlw	192
  2534     097A  160A  118A  2302  120A  158A  	fcall	_LCD_Command
  2535                           
  2536                           ;sensores.c: 27: unsigned int temperatura = adc_read(0);
  2537     097F  3000               	movlw	0
  2538     0980  00F3               	movwf	adc_read@channel
  2539     0981  00F4               	movwf	adc_read@channel+1
  2540     0982  160A  118A  22CD  120A  158A  	fcall	_adc_read
  2541     0987  0874               	movf	?_adc_read+1,w
  2542     0988  1683               	bsf	3,5	;RP0=1, select bank1
  2543     0989  00E4               	movwf	(ambiental@temperatura+1)^(0+128)
  2544     098A  0873               	movf	?_adc_read,w
  2545     098B  00E3               	movwf	ambiental@temperatura^(0+128)
  2546                           
  2547                           ;sensores.c: 28: luz = adc_read(1);
  2548     098C  3001               	movlw	1
  2549     098D  00F3               	movwf	adc_read@channel
  2550     098E  3000               	movlw	0
  2551     098F  00F4               	movwf	adc_read@channel+1
  2552     0990  160A  118A  22CD  120A  158A  	fcall	_adc_read
  2553     0995  0874               	movf	?_adc_read+1,w
  2554     0996  1683               	bsf	3,5	;RP0=1, select bank1
  2555     0997  00AC               	movwf	(_luz+1)^(0+128)
  2556     0998  0873               	movf	?_adc_read,w
  2557     0999  00AB               	movwf	_luz^(0+128)
  2558                           
  2559                           ;sensores.c: 32: int value_adc = 1023-(int)temperatura;
  2560     099A  30FF               	movlw	255
  2561     099B  1283               	bcf	3,5	;RP0=0, select bank0
  2562     099C  00E6               	movwf	??_ambiental
  2563     099D  3003               	movlw	3
  2564     099E  00E7               	movwf	??_ambiental+1
  2565     099F  1683               	bsf	3,5	;RP0=1, select bank1
  2566     09A0  0863               	movf	ambiental@temperatura^(0+128),w
  2567     09A1  1283               	bcf	3,5	;RP0=0, select bank0
  2568     09A2  0266               	subwf	??_ambiental,w
  2569     09A3  1683               	bsf	3,5	;RP0=1, select bank1
  2570     09A4  00E5               	movwf	ambiental@value_adc^(0+128)
  2571     09A5  0864               	movf	(ambiental@temperatura+1)^(0+128),w
  2572     09A6  1C03               	skipc
  2573     09A7  0A64               	incf	(ambiental@temperatura+1)^(0+128),w
  2574     09A8  1283               	bcf	3,5	;RP0=0, select bank0
  2575     09A9  0267               	subwf	??_ambiental+1,w
  2576     09AA  1683               	bsf	3,5	;RP0=1, select bank1
  2577     09AB  00E6               	movwf	(ambiental@value_adc+1)^(0+128)
  2578                           
  2579                           ;sensores.c: 33: celsius = (float)(value_adc * 0.04058);
  2580     09AC  3037               	movlw	55
  2581     09AD  1283               	bcf	3,5	;RP0=0, select bank0
  2582     09AE  00AD               	movwf	___ftmul@f1
  2583     09AF  3026               	movlw	38
  2584     09B0  00AE               	movwf	___ftmul@f1+1
  2585     09B1  303D               	movlw	61
  2586     09B2  00AF               	movwf	___ftmul@f1+2
  2587     09B3  1683               	bsf	3,5	;RP0=1, select bank1
  2588     09B4  0866               	movf	(ambiental@value_adc+1)^(0+128),w
  2589     09B5  1283               	bcf	3,5	;RP0=0, select bank0
  2590     09B6  00A4               	movwf	___awtoft@c+1
  2591     09B7  1683               	bsf	3,5	;RP0=1, select bank1
  2592     09B8  0865               	movf	ambiental@value_adc^(0+128),w
  2593     09B9  1283               	bcf	3,5	;RP0=0, select bank0
  2594     09BA  00A3               	movwf	___awtoft@c
  2595     09BB  160A  118A  216A  120A  158A  	fcall	___awtoft
  2596     09C0  0823               	movf	?___awtoft,w
  2597     09C1  00B0               	movwf	___ftmul@f2
  2598     09C2  0824               	movf	?___awtoft+1,w
  2599     09C3  00B1               	movwf	___ftmul@f2+1
  2600     09C4  0825               	movf	?___awtoft+2,w
  2601     09C5  00B2               	movwf	___ftmul@f2+2
  2602     09C6  160A  118A  2761  120A  158A  	fcall	___ftmul
  2603     09CB  082D               	movf	?___ftmul,w
  2604     09CC  1683               	bsf	3,5	;RP0=1, select bank1
  2605     09CD  00A0               	movwf	_celsius^(0+128)
  2606     09CE  1283               	bcf	3,5	;RP0=0, select bank0
  2607     09CF  082E               	movf	?___ftmul+1,w
  2608     09D0  1683               	bsf	3,5	;RP0=1, select bank1
  2609     09D1  00A1               	movwf	(_celsius+1)^(0+128)
  2610     09D2  1283               	bcf	3,5	;RP0=0, select bank0
  2611     09D3  082F               	movf	?___ftmul+2,w
  2612     09D4  1683               	bsf	3,5	;RP0=1, select bank1
  2613     09D5  00A2               	movwf	(_celsius+2)^(0+128)
  2614                           
  2615                           ;sensores.c: 34: sprintf(StringTemperature, "T: %.2f L:%d", celsius, luz);
  2616     09D6  30B5               	movlw	(low (_StringTemperature| 0))& (0+255)
  2617     09D7  1283               	bcf	3,5	;RP0=0, select bank0
  2618     09D8  00D8               	movwf	sprintf@sp
  2619     09D9  3001               	movlw	low (STR_10| (0+32768))
  2620     09DA  00D9               	movwf	sprintf@f
  2621     09DB  3091               	movlw	high (STR_10| (0+32768))
  2622     09DC  00DA               	movwf	sprintf@f+1
  2623     09DD  1683               	bsf	3,5	;RP0=1, select bank1
  2624     09DE  0820               	movf	_celsius^(0+128),w
  2625     09DF  1283               	bcf	3,5	;RP0=0, select bank0
  2626     09E0  00DB               	movwf	?_sprintf+3
  2627     09E1  1683               	bsf	3,5	;RP0=1, select bank1
  2628     09E2  0821               	movf	(_celsius+1)^(0+128),w
  2629     09E3  1283               	bcf	3,5	;RP0=0, select bank0
  2630     09E4  00DC               	movwf	?_sprintf+4
  2631     09E5  1683               	bsf	3,5	;RP0=1, select bank1
  2632     09E6  0822               	movf	(_celsius+2)^(0+128),w
  2633     09E7  1283               	bcf	3,5	;RP0=0, select bank0
  2634     09E8  00DD               	movwf	?_sprintf+5
  2635     09E9  1683               	bsf	3,5	;RP0=1, select bank1
  2636     09EA  082C               	movf	(_luz+1)^(0+128),w
  2637     09EB  1283               	bcf	3,5	;RP0=0, select bank0
  2638     09EC  00DF               	movwf	?_sprintf+7
  2639     09ED  1683               	bsf	3,5	;RP0=1, select bank1
  2640     09EE  082B               	movf	_luz^(0+128),w
  2641     09EF  1283               	bcf	3,5	;RP0=0, select bank0
  2642     09F0  00DE               	movwf	?_sprintf+6
  2643     09F1  120A  118A  2036  120A  158A  	fcall	_sprintf
  2644                           
  2645                           ;sensores.c: 36: LCD_String(StringTemperature);
  2646     09F6  30B5               	movlw	(low (_StringTemperature| 0))& (0+255)
  2647     09F7  00F6               	movwf	LCD_String@msg
  2648     09F8  3000               	movlw	0
  2649     09F9  00F7               	movwf	LCD_String@msg+1
  2650     09FA  160A  118A  2200  120A  158A  	fcall	_LCD_String
  2651                           
  2652                           ;sensores.c: 38: _delay((unsigned long)((2000)*(8000000/4000.0)));
  2653     09FF  3015               	movlw	21
  2654     0A00  1283               	bcf	3,5	;RP0=0, select bank0
  2655     0A01  1303               	bcf	3,6	;RP1=0, select bank0
  2656     0A02  00E8               	movwf	??_ambiental+2
  2657     0A03  304B               	movlw	75
  2658     0A04  00E7               	movwf	??_ambiental+1
  2659     0A05  30BD               	movlw	189
  2660     0A06  00E6               	movwf	??_ambiental
  2661     0A07                     u7217:
  2662     0A07  0BE6               	decfsz	??_ambiental,f
  2663     0A08  2A07               	goto	u7217
  2664     0A09  0BE7               	decfsz	??_ambiental+1,f
  2665     0A0A  2A07               	goto	u7217
  2666     0A0B  0BE8               	decfsz	??_ambiental+2,f
  2667     0A0C  2A07               	goto	u7217
  2668     0A0D  2A0E               	nop2
  2669                           
  2670                           ;sensores.c: 39: LCD_Clear();
  2671     0A0E  160A  158A  2775   	fcall	_LCD_Clear
  2672     0A11  0008               	return
  2673     0A12                     __end_of_ambiental:
  2674                           
  2675                           	psect	text5
  2676     0036                     __ptext5:	
  2677 ;; *************** function _sprintf *****************
  2678 ;; Defined at:
  2679 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c90\common\doprnt.c"
  2680 ;; Parameters:    Size  Location     Type
  2681 ;;  sp              1   56[BANK0 ] PTR unsigned char 
  2682 ;;		 -> StringTemperature(16), 
  2683 ;;  f               2   57[BANK0 ] PTR const unsigned char 
  2684 ;;		 -> STR_10(13), 
  2685 ;; Auto vars:     Size  Location     Type
  2686 ;;  val             4   12[BANK1 ] unsigned long 
  2687 ;;  tmpval          4    8[BANK1 ] struct .
  2688 ;;  fval            3   18[BANK1 ] struct .
  2689 ;;  prec            2   16[BANK1 ] int 
  2690 ;;  eexp            2    6[BANK1 ] int 
  2691 ;;  flag            2    4[BANK1 ] unsigned short 
  2692 ;;  cp              2    0        PTR const unsigned char 
  2693 ;;  len             2    0        unsigned int 
  2694 ;;  width           2    0        int 
  2695 ;;  c               1   21[BANK1 ] unsigned char 
  2696 ;;  ap              1    3[BANK1 ] PTR void [1]
  2697 ;;		 -> ?_sprintf(2), 
  2698 ;;  d               1    0        unsigned char 
  2699 ;; Return value:  Size  Location     Type
  2700 ;;                  2   56[BANK0 ] int 
  2701 ;; Registers used:
  2702 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2703 ;; Tracked objects:
  2704 ;;		On entry : 300/0
  2705 ;;		On exit  : B00/0
  2706 ;;		Unchanged: 0/0
  2707 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2708 ;;      Params:         0       8       0       0       0
  2709 ;;      Locals:         0       0      22       0       0
  2710 ;;      Temps:          0       6       0       0       0
  2711 ;;      Totals:         0      14      22       0       0
  2712 ;;Total ram usage:       36 bytes
  2713 ;; Hardware stack levels used: 1
  2714 ;; Hardware stack levels required when called: 4
  2715 ;; This function calls:
  2716 ;;		___awdiv
  2717 ;;		___ftadd
  2718 ;;		___ftge
  2719 ;;		___ftmul
  2720 ;;		___ftneg
  2721 ;;		___ftsub
  2722 ;;		___fttol
  2723 ;;		___lldiv
  2724 ;;		___llmod
  2725 ;;		___lltoft
  2726 ;;		___wmul
  2727 ;;		__div_to_l_
  2728 ;;		__tdiv_to_l_
  2729 ;;		_fround
  2730 ;;		_isdigit
  2731 ;;		_scale
  2732 ;; This function is called by:
  2733 ;;		_ambiental
  2734 ;; This function uses a non-reentrant model
  2735 ;;
  2736                           
  2737     0036                     _sprintf:	
  2738                           ;psect for function _sprintf
  2739                           
  2740                           
  2741                           ;doprnt.c: 507: va_list ap;;doprnt.c: 512: char c;;doprnt.c: 514: int width;;doprnt.c: 5
      +                          17: int prec;;doprnt.c: 525: unsigned short flag;;doprnt.c: 532: char d;;doprnt.c: 533: 
      +                          double fval;;doprnt.c: 534: int eexp;;doprnt.c: 540: union {;doprnt.c: 541: unsigned lon
      +                          g vd;;doprnt.c: 542: double integ;;doprnt.c: 543: } tmpval;;doprnt.c: 545: unsigned long
      +                           val;;doprnt.c: 546: unsigned len;;doprnt.c: 547: const char * cp;;doprnt.c: 550: *ap = 
      +                          __va_start();
  2742                           
  2743                           ;incstack = 0
  2744                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2745     0036  305B               	movlw	(low ((?_sprintf| 0+3)))& (0+255)
  2746     0037  1683               	bsf	3,5	;RP0=1, select bank1
  2747     0038  00D0               	movwf	sprintf@ap^(0+128)
  2748     0039                     l4912:	
  2749                           ;doprnt.c: 553: while((c = *f++)) {
  2750                           
  2751     0039  1283               	bcf	3,5	;RP0=0, select bank0
  2752     003A  085A               	movf	sprintf@f+1,w
  2753     003B  00E1               	movwf	??_sprintf+1
  2754     003C  0859               	movf	sprintf@f,w
  2755     003D  00E0               	movwf	??_sprintf
  2756     003E  0AD9               	incf	sprintf@f,f
  2757     003F  1903               	skipnz
  2758     0040  0ADA               	incf	sprintf@f+1,f
  2759     0041  0861               	movf	??_sprintf+1,w
  2760     0042  00FF               	movwf	127
  2761     0043  0860               	movf	??_sprintf,w
  2762     0044  0084               	movwf	4
  2763     0045  160A  118A  2000  120A  118A  	fcall	stringtab
  2764     004A  1683               	bsf	3,5	;RP0=1, select bank1
  2765     004B  00E2               	movwf	sprintf@c^(0+128)
  2766     004C  0862               	movf	sprintf@c^(0+128),w
  2767     004D  1903               	btfsc	3,2
  2768     004E  2EB6               	goto	l4914
  2769                           
  2770                           ;doprnt.c: 555: if(c != '%')
  2771     004F  3025               	movlw	37
  2772     0050  0662               	xorwf	sprintf@c^(0+128),w
  2773     0051  1903               	btfsc	3,2
  2774     0052  285E               	goto	l4690
  2775                           
  2776                           ;doprnt.c: 557: {;doprnt.c: 558: ((*sp++ = (c)));
  2777     0053  1283               	bcf	3,5	;RP0=0, select bank0
  2778     0054  0858               	movf	sprintf@sp,w
  2779     0055  0084               	movwf	4
  2780     0056  1683               	bsf	3,5	;RP0=1, select bank1
  2781     0057  0862               	movf	sprintf@c^(0+128),w
  2782     0058  1383               	bcf	3,7	;select IRP bank0
  2783     0059  0080               	movwf	0
  2784     005A  3001               	movlw	1
  2785     005B  1283               	bcf	3,5	;RP0=0, select bank0
  2786     005C  07D8               	addwf	sprintf@sp,f
  2787                           
  2788                           ;doprnt.c: 559: continue;
  2789     005D  2839               	goto	l4912
  2790     005E                     l4690:
  2791                           
  2792                           ;doprnt.c: 560: };doprnt.c: 565: flag = 0;
  2793     005E  01D1               	clrf	sprintf@flag^(0+128)
  2794     005F  01D2               	clrf	(sprintf@flag+1)^(0+128)
  2795                           
  2796                           ;doprnt.c: 628: if(*f == '.') {
  2797     0060  1283               	bcf	3,5	;RP0=0, select bank0
  2798     0061  085A               	movf	sprintf@f+1,w
  2799     0062  00FF               	movwf	127
  2800     0063  0859               	movf	sprintf@f,w
  2801     0064  0084               	movwf	4
  2802     0065  160A  118A  2000  120A  118A  	fcall	stringtab
  2803     006A  3A2E               	xorlw	46
  2804     006B  1D03               	skipz
  2805     006C  28BC               	goto	l4708
  2806                           
  2807                           ;doprnt.c: 629: flag |= 0x4000;
  2808     006D  1683               	bsf	3,5	;RP0=1, select bank1
  2809     006E  1752               	bsf	(sprintf@flag^(0+128)+1),6
  2810                           
  2811                           ;doprnt.c: 630: f++;
  2812     006F  3001               	movlw	1
  2813     0070  1283               	bcf	3,5	;RP0=0, select bank0
  2814     0071  07D9               	addwf	sprintf@f,f
  2815     0072  1803               	skipnc
  2816     0073  0ADA               	incf	sprintf@f+1,f
  2817     0074  3000               	movlw	0
  2818     0075  07DA               	addwf	sprintf@f+1,f
  2819                           
  2820                           ;doprnt.c: 644: {;doprnt.c: 645: prec = 0;
  2821     0076  1683               	bsf	3,5	;RP0=1, select bank1
  2822     0077  01DD               	clrf	sprintf@prec^(0+128)
  2823     0078  01DE               	clrf	(sprintf@prec+1)^(0+128)
  2824     0079                     l4706:	
  2825                           ;doprnt.c: 646: while(isdigit((unsigned)*f)) {
  2826                           
  2827     0079  1283               	bcf	3,5	;RP0=0, select bank0
  2828     007A  085A               	movf	sprintf@f+1,w
  2829     007B  00FF               	movwf	127
  2830     007C  0859               	movf	sprintf@f,w
  2831     007D  0084               	movwf	4
  2832     007E  160A  118A  2000  120A  118A  	fcall	stringtab
  2833     0083  160A  158A  2758  120A  118A  	fcall	_isdigit
  2834     0088  1C03               	btfss	3,0
  2835     0089  28C3               	goto	l4714
  2836                           
  2837                           ;doprnt.c: 647: prec *= 10;
  2838     008A  300A               	movlw	10
  2839     008B  00F3               	movwf	___wmul@multiplier
  2840     008C  3000               	movlw	0
  2841     008D  00F4               	movwf	___wmul@multiplier+1
  2842     008E  1683               	bsf	3,5	;RP0=1, select bank1
  2843     008F  085E               	movf	(sprintf@prec+1)^(0+128),w
  2844     0090  00F6               	movwf	___wmul@multiplicand+1
  2845     0091  085D               	movf	sprintf@prec^(0+128),w
  2846     0092  00F5               	movwf	___wmul@multiplicand
  2847     0093  160A  118A  2223  120A  118A  	fcall	___wmul
  2848     0098  0874               	movf	?___wmul+1,w
  2849     0099  1683               	bsf	3,5	;RP0=1, select bank1
  2850     009A  00DE               	movwf	(sprintf@prec+1)^(0+128)
  2851     009B  0873               	movf	?___wmul,w
  2852     009C  00DD               	movwf	sprintf@prec^(0+128)
  2853                           
  2854                           ;doprnt.c: 648: prec += *f++ - '0';
  2855     009D  1283               	bcf	3,5	;RP0=0, select bank0
  2856     009E  085A               	movf	sprintf@f+1,w
  2857     009F  00FF               	movwf	127
  2858     00A0  0859               	movf	sprintf@f,w
  2859     00A1  0084               	movwf	4
  2860     00A2  160A  118A  2000  120A  118A  	fcall	stringtab
  2861     00A7  3ED0               	addlw	208
  2862     00A8  00E0               	movwf	??_sprintf
  2863     00A9  30FF               	movlw	255
  2864     00AA  1803               	skipnc
  2865     00AB  3000               	movlw	0
  2866     00AC  00E1               	movwf	??_sprintf+1
  2867     00AD  0860               	movf	??_sprintf,w
  2868     00AE  1683               	bsf	3,5	;RP0=1, select bank1
  2869     00AF  07DD               	addwf	sprintf@prec^(0+128),f
  2870     00B0  1803               	skipnc
  2871     00B1  0ADE               	incf	(sprintf@prec+1)^(0+128),f
  2872     00B2  1283               	bcf	3,5	;RP0=0, select bank0
  2873     00B3  0861               	movf	??_sprintf+1,w
  2874     00B4  1683               	bsf	3,5	;RP0=1, select bank1
  2875     00B5  07DE               	addwf	(sprintf@prec+1)^(0+128),f
  2876     00B6  3001               	movlw	1
  2877     00B7  1283               	bcf	3,5	;RP0=0, select bank0
  2878     00B8  07D9               	addwf	sprintf@f,f
  2879     00B9  1803               	skipnc
  2880     00BA  0ADA               	incf	sprintf@f+1,f
  2881     00BB  2879               	goto	l4706
  2882     00BC                     l4708:
  2883                           
  2884                           ;doprnt.c: 652: prec = 0;
  2885     00BC  1683               	bsf	3,5	;RP0=1, select bank1
  2886     00BD  01DD               	clrf	sprintf@prec^(0+128)
  2887     00BE  01DE               	clrf	(sprintf@prec+1)^(0+128)
  2888                           
  2889                           ;doprnt.c: 654: flag |= 0x1000;
  2890     00BF  1652               	bsf	(sprintf@flag^(0+128)+1),4
  2891     00C0  28C3               	goto	l4714
  2892     00C1                     l517:	
  2893                           ;doprnt.c: 688: case 'f':
  2894                           
  2895                           
  2896                           ;doprnt.c: 689: flag |= 0x400;
  2897     00C1  1552               	bsf	(sprintf@flag^(0+128)+1),2
  2898                           
  2899                           ;doprnt.c: 690: break;
  2900     00C2  28E3               	goto	l4716
  2901     00C3                     l4714:
  2902     00C3  1283               	bcf	3,5	;RP0=0, select bank0
  2903     00C4  085A               	movf	sprintf@f+1,w
  2904     00C5  00E1               	movwf	??_sprintf+1
  2905     00C6  0859               	movf	sprintf@f,w
  2906     00C7  00E0               	movwf	??_sprintf
  2907     00C8  0AD9               	incf	sprintf@f,f
  2908     00C9  1903               	skipnz
  2909     00CA  0ADA               	incf	sprintf@f+1,f
  2910     00CB  0861               	movf	??_sprintf+1,w
  2911     00CC  00FF               	movwf	127
  2912     00CD  0860               	movf	??_sprintf,w
  2913     00CE  0084               	movwf	4
  2914     00CF  160A  118A  2000  120A  118A  	fcall	stringtab
  2915     00D4  1683               	bsf	3,5	;RP0=1, select bank1
  2916     00D5  00E2               	movwf	sprintf@c^(0+128)
  2917                           
  2918                           ; Switch size 1, requested type "simple"
  2919                           ; Number of cases is 4, Range of values is 0 to 105
  2920                           ; switch strategies available:
  2921                           ; Name         Instructions Cycles
  2922                           ; simple_byte           13     7 (average)
  2923                           ; jumptable            260     6 (fixed)
  2924                           ;	Chosen strategy is simple_byte
  2925     00D6  3A00               	xorlw	0	; case 0
  2926     00D7  1903               	skipnz
  2927     00D8  2EB6               	goto	l4914
  2928     00D9  3A64               	xorlw	100	; case 100
  2929     00DA  1903               	skipnz
  2930     00DB  28E3               	goto	l4716
  2931     00DC  3A02               	xorlw	2	; case 102
  2932     00DD  1903               	skipnz
  2933     00DE  28C1               	goto	l517
  2934     00DF  3A0F               	xorlw	15	; case 105
  2935     00E0  1903               	skipnz
  2936     00E1  28E3               	goto	l4716
  2937     00E2  2839               	goto	l4912
  2938     00E3                     l4716:
  2939                           
  2940                           ;doprnt.c: 851: if(flag & (0x700)) {
  2941     00E3  3000               	movlw	0
  2942     00E4  0551               	andwf	sprintf@flag^(0+128),w
  2943     00E5  1283               	bcf	3,5	;RP0=0, select bank0
  2944     00E6  00E0               	movwf	??_sprintf
  2945     00E7  3007               	movlw	7
  2946     00E8  1683               	bsf	3,5	;RP0=1, select bank1
  2947     00E9  0552               	andwf	(sprintf@flag+1)^(0+128),w
  2948     00EA  1283               	bcf	3,5	;RP0=0, select bank0
  2949     00EB  00E1               	movwf	??_sprintf+1
  2950     00EC  0860               	movf	??_sprintf,w
  2951     00ED  0461               	iorwf	??_sprintf+1,w
  2952     00EE  1903               	btfsc	3,2
  2953     00EF  2D96               	goto	l4862
  2954                           
  2955                           ;doprnt.c: 853: if(flag & 0x1000)
  2956     00F0  1683               	bsf	3,5	;RP0=1, select bank1
  2957     00F1  1E52               	btfss	(sprintf@flag+1)^(0+128),4
  2958     00F2  28F7               	goto	l4722
  2959                           
  2960                           ;doprnt.c: 855: prec = 6;
  2961     00F3  3006               	movlw	6
  2962     00F4  00DD               	movwf	sprintf@prec^(0+128)
  2963     00F5  3000               	movlw	0
  2964     00F6  00DE               	movwf	(sprintf@prec^(0+128)+1)
  2965     00F7                     l4722:
  2966                           
  2967                           ;doprnt.c: 856: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  2968     00F7  0850               	movf	sprintf@ap^(0+128),w
  2969     00F8  0084               	movwf	4
  2970     00F9  1383               	bcf	3,7	;select IRP bank0
  2971     00FA  0800               	movf	0,w
  2972     00FB  00DF               	movwf	sprintf@fval^(0+128)
  2973     00FC  0A84               	incf	4,f
  2974     00FD  0800               	movf	0,w
  2975     00FE  00E0               	movwf	(sprintf@fval+1)^(0+128)
  2976     00FF  0A84               	incf	4,f
  2977     0100  0800               	movf	0,w
  2978     0101  00E1               	movwf	(sprintf@fval+2)^(0+128)
  2979     0102  3003               	movlw	3
  2980     0103  07D0               	addwf	sprintf@ap^(0+128),f
  2981                           
  2982                           ;doprnt.c: 857: if(fval < 0.0) {
  2983     0104  085F               	movf	sprintf@fval^(0+128),w
  2984     0105  1283               	bcf	3,5	;RP0=0, select bank0
  2985     0106  00A0               	movwf	___ftge@ff1
  2986     0107  1683               	bsf	3,5	;RP0=1, select bank1
  2987     0108  0860               	movf	(sprintf@fval+1)^(0+128),w
  2988     0109  1283               	bcf	3,5	;RP0=0, select bank0
  2989     010A  00A1               	movwf	___ftge@ff1+1
  2990     010B  1683               	bsf	3,5	;RP0=1, select bank1
  2991     010C  0861               	movf	(sprintf@fval+2)^(0+128),w
  2992     010D  1283               	bcf	3,5	;RP0=0, select bank0
  2993     010E  00A2               	movwf	___ftge@ff1+2
  2994     010F  3000               	movlw	0
  2995     0110  00A3               	movwf	___ftge@ff2
  2996     0111  3000               	movlw	0
  2997     0112  00A4               	movwf	___ftge@ff2+1
  2998     0113  3000               	movlw	0
  2999     0114  00A5               	movwf	___ftge@ff2+2
  3000     0115  160A  118A  226C  120A  118A  	fcall	___ftge
  3001     011A  1803               	btfsc	3,0
  3002     011B  2932               	goto	l4732
  3003                           
  3004                           ;doprnt.c: 858: fval = -fval;
  3005     011C  1683               	bsf	3,5	;RP0=1, select bank1
  3006     011D  085F               	movf	sprintf@fval^(0+128),w
  3007     011E  00F3               	movwf	___ftneg@f1
  3008     011F  0860               	movf	(sprintf@fval+1)^(0+128),w
  3009     0120  00F4               	movwf	___ftneg@f1+1
  3010     0121  0861               	movf	(sprintf@fval+2)^(0+128),w
  3011     0122  00F5               	movwf	___ftneg@f1+2
  3012     0123  160A  158A  270C  120A  118A  	fcall	___ftneg
  3013     0128  0873               	movf	?___ftneg,w
  3014     0129  00DF               	movwf	sprintf@fval^(0+128)
  3015     012A  0874               	movf	?___ftneg+1,w
  3016     012B  00E0               	movwf	(sprintf@fval+1)^(0+128)
  3017     012C  0875               	movf	?___ftneg+2,w
  3018     012D  00E1               	movwf	(sprintf@fval+2)^(0+128)
  3019                           
  3020                           ;doprnt.c: 859: flag |= 0x03;
  3021     012E  3003               	movlw	3
  3022     012F  04D1               	iorwf	sprintf@flag^(0+128),f
  3023     0130  3000               	movlw	0
  3024     0131  04D2               	iorwf	(sprintf@flag+1)^(0+128),f
  3025     0132                     l4732:
  3026                           
  3027                           ;doprnt.c: 860: };doprnt.c: 861: eexp = 0;
  3028     0132  1683               	bsf	3,5	;RP0=1, select bank1
  3029     0133  01D3               	clrf	sprintf@eexp^(0+128)
  3030     0134  01D4               	clrf	(sprintf@eexp+1)^(0+128)
  3031                           
  3032                           ;doprnt.c: 862: if( fval!=0) {
  3033     0135  0861               	movf	(sprintf@fval+2)^(0+128),w
  3034     0136  0460               	iorwf	(sprintf@fval+1)^(0+128),w
  3035     0137  045F               	iorwf	sprintf@fval^(0+128),w
  3036     0138  1903               	skipnz
  3037     0139  2A14               	goto	l4760
  3038                           
  3039                           ;doprnt.c: 863: (void)(*(&eexp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  3040     013A  30DF               	movlw	low (sprintf@fval| 0)
  3041     013B  0084               	movwf	4
  3042     013C  1383               	bcf	3,7	;select IRP bank1
  3043     013D  0800               	movf	0,w
  3044     013E  1283               	bcf	3,5	;RP0=0, select bank0
  3045     013F  00E0               	movwf	??_sprintf
  3046     0140  0A84               	incf	4,f
  3047     0141  0800               	movf	0,w
  3048     0142  00E1               	movwf	??_sprintf+1
  3049     0143  0A84               	incf	4,f
  3050     0144  0800               	movf	0,w
  3051     0145  00E2               	movwf	??_sprintf+2
  3052     0146  0A84               	incf	4,f
  3053     0147  0800               	movf	0,w
  3054     0148  00E3               	movwf	??_sprintf+3
  3055     0149  300F               	movlw	15
  3056     014A                     u6635:
  3057     014A  1003               	clrc
  3058     014B  0CE3               	rrf	??_sprintf+3,f
  3059     014C  0CE2               	rrf	??_sprintf+2,f
  3060     014D  0CE1               	rrf	??_sprintf+1,f
  3061     014E  0CE0               	rrf	??_sprintf,f
  3062     014F  3EFF               	addlw	-1
  3063     0150  1D03               	skipz
  3064     0151  294A               	goto	u6635
  3065     0152  30FF               	movlw	255
  3066     0153  0560               	andwf	??_sprintf,w
  3067     0154  00E4               	movwf	??_sprintf+4
  3068     0155  3000               	movlw	0
  3069     0156  0561               	andwf	??_sprintf+1,w
  3070     0157  00E5               	movwf	??_sprintf+5
  3071     0158  0864               	movf	??_sprintf+4,w
  3072     0159  3E82               	addlw	130
  3073     015A  1683               	bsf	3,5	;RP0=1, select bank1
  3074     015B  00D3               	movwf	sprintf@eexp^(0+128)
  3075     015C  1283               	bcf	3,5	;RP0=0, select bank0
  3076     015D  0865               	movf	??_sprintf+5,w
  3077     015E  1803               	skipnc
  3078     015F  3E01               	addlw	1
  3079     0160  3EFF               	addlw	255
  3080     0161  1683               	bsf	3,5	;RP0=1, select bank1
  3081     0162  00D4               	movwf	(sprintf@eexp+1)^(0+128)
  3082                           
  3083                           ;doprnt.c: 864: eexp--;
  3084     0163  30FF               	movlw	255
  3085     0164  07D3               	addwf	sprintf@eexp^(0+128),f
  3086     0165  1803               	skipnc
  3087     0166  0AD4               	incf	(sprintf@eexp+1)^(0+128),f
  3088     0167  30FF               	movlw	255
  3089     0168  07D4               	addwf	(sprintf@eexp+1)^(0+128),f
  3090                           
  3091                           ;doprnt.c: 865: eexp *= 3;
  3092     0169  3003               	movlw	3
  3093     016A  00F3               	movwf	___wmul@multiplier
  3094     016B  3000               	movlw	0
  3095     016C  00F4               	movwf	___wmul@multiplier+1
  3096     016D  0854               	movf	(sprintf@eexp+1)^(0+128),w
  3097     016E  00F6               	movwf	___wmul@multiplicand+1
  3098     016F  0853               	movf	sprintf@eexp^(0+128),w
  3099     0170  00F5               	movwf	___wmul@multiplicand
  3100     0171  160A  118A  2223  120A  118A  	fcall	___wmul
  3101     0176  0874               	movf	?___wmul+1,w
  3102     0177  1683               	bsf	3,5	;RP0=1, select bank1
  3103     0178  00D4               	movwf	(sprintf@eexp+1)^(0+128)
  3104     0179  0873               	movf	?___wmul,w
  3105     017A  00D3               	movwf	sprintf@eexp^(0+128)
  3106                           
  3107                           ;doprnt.c: 866: eexp /= 10;
  3108     017B  300A               	movlw	10
  3109     017C  1283               	bcf	3,5	;RP0=0, select bank0
  3110     017D  00A2               	movwf	___awdiv@divisor
  3111     017E  3000               	movlw	0
  3112     017F  00A3               	movwf	___awdiv@divisor+1
  3113     0180  1683               	bsf	3,5	;RP0=1, select bank1
  3114     0181  0854               	movf	(sprintf@eexp+1)^(0+128),w
  3115     0182  1283               	bcf	3,5	;RP0=0, select bank0
  3116     0183  00A5               	movwf	___awdiv@dividend+1
  3117     0184  1683               	bsf	3,5	;RP0=1, select bank1
  3118     0185  0853               	movf	sprintf@eexp^(0+128),w
  3119     0186  1283               	bcf	3,5	;RP0=0, select bank0
  3120     0187  00A4               	movwf	___awdiv@dividend
  3121     0188  160A  118A  24DB  120A  118A  	fcall	___awdiv
  3122     018D  0823               	movf	?___awdiv+1,w
  3123     018E  1683               	bsf	3,5	;RP0=1, select bank1
  3124     018F  00D4               	movwf	(sprintf@eexp+1)^(0+128)
  3125     0190  1283               	bcf	3,5	;RP0=0, select bank0
  3126     0191  0822               	movf	?___awdiv,w
  3127     0192  1683               	bsf	3,5	;RP0=1, select bank1
  3128     0193  00D3               	movwf	sprintf@eexp^(0+128)
  3129                           
  3130                           ;doprnt.c: 867: if(eexp < 0)
  3131     0194  1FD4               	btfss	(sprintf@eexp+1)^(0+128),7
  3132     0195  299C               	goto	l4748
  3133                           
  3134                           ;doprnt.c: 868: eexp--;
  3135     0196  30FF               	movlw	255
  3136     0197  07D3               	addwf	sprintf@eexp^(0+128),f
  3137     0198  1803               	skipnc
  3138     0199  0AD4               	incf	(sprintf@eexp+1)^(0+128),f
  3139     019A  30FF               	movlw	255
  3140     019B  07D4               	addwf	(sprintf@eexp+1)^(0+128),f
  3141     019C                     l4748:
  3142                           
  3143                           ;doprnt.c: 872: tmpval.integ = scale(-eexp);
  3144     019C  0353               	decf	sprintf@eexp^(0+128),w
  3145     019D  3AFF               	xorlw	255
  3146     019E  120A  158A  2571  120A  118A  	fcall	_scale
  3147     01A3  083C               	movf	?_scale,w
  3148     01A4  1683               	bsf	3,5	;RP0=1, select bank1
  3149     01A5  00D5               	movwf	sprintf@tmpval^(0+128)
  3150     01A6  1283               	bcf	3,5	;RP0=0, select bank0
  3151     01A7  083D               	movf	?_scale+1,w
  3152     01A8  1683               	bsf	3,5	;RP0=1, select bank1
  3153     01A9  00D6               	movwf	(sprintf@tmpval+1)^(0+128)
  3154     01AA  1283               	bcf	3,5	;RP0=0, select bank0
  3155     01AB  083E               	movf	?_scale+2,w
  3156     01AC  1683               	bsf	3,5	;RP0=1, select bank1
  3157     01AD  00D7               	movwf	(sprintf@tmpval+2)^(0+128)
  3158                           
  3159                           ;doprnt.c: 873: tmpval.integ *= fval;
  3160     01AE  085F               	movf	sprintf@fval^(0+128),w
  3161     01AF  1283               	bcf	3,5	;RP0=0, select bank0
  3162     01B0  00AD               	movwf	___ftmul@f1
  3163     01B1  1683               	bsf	3,5	;RP0=1, select bank1
  3164     01B2  0860               	movf	(sprintf@fval+1)^(0+128),w
  3165     01B3  1283               	bcf	3,5	;RP0=0, select bank0
  3166     01B4  00AE               	movwf	___ftmul@f1+1
  3167     01B5  1683               	bsf	3,5	;RP0=1, select bank1
  3168     01B6  0861               	movf	(sprintf@fval+2)^(0+128),w
  3169     01B7  1283               	bcf	3,5	;RP0=0, select bank0
  3170     01B8  00AF               	movwf	___ftmul@f1+2
  3171     01B9  1683               	bsf	3,5	;RP0=1, select bank1
  3172     01BA  0855               	movf	sprintf@tmpval^(0+128),w
  3173     01BB  1283               	bcf	3,5	;RP0=0, select bank0
  3174     01BC  00B0               	movwf	___ftmul@f2
  3175     01BD  1683               	bsf	3,5	;RP0=1, select bank1
  3176     01BE  0856               	movf	(sprintf@tmpval+1)^(0+128),w
  3177     01BF  1283               	bcf	3,5	;RP0=0, select bank0
  3178     01C0  00B1               	movwf	___ftmul@f2+1
  3179     01C1  1683               	bsf	3,5	;RP0=1, select bank1
  3180     01C2  0857               	movf	(sprintf@tmpval+2)^(0+128),w
  3181     01C3  1283               	bcf	3,5	;RP0=0, select bank0
  3182     01C4  00B2               	movwf	___ftmul@f2+2
  3183     01C5  160A  118A  2761  120A  118A  	fcall	___ftmul
  3184     01CA  082D               	movf	?___ftmul,w
  3185     01CB  1683               	bsf	3,5	;RP0=1, select bank1
  3186     01CC  00D5               	movwf	sprintf@tmpval^(0+128)
  3187     01CD  1283               	bcf	3,5	;RP0=0, select bank0
  3188     01CE  082E               	movf	?___ftmul+1,w
  3189     01CF  1683               	bsf	3,5	;RP0=1, select bank1
  3190     01D0  00D6               	movwf	(sprintf@tmpval+1)^(0+128)
  3191     01D1  1283               	bcf	3,5	;RP0=0, select bank0
  3192     01D2  082F               	movf	?___ftmul+2,w
  3193     01D3  1683               	bsf	3,5	;RP0=1, select bank1
  3194     01D4  00D7               	movwf	(sprintf@tmpval+2)^(0+128)
  3195                           
  3196                           ;doprnt.c: 874: if(tmpval.integ < 1.0)
  3197     01D5  0855               	movf	sprintf@tmpval^(0+128),w
  3198     01D6  1283               	bcf	3,5	;RP0=0, select bank0
  3199     01D7  00A0               	movwf	___ftge@ff1
  3200     01D8  1683               	bsf	3,5	;RP0=1, select bank1
  3201     01D9  0856               	movf	(sprintf@tmpval+1)^(0+128),w
  3202     01DA  1283               	bcf	3,5	;RP0=0, select bank0
  3203     01DB  00A1               	movwf	___ftge@ff1+1
  3204     01DC  1683               	bsf	3,5	;RP0=1, select bank1
  3205     01DD  0857               	movf	(sprintf@tmpval+2)^(0+128),w
  3206     01DE  1283               	bcf	3,5	;RP0=0, select bank0
  3207     01DF  00A2               	movwf	___ftge@ff1+2
  3208     01E0  3000               	movlw	0
  3209     01E1  00A3               	movwf	___ftge@ff2
  3210     01E2  3080               	movlw	128
  3211     01E3  00A4               	movwf	___ftge@ff2+1
  3212     01E4  303F               	movlw	63
  3213     01E5  00A5               	movwf	___ftge@ff2+2
  3214     01E6  160A  118A  226C  120A  118A  	fcall	___ftge
  3215     01EB  1803               	btfsc	3,0
  3216     01EC  29F4               	goto	l4756
  3217                           
  3218                           ;doprnt.c: 875: eexp--;
  3219     01ED  30FF               	movlw	255
  3220     01EE  1683               	bsf	3,5	;RP0=1, select bank1
  3221     01EF  07D3               	addwf	sprintf@eexp^(0+128),f
  3222     01F0  1803               	skipnc
  3223     01F1  0AD4               	incf	(sprintf@eexp+1)^(0+128),f
  3224     01F2  30FF               	movlw	255
  3225     01F3  2A13               	goto	L3
  3226     01F4                     l4756:
  3227                           
  3228                           ;doprnt.c: 876: else if(tmpval.integ >= 10.0)
  3229     01F4  1683               	bsf	3,5	;RP0=1, select bank1
  3230     01F5  0855               	movf	sprintf@tmpval^(0+128),w
  3231     01F6  1283               	bcf	3,5	;RP0=0, select bank0
  3232     01F7  00A0               	movwf	___ftge@ff1
  3233     01F8  1683               	bsf	3,5	;RP0=1, select bank1
  3234     01F9  0856               	movf	(sprintf@tmpval+1)^(0+128),w
  3235     01FA  1283               	bcf	3,5	;RP0=0, select bank0
  3236     01FB  00A1               	movwf	___ftge@ff1+1
  3237     01FC  1683               	bsf	3,5	;RP0=1, select bank1
  3238     01FD  0857               	movf	(sprintf@tmpval+2)^(0+128),w
  3239     01FE  1283               	bcf	3,5	;RP0=0, select bank0
  3240     01FF  00A2               	movwf	___ftge@ff1+2
  3241     0200  3000               	movlw	0
  3242     0201  00A3               	movwf	___ftge@ff2
  3243     0202  3020               	movlw	32
  3244     0203  00A4               	movwf	___ftge@ff2+1
  3245     0204  3041               	movlw	65
  3246     0205  00A5               	movwf	___ftge@ff2+2
  3247     0206  160A  118A  226C  120A  118A  	fcall	___ftge
  3248     020B  1C03               	btfss	3,0
  3249     020C  2A14               	goto	l4760
  3250                           
  3251                           ;doprnt.c: 877: eexp++;
  3252     020D  3001               	movlw	1
  3253     020E  1683               	bsf	3,5	;RP0=1, select bank1
  3254     020F  07D3               	addwf	sprintf@eexp^(0+128),f
  3255     0210  1803               	skipnc
  3256     0211  0AD4               	incf	(sprintf@eexp+1)^(0+128),f
  3257     0212  3000               	movlw	0
  3258     0213                     L3:
  3259     0213  07D4               	addwf	(sprintf@eexp+1)^(0+128),f
  3260     0214                     l4760:
  3261                           
  3262                           ;doprnt.c: 878: };doprnt.c: 1138: if(prec <= 12)
  3263     0214  1683               	bsf	3,5	;RP0=1, select bank1
  3264     0215  085E               	movf	(sprintf@prec+1)^(0+128),w
  3265     0216  3A80               	xorlw	128
  3266     0217  00FF               	movwf	127
  3267     0218  3080               	movlw	128
  3268     0219  027F               	subwf	127,w
  3269     021A  1D03               	skipz
  3270     021B  2A1E               	goto	u6675
  3271     021C  300D               	movlw	13
  3272     021D  025D               	subwf	sprintf@prec^(0+128),w
  3273     021E                     u6675:
  3274     021E  1803               	skipnc
  3275     021F  2A4A               	goto	l4764
  3276                           
  3277                           ;doprnt.c: 1139: fval += fround((unsigned int)prec);
  3278     0220  1683               	bsf	3,5	;RP0=1, select bank1
  3279     0221  1303               	bcf	3,6	;RP1=0, select bank1
  3280     0222  085D               	movf	sprintf@prec^(0+128),w
  3281     0223  120A  158A  241A  120A  118A  	fcall	_fround
  3282     0228  083C               	movf	?_fround,w
  3283     0229  00C6               	movwf	___ftadd@f1
  3284     022A  083D               	movf	?_fround+1,w
  3285     022B  00C7               	movwf	___ftadd@f1+1
  3286     022C  083E               	movf	?_fround+2,w
  3287     022D  00C8               	movwf	___ftadd@f1+2
  3288     022E  1683               	bsf	3,5	;RP0=1, select bank1
  3289     022F  085F               	movf	sprintf@fval^(0+128),w
  3290     0230  1283               	bcf	3,5	;RP0=0, select bank0
  3291     0231  00C9               	movwf	___ftadd@f2
  3292     0232  1683               	bsf	3,5	;RP0=1, select bank1
  3293     0233  0860               	movf	(sprintf@fval+1)^(0+128),w
  3294     0234  1283               	bcf	3,5	;RP0=0, select bank0
  3295     0235  00CA               	movwf	___ftadd@f2+1
  3296     0236  1683               	bsf	3,5	;RP0=1, select bank1
  3297     0237  0861               	movf	(sprintf@fval+2)^(0+128),w
  3298     0238  1283               	bcf	3,5	;RP0=0, select bank0
  3299     0239  00CB               	movwf	___ftadd@f2+2
  3300     023A  120A  158A  2212  120A  118A  	fcall	___ftadd
  3301     023F  0846               	movf	?___ftadd,w
  3302     0240  1683               	bsf	3,5	;RP0=1, select bank1
  3303     0241  00DF               	movwf	sprintf@fval^(0+128)
  3304     0242  1283               	bcf	3,5	;RP0=0, select bank0
  3305     0243  0847               	movf	?___ftadd+1,w
  3306     0244  1683               	bsf	3,5	;RP0=1, select bank1
  3307     0245  00E0               	movwf	(sprintf@fval+1)^(0+128)
  3308     0246  1283               	bcf	3,5	;RP0=0, select bank0
  3309     0247  0848               	movf	?___ftadd+2,w
  3310     0248  1683               	bsf	3,5	;RP0=1, select bank1
  3311     0249  00E1               	movwf	(sprintf@fval+2)^(0+128)
  3312     024A                     l4764:
  3313                           
  3314                           ;doprnt.c: 1142: if((eexp > 9)||(fval != 0 && (unsigned long)fval == 0 && eexp > 1)) {
  3315     024A  1683               	bsf	3,5	;RP0=1, select bank1
  3316     024B  1303               	bcf	3,6	;RP1=0, select bank1
  3317     024C  0854               	movf	(sprintf@eexp+1)^(0+128),w
  3318     024D  3A80               	xorlw	128
  3319     024E  00FF               	movwf	127
  3320     024F  3080               	movlw	128
  3321     0250  027F               	subwf	127,w
  3322     0251  1D03               	skipz
  3323     0252  2A55               	goto	u6685
  3324     0253  300A               	movlw	10
  3325     0254  0253               	subwf	sprintf@eexp^(0+128),w
  3326     0255                     u6685:
  3327     0255  1803               	skipnc
  3328     0256  2A80               	goto	l4772
  3329     0257  1683               	bsf	3,5	;RP0=1, select bank1
  3330     0258  1303               	bcf	3,6	;RP1=0, select bank1
  3331     0259  0861               	movf	(sprintf@fval+2)^(0+128),w
  3332     025A  0460               	iorwf	(sprintf@fval+1)^(0+128),w
  3333     025B  045F               	iorwf	sprintf@fval^(0+128),w
  3334     025C  1903               	skipnz
  3335     025D  2AE6               	goto	l4786
  3336     025E  085F               	movf	sprintf@fval^(0+128),w
  3337     025F  1283               	bcf	3,5	;RP0=0, select bank0
  3338     0260  00C3               	movwf	___fttol@f1
  3339     0261  1683               	bsf	3,5	;RP0=1, select bank1
  3340     0262  0860               	movf	(sprintf@fval+1)^(0+128),w
  3341     0263  1283               	bcf	3,5	;RP0=0, select bank0
  3342     0264  00C4               	movwf	___fttol@f1+1
  3343     0265  1683               	bsf	3,5	;RP0=1, select bank1
  3344     0266  0861               	movf	(sprintf@fval+2)^(0+128),w
  3345     0267  1283               	bcf	3,5	;RP0=0, select bank0
  3346     0268  00C5               	movwf	___fttol@f1+2
  3347     0269  120A  158A  200D  120A  118A  	fcall	___fttol
  3348     026E  0846               	movf	?___fttol+3,w
  3349     026F  0445               	iorwf	?___fttol+2,w
  3350     0270  0444               	iorwf	?___fttol+1,w
  3351     0271  0443               	iorwf	?___fttol,w
  3352     0272  1D03               	skipz
  3353     0273  2AE6               	goto	l4786
  3354     0274  1683               	bsf	3,5	;RP0=1, select bank1
  3355     0275  0854               	movf	(sprintf@eexp+1)^(0+128),w
  3356     0276  3A80               	xorlw	128
  3357     0277  00FF               	movwf	127
  3358     0278  3080               	movlw	128
  3359     0279  027F               	subwf	127,w
  3360     027A  1D03               	skipz
  3361     027B  2A7E               	goto	u6715
  3362     027C  3002               	movlw	2
  3363     027D  0253               	subwf	sprintf@eexp^(0+128),w
  3364     027E                     u6715:
  3365     027E  1C03               	skipc
  3366     027F  2AE6               	goto	l4786
  3367     0280                     l4772:
  3368                           
  3369                           ;doprnt.c: 1146: if(tmpval.integ < 4.294967296){
  3370     0280  1683               	bsf	3,5	;RP0=1, select bank1
  3371     0281  1303               	bcf	3,6	;RP1=0, select bank1
  3372     0282  0855               	movf	sprintf@tmpval^(0+128),w
  3373     0283  1283               	bcf	3,5	;RP0=0, select bank0
  3374     0284  00A0               	movwf	___ftge@ff1
  3375     0285  1683               	bsf	3,5	;RP0=1, select bank1
  3376     0286  0856               	movf	(sprintf@tmpval+1)^(0+128),w
  3377     0287  1283               	bcf	3,5	;RP0=0, select bank0
  3378     0288  00A1               	movwf	___ftge@ff1+1
  3379     0289  1683               	bsf	3,5	;RP0=1, select bank1
  3380     028A  0857               	movf	(sprintf@tmpval+2)^(0+128),w
  3381     028B  1283               	bcf	3,5	;RP0=0, select bank0
  3382     028C  00A2               	movwf	___ftge@ff1+2
  3383     028D  3070               	movlw	112
  3384     028E  00A3               	movwf	___ftge@ff2
  3385     028F  3089               	movlw	137
  3386     0290  00A4               	movwf	___ftge@ff2+1
  3387     0291  3040               	movlw	64
  3388     0292  00A5               	movwf	___ftge@ff2+2
  3389     0293  160A  118A  226C  120A  118A  	fcall	___ftge
  3390     0298  1803               	btfsc	3,0
  3391     0299  2A9C               	goto	l4776
  3392                           
  3393                           ;doprnt.c: 1147: eexp -= (sizeof dpowers/sizeof dpowers[0])-1;
  3394     029A  30F7               	movlw	247
  3395     029B  2A9D               	goto	L4
  3396     029C                     l4776:	
  3397                           ;doprnt.c: 1148: }else{
  3398                           
  3399                           
  3400                           ;doprnt.c: 1149: eexp -= (sizeof dpowers/sizeof dpowers[0])-2;
  3401     029C  30F8               	movlw	248
  3402     029D                     L4:
  3403     029D  1683               	bsf	3,5	;RP0=1, select bank1
  3404     029E  07D3               	addwf	sprintf@eexp^(0+128),f
  3405     029F  1803               	skipnc
  3406     02A0  0AD4               	incf	(sprintf@eexp+1)^(0+128),f
  3407     02A1  30FF               	movlw	255
  3408     02A2  07D4               	addwf	(sprintf@eexp+1)^(0+128),f
  3409                           
  3410                           ;doprnt.c: 1150: };doprnt.c: 1151: tmpval.integ = scale(eexp);
  3411     02A3  0853               	movf	sprintf@eexp^(0+128),w
  3412     02A4  120A  158A  2571  120A  118A  	fcall	_scale
  3413     02A9  083C               	movf	?_scale,w
  3414     02AA  1683               	bsf	3,5	;RP0=1, select bank1
  3415     02AB  00D5               	movwf	sprintf@tmpval^(0+128)
  3416     02AC  1283               	bcf	3,5	;RP0=0, select bank0
  3417     02AD  083D               	movf	?_scale+1,w
  3418     02AE  1683               	bsf	3,5	;RP0=1, select bank1
  3419     02AF  00D6               	movwf	(sprintf@tmpval+1)^(0+128)
  3420     02B0  1283               	bcf	3,5	;RP0=0, select bank0
  3421     02B1  083E               	movf	?_scale+2,w
  3422     02B2  1683               	bsf	3,5	;RP0=1, select bank1
  3423     02B3  00D7               	movwf	(sprintf@tmpval+2)^(0+128)
  3424                           
  3425                           ;doprnt.c: 1152: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  3426     02B4  085F               	movf	sprintf@fval^(0+128),w
  3427     02B5  1283               	bcf	3,5	;RP0=0, select bank0
  3428     02B6  00A0               	movwf	__tdiv_to_l_@f1
  3429     02B7  1683               	bsf	3,5	;RP0=1, select bank1
  3430     02B8  0860               	movf	(sprintf@fval+1)^(0+128),w
  3431     02B9  1283               	bcf	3,5	;RP0=0, select bank0
  3432     02BA  00A1               	movwf	__tdiv_to_l_@f1+1
  3433     02BB  1683               	bsf	3,5	;RP0=1, select bank1
  3434     02BC  0861               	movf	(sprintf@fval+2)^(0+128),w
  3435     02BD  1283               	bcf	3,5	;RP0=0, select bank0
  3436     02BE  00A2               	movwf	__tdiv_to_l_@f1+2
  3437     02BF  1683               	bsf	3,5	;RP0=1, select bank1
  3438     02C0  0855               	movf	sprintf@tmpval^(0+128),w
  3439     02C1  1283               	bcf	3,5	;RP0=0, select bank0
  3440     02C2  00A3               	movwf	__tdiv_to_l_@f2
  3441     02C3  1683               	bsf	3,5	;RP0=1, select bank1
  3442     02C4  0856               	movf	(sprintf@tmpval+1)^(0+128),w
  3443     02C5  1283               	bcf	3,5	;RP0=0, select bank0
  3444     02C6  00A4               	movwf	__tdiv_to_l_@f2+1
  3445     02C7  1683               	bsf	3,5	;RP0=1, select bank1
  3446     02C8  0857               	movf	(sprintf@tmpval+2)^(0+128),w
  3447     02C9  1283               	bcf	3,5	;RP0=0, select bank0
  3448     02CA  00A5               	movwf	__tdiv_to_l_@f2+2
  3449     02CB  160A  118A  26C2  120A  118A  	fcall	__tdiv_to_l_
  3450     02D0  0823               	movf	?__tdiv_to_l_+3,w
  3451     02D1  1683               	bsf	3,5	;RP0=1, select bank1
  3452     02D2  00DC               	movwf	(sprintf@val+3)^(0+128)
  3453     02D3  1283               	bcf	3,5	;RP0=0, select bank0
  3454     02D4  0822               	movf	?__tdiv_to_l_+2,w
  3455     02D5  1683               	bsf	3,5	;RP0=1, select bank1
  3456     02D6  00DB               	movwf	(sprintf@val+2)^(0+128)
  3457     02D7  1283               	bcf	3,5	;RP0=0, select bank0
  3458     02D8  0821               	movf	?__tdiv_to_l_+1,w
  3459     02D9  1683               	bsf	3,5	;RP0=1, select bank1
  3460     02DA  00DA               	movwf	(sprintf@val+1)^(0+128)
  3461     02DB  1283               	bcf	3,5	;RP0=0, select bank0
  3462     02DC  0820               	movf	?__tdiv_to_l_,w
  3463     02DD  1683               	bsf	3,5	;RP0=1, select bank1
  3464     02DE  00D9               	movwf	sprintf@val^(0+128)
  3465                           
  3466                           ;doprnt.c: 1155: fval = 0.0;
  3467     02DF  3000               	movlw	0
  3468     02E0  00DF               	movwf	sprintf@fval^(0+128)
  3469     02E1  3000               	movlw	0
  3470     02E2  00E0               	movwf	(sprintf@fval+1)^(0+128)
  3471     02E3  3000               	movlw	0
  3472     02E4  00E1               	movwf	(sprintf@fval+2)^(0+128)
  3473                           
  3474                           ;doprnt.c: 1156: } else {
  3475     02E5  2B3F               	goto	l4790
  3476     02E6                     l4786:
  3477                           
  3478                           ;doprnt.c: 1157: val = (unsigned long)fval;
  3479     02E6  1683               	bsf	3,5	;RP0=1, select bank1
  3480     02E7  1303               	bcf	3,6	;RP1=0, select bank1
  3481     02E8  085F               	movf	sprintf@fval^(0+128),w
  3482     02E9  1283               	bcf	3,5	;RP0=0, select bank0
  3483     02EA  00C3               	movwf	___fttol@f1
  3484     02EB  1683               	bsf	3,5	;RP0=1, select bank1
  3485     02EC  0860               	movf	(sprintf@fval+1)^(0+128),w
  3486     02ED  1283               	bcf	3,5	;RP0=0, select bank0
  3487     02EE  00C4               	movwf	___fttol@f1+1
  3488     02EF  1683               	bsf	3,5	;RP0=1, select bank1
  3489     02F0  0861               	movf	(sprintf@fval+2)^(0+128),w
  3490     02F1  1283               	bcf	3,5	;RP0=0, select bank0
  3491     02F2  00C5               	movwf	___fttol@f1+2
  3492     02F3  120A  158A  200D  120A  118A  	fcall	___fttol
  3493     02F8  0846               	movf	?___fttol+3,w
  3494     02F9  1683               	bsf	3,5	;RP0=1, select bank1
  3495     02FA  00DC               	movwf	(sprintf@val+3)^(0+128)
  3496     02FB  1283               	bcf	3,5	;RP0=0, select bank0
  3497     02FC  0845               	movf	?___fttol+2,w
  3498     02FD  1683               	bsf	3,5	;RP0=1, select bank1
  3499     02FE  00DB               	movwf	(sprintf@val+2)^(0+128)
  3500     02FF  1283               	bcf	3,5	;RP0=0, select bank0
  3501     0300  0844               	movf	?___fttol+1,w
  3502     0301  1683               	bsf	3,5	;RP0=1, select bank1
  3503     0302  00DA               	movwf	(sprintf@val+1)^(0+128)
  3504     0303  1283               	bcf	3,5	;RP0=0, select bank0
  3505     0304  0843               	movf	?___fttol,w
  3506     0305  1683               	bsf	3,5	;RP0=1, select bank1
  3507     0306  00D9               	movwf	sprintf@val^(0+128)
  3508                           
  3509                           ;doprnt.c: 1158: fval -= (double)val;
  3510     0307  085C               	movf	(sprintf@val+3)^(0+128),w
  3511     0308  1283               	bcf	3,5	;RP0=0, select bank0
  3512     0309  00A6               	movwf	___lltoft@c+3
  3513     030A  1683               	bsf	3,5	;RP0=1, select bank1
  3514     030B  085B               	movf	(sprintf@val+2)^(0+128),w
  3515     030C  1283               	bcf	3,5	;RP0=0, select bank0
  3516     030D  00A5               	movwf	___lltoft@c+2
  3517     030E  1683               	bsf	3,5	;RP0=1, select bank1
  3518     030F  085A               	movf	(sprintf@val+1)^(0+128),w
  3519     0310  1283               	bcf	3,5	;RP0=0, select bank0
  3520     0311  00A4               	movwf	___lltoft@c+1
  3521     0312  1683               	bsf	3,5	;RP0=1, select bank1
  3522     0313  0859               	movf	sprintf@val^(0+128),w
  3523     0314  1283               	bcf	3,5	;RP0=0, select bank0
  3524     0315  00A3               	movwf	___lltoft@c
  3525     0316  160A  118A  2247  120A  118A  	fcall	___lltoft
  3526     031B  0823               	movf	?___lltoft,w
  3527     031C  00D2               	movwf	___ftsub@f2
  3528     031D  0824               	movf	?___lltoft+1,w
  3529     031E  00D3               	movwf	___ftsub@f2+1
  3530     031F  0825               	movf	?___lltoft+2,w
  3531     0320  00D4               	movwf	___ftsub@f2+2
  3532     0321  1683               	bsf	3,5	;RP0=1, select bank1
  3533     0322  085F               	movf	sprintf@fval^(0+128),w
  3534     0323  1283               	bcf	3,5	;RP0=0, select bank0
  3535     0324  00D5               	movwf	___ftsub@f1
  3536     0325  1683               	bsf	3,5	;RP0=1, select bank1
  3537     0326  0860               	movf	(sprintf@fval+1)^(0+128),w
  3538     0327  1283               	bcf	3,5	;RP0=0, select bank0
  3539     0328  00D6               	movwf	___ftsub@f1+1
  3540     0329  1683               	bsf	3,5	;RP0=1, select bank1
  3541     032A  0861               	movf	(sprintf@fval+2)^(0+128),w
  3542     032B  1283               	bcf	3,5	;RP0=0, select bank0
  3543     032C  00D7               	movwf	___ftsub@f1+2
  3544     032D  160A  118A  2187  120A  118A  	fcall	___ftsub
  3545     0332  0852               	movf	?___ftsub,w
  3546     0333  1683               	bsf	3,5	;RP0=1, select bank1
  3547     0334  00DF               	movwf	sprintf@fval^(0+128)
  3548     0335  1283               	bcf	3,5	;RP0=0, select bank0
  3549     0336  0853               	movf	?___ftsub+1,w
  3550     0337  1683               	bsf	3,5	;RP0=1, select bank1
  3551     0338  00E0               	movwf	(sprintf@fval+1)^(0+128)
  3552     0339  1283               	bcf	3,5	;RP0=0, select bank0
  3553     033A  0854               	movf	?___ftsub+2,w
  3554     033B  1683               	bsf	3,5	;RP0=1, select bank1
  3555     033C  00E1               	movwf	(sprintf@fval+2)^(0+128)
  3556                           
  3557                           ;doprnt.c: 1159: eexp = 0;
  3558     033D  01D3               	clrf	sprintf@eexp^(0+128)
  3559     033E  01D4               	clrf	(sprintf@eexp+1)^(0+128)
  3560     033F                     l4790:
  3561                           
  3562                           ;doprnt.c: 1160: };doprnt.c: 1162: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ;
      +                           c++)
  3563     033F  3001               	movlw	1
  3564     0340  00E2               	movwf	sprintf@c^(0+128)
  3565     0341                     l4796:
  3566                           
  3567                           ;doprnt.c: 1163: if(val < dpowers[c])
  3568     0341  0862               	movf	sprintf@c^(0+128),w
  3569     0342  1283               	bcf	3,5	;RP0=0, select bank0
  3570     0343  00E0               	movwf	??_sprintf
  3571     0344  3001               	movlw	1
  3572     0345                     u6735:
  3573     0345  1003               	clrc
  3574     0346  0DE0               	rlf	??_sprintf,f
  3575     0347  3EFF               	addlw	-1
  3576     0348  1D03               	skipz
  3577     0349  2B45               	goto	u6735
  3578     034A  1003               	clrc
  3579     034B  0D60               	rlf	??_sprintf,w
  3580     034C  3E60               	addlw	low (_dpowers| (0+32768))
  3581     034D  0084               	movwf	4
  3582     034E  3090               	movlw	high (_dpowers| (0+32768))
  3583     034F  1803               	skipnc
  3584     0350  3E01               	addlw	1
  3585     0351  00FF               	movwf	127
  3586     0352  160A  118A  2000  120A  118A  	fcall	stringtab
  3587     0357  00E1               	movwf	??_sprintf+1
  3588     0358  160A  118A  2000  120A  118A  	fcall	stringtab
  3589     035D  00E2               	movwf	??_sprintf+2
  3590     035E  160A  118A  2000  120A  118A  	fcall	stringtab
  3591     0363  00E3               	movwf	??_sprintf+3
  3592     0364  160A  118A  2000  120A  118A  	fcall	stringtab
  3593     0369  00E4               	movwf	??_sprintf+4
  3594     036A  0864               	movf	??_sprintf+4,w
  3595     036B  1683               	bsf	3,5	;RP0=1, select bank1
  3596     036C  025C               	subwf	(sprintf@val+3)^(0+128),w
  3597     036D  1D03               	skipz
  3598     036E  2B7F               	goto	u6745
  3599     036F  1283               	bcf	3,5	;RP0=0, select bank0
  3600     0370  0863               	movf	??_sprintf+3,w
  3601     0371  1683               	bsf	3,5	;RP0=1, select bank1
  3602     0372  025B               	subwf	(sprintf@val+2)^(0+128),w
  3603     0373  1D03               	skipz
  3604     0374  2B7F               	goto	u6745
  3605     0375  1283               	bcf	3,5	;RP0=0, select bank0
  3606     0376  0862               	movf	??_sprintf+2,w
  3607     0377  1683               	bsf	3,5	;RP0=1, select bank1
  3608     0378  025A               	subwf	(sprintf@val+1)^(0+128),w
  3609     0379  1D03               	skipz
  3610     037A  2B7F               	goto	u6745
  3611     037B  1283               	bcf	3,5	;RP0=0, select bank0
  3612     037C  0861               	movf	??_sprintf+1,w
  3613     037D  1683               	bsf	3,5	;RP0=1, select bank1
  3614     037E  0259               	subwf	sprintf@val^(0+128),w
  3615     037F                     u6745:
  3616     037F  1C03               	btfss	3,0
  3617     0380  2B87               	goto	l4802
  3618     0381  3001               	movlw	1
  3619     0382  07E2               	addwf	sprintf@c^(0+128),f
  3620     0383  300A               	movlw	10
  3621     0384  0662               	xorwf	sprintf@c^(0+128),w
  3622     0385  1D03               	btfss	3,2
  3623     0386  2B41               	goto	l4796
  3624     0387                     l4802:
  3625                           
  3626                           ;doprnt.c: 1201: {;doprnt.c: 1214: if(flag & 0x03)
  3627     0387  0851               	movf	sprintf@flag^(0+128),w
  3628     0388  3903               	andlw	3
  3629     0389  1903               	btfsc	3,2
  3630     038A  2B94               	goto	l4816
  3631                           
  3632                           ;doprnt.c: 1216: ((*sp++ = ('-')));
  3633     038B  1283               	bcf	3,5	;RP0=0, select bank0
  3634     038C  0858               	movf	sprintf@sp,w
  3635     038D  0084               	movwf	4
  3636     038E  302D               	movlw	45
  3637     038F                     L7:
  3638     038F  1383               	bcf	3,7	;select IRP bank0
  3639     0390  0080               	movwf	0
  3640     0391  3001               	movlw	1
  3641     0392  1283               	bcf	3,5	;RP0=0, select bank0
  3642     0393  07D8               	addwf	sprintf@sp,f
  3643     0394                     l4816:
  3644     0394  3001               	movlw	1
  3645     0395  1683               	bsf	3,5	;RP0=1, select bank1
  3646     0396  02E2               	subwf	sprintf@c^(0+128),f
  3647     0397  0A62               	incf	sprintf@c^(0+128),w
  3648     0398  1903               	btfsc	3,2
  3649     0399  2C2B               	goto	l4824
  3650                           
  3651                           ;doprnt.c: 1226: {;doprnt.c: 1227: tmpval.vd = val/dpowers[c];
  3652     039A  0862               	movf	sprintf@c^(0+128),w
  3653     039B  1283               	bcf	3,5	;RP0=0, select bank0
  3654     039C  00E0               	movwf	??_sprintf
  3655     039D  3001               	movlw	1
  3656     039E                     u6775:
  3657     039E  1003               	clrc
  3658     039F  0DE0               	rlf	??_sprintf,f
  3659     03A0  3EFF               	addlw	-1
  3660     03A1  1D03               	skipz
  3661     03A2  2B9E               	goto	u6775
  3662     03A3  1003               	clrc
  3663     03A4  0D60               	rlf	??_sprintf,w
  3664     03A5  3E60               	addlw	low (_dpowers| (0+32768))
  3665     03A6  0084               	movwf	4
  3666     03A7  3090               	movlw	high (_dpowers| (0+32768))
  3667     03A8  1803               	skipnc
  3668     03A9  3E01               	addlw	1
  3669     03AA  00FF               	movwf	127
  3670     03AB  160A  118A  2000  120A  118A  	fcall	stringtab
  3671     03B0  00A0               	movwf	___lldiv@divisor
  3672     03B1  160A  118A  2000  120A  118A  	fcall	stringtab
  3673     03B6  00A1               	movwf	___lldiv@divisor+1
  3674     03B7  160A  118A  2000  120A  118A  	fcall	stringtab
  3675     03BC  00A2               	movwf	___lldiv@divisor+2
  3676     03BD  160A  118A  2000  120A  118A  	fcall	stringtab
  3677     03C2  00A3               	movwf	___lldiv@divisor+3
  3678     03C3  1683               	bsf	3,5	;RP0=1, select bank1
  3679     03C4  085C               	movf	(sprintf@val+3)^(0+128),w
  3680     03C5  1283               	bcf	3,5	;RP0=0, select bank0
  3681     03C6  00A7               	movwf	___lldiv@dividend+3
  3682     03C7  1683               	bsf	3,5	;RP0=1, select bank1
  3683     03C8  085B               	movf	(sprintf@val+2)^(0+128),w
  3684     03C9  1283               	bcf	3,5	;RP0=0, select bank0
  3685     03CA  00A6               	movwf	___lldiv@dividend+2
  3686     03CB  1683               	bsf	3,5	;RP0=1, select bank1
  3687     03CC  085A               	movf	(sprintf@val+1)^(0+128),w
  3688     03CD  1283               	bcf	3,5	;RP0=0, select bank0
  3689     03CE  00A5               	movwf	___lldiv@dividend+1
  3690     03CF  1683               	bsf	3,5	;RP0=1, select bank1
  3691     03D0  0859               	movf	sprintf@val^(0+128),w
  3692     03D1  1283               	bcf	3,5	;RP0=0, select bank0
  3693     03D2  00A4               	movwf	___lldiv@dividend
  3694     03D3  160A  118A  2530  120A  118A  	fcall	___lldiv
  3695     03D8  0823               	movf	?___lldiv+3,w
  3696     03D9  1683               	bsf	3,5	;RP0=1, select bank1
  3697     03DA  00D8               	movwf	(sprintf@tmpval+3)^(0+128)
  3698     03DB  1283               	bcf	3,5	;RP0=0, select bank0
  3699     03DC  0822               	movf	?___lldiv+2,w
  3700     03DD  1683               	bsf	3,5	;RP0=1, select bank1
  3701     03DE  00D7               	movwf	(sprintf@tmpval+2)^(0+128)
  3702     03DF  1283               	bcf	3,5	;RP0=0, select bank0
  3703     03E0  0821               	movf	?___lldiv+1,w
  3704     03E1  1683               	bsf	3,5	;RP0=1, select bank1
  3705     03E2  00D6               	movwf	(sprintf@tmpval+1)^(0+128)
  3706     03E3  1283               	bcf	3,5	;RP0=0, select bank0
  3707     03E4  0820               	movf	?___lldiv,w
  3708     03E5  1683               	bsf	3,5	;RP0=1, select bank1
  3709     03E6  00D5               	movwf	sprintf@tmpval^(0+128)
  3710                           
  3711                           ;doprnt.c: 1228: tmpval.vd %= 10;
  3712     03E7  3000               	movlw	0
  3713     03E8  1283               	bcf	3,5	;RP0=0, select bank0
  3714     03E9  00B0               	movwf	___llmod@divisor+3
  3715     03EA  3000               	movlw	0
  3716     03EB  00AF               	movwf	___llmod@divisor+2
  3717     03EC  3000               	movlw	0
  3718     03ED  00AE               	movwf	___llmod@divisor+1
  3719     03EE  300A               	movlw	10
  3720     03EF  00AD               	movwf	___llmod@divisor
  3721     03F0  1683               	bsf	3,5	;RP0=1, select bank1
  3722     03F1  0858               	movf	(sprintf@tmpval+3)^(0+128),w
  3723     03F2  1283               	bcf	3,5	;RP0=0, select bank0
  3724     03F3  00B4               	movwf	___llmod@dividend+3
  3725     03F4  1683               	bsf	3,5	;RP0=1, select bank1
  3726     03F5  0857               	movf	(sprintf@tmpval+2)^(0+128),w
  3727     03F6  1283               	bcf	3,5	;RP0=0, select bank0
  3728     03F7  00B3               	movwf	___llmod@dividend+2
  3729     03F8  1683               	bsf	3,5	;RP0=1, select bank1
  3730     03F9  0856               	movf	(sprintf@tmpval+1)^(0+128),w
  3731     03FA  1283               	bcf	3,5	;RP0=0, select bank0
  3732     03FB  00B2               	movwf	___llmod@dividend+1
  3733     03FC  1683               	bsf	3,5	;RP0=1, select bank1
  3734     03FD  0855               	movf	sprintf@tmpval^(0+128),w
  3735     03FE  1283               	bcf	3,5	;RP0=0, select bank0
  3736     03FF  00B1               	movwf	___llmod@dividend
  3737     0400  160A  118A  2441  120A  118A  	fcall	___llmod
  3738     0405  0830               	movf	?___llmod+3,w
  3739     0406  1683               	bsf	3,5	;RP0=1, select bank1
  3740     0407  00D8               	movwf	(sprintf@tmpval+3)^(0+128)
  3741     0408  1283               	bcf	3,5	;RP0=0, select bank0
  3742     0409  082F               	movf	?___llmod+2,w
  3743     040A  1683               	bsf	3,5	;RP0=1, select bank1
  3744     040B  00D7               	movwf	(sprintf@tmpval+2)^(0+128)
  3745     040C  1283               	bcf	3,5	;RP0=0, select bank0
  3746     040D  082E               	movf	?___llmod+1,w
  3747     040E  1683               	bsf	3,5	;RP0=1, select bank1
  3748     040F  00D6               	movwf	(sprintf@tmpval+1)^(0+128)
  3749     0410  1283               	bcf	3,5	;RP0=0, select bank0
  3750     0411  082D               	movf	?___llmod,w
  3751     0412  1683               	bsf	3,5	;RP0=1, select bank1
  3752     0413  00D5               	movwf	sprintf@tmpval^(0+128)
  3753                           
  3754                           ;doprnt.c: 1229: ((*sp++ = ('0' + tmpval.vd)));
  3755     0414  1283               	bcf	3,5	;RP0=0, select bank0
  3756     0415  0858               	movf	sprintf@sp,w
  3757     0416  0084               	movwf	4
  3758     0417  1683               	bsf	3,5	;RP0=1, select bank1
  3759     0418  0855               	movf	sprintf@tmpval^(0+128),w
  3760     0419  3E30               	addlw	48
  3761     041A  2B8F               	goto	L7
  3762     041B                     l4818:
  3763                           
  3764                           ;doprnt.c: 1234: ((*sp++ = ('0')));
  3765     041B  1283               	bcf	3,5	;RP0=0, select bank0
  3766     041C  1303               	bcf	3,6	;RP1=0, select bank0
  3767     041D  0858               	movf	sprintf@sp,w
  3768     041E  0084               	movwf	4
  3769     041F  3030               	movlw	48
  3770     0420  1383               	bcf	3,7	;select IRP bank0
  3771     0421  0080               	movwf	0
  3772     0422  3001               	movlw	1
  3773     0423  07D8               	addwf	sprintf@sp,f
  3774                           
  3775                           ;doprnt.c: 1235: eexp--;
  3776     0424  30FF               	movlw	255
  3777     0425  1683               	bsf	3,5	;RP0=1, select bank1
  3778     0426  07D3               	addwf	sprintf@eexp^(0+128),f
  3779     0427  1803               	skipnc
  3780     0428  0AD4               	incf	(sprintf@eexp+1)^(0+128),f
  3781     0429  30FF               	movlw	255
  3782     042A  07D4               	addwf	(sprintf@eexp+1)^(0+128),f
  3783     042B                     l4824:
  3784     042B  0854               	movf	(sprintf@eexp+1)^(0+128),w
  3785     042C  3A80               	xorlw	128
  3786     042D  00FF               	movwf	127
  3787     042E  3080               	movlw	128
  3788     042F  027F               	subwf	127,w
  3789     0430  1D03               	skipz
  3790     0431  2C34               	goto	u6795
  3791     0432  3001               	movlw	1
  3792     0433  0253               	subwf	sprintf@eexp^(0+128),w
  3793     0434                     u6795:
  3794     0434  1803               	skipnc
  3795     0435  2C1B               	goto	l4818
  3796                           
  3797                           ;doprnt.c: 1236: };doprnt.c: 1237: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2)
      +                          )
  3798     0436  1683               	bsf	3,5	;RP0=1, select bank1
  3799     0437  1303               	bcf	3,6	;RP1=0, select bank1
  3800     0438  085E               	movf	(sprintf@prec+1)^(0+128),w
  3801     0439  3A80               	xorlw	128
  3802     043A  00FF               	movwf	127
  3803     043B  3080               	movlw	128
  3804     043C  027F               	subwf	127,w
  3805     043D  1D03               	skipz
  3806     043E  2C41               	goto	u6805
  3807     043F  3009               	movlw	9
  3808     0440  025D               	subwf	sprintf@prec^(0+128),w
  3809     0441                     u6805:
  3810     0441  1C03               	skipc
  3811     0442  2C47               	goto	l4830
  3812                           
  3813                           ;doprnt.c: 1238: c = (sizeof dpowers/sizeof dpowers[0])-2;
  3814     0443  3008               	movlw	8
  3815     0444  1683               	bsf	3,5	;RP0=1, select bank1
  3816     0445  1303               	bcf	3,6	;RP1=0, select bank1
  3817     0446  2C4A               	goto	L5
  3818     0447                     l4830:
  3819                           
  3820                           ;doprnt.c: 1239: else;doprnt.c: 1240: c = (char)prec;
  3821     0447  1683               	bsf	3,5	;RP0=1, select bank1
  3822     0448  1303               	bcf	3,6	;RP1=0, select bank1
  3823     0449  085D               	movf	sprintf@prec^(0+128),w
  3824     044A                     L5:
  3825     044A  00E2               	movwf	sprintf@c^(0+128)
  3826                           
  3827                           ;doprnt.c: 1241: prec -= (int)c;
  3828     044B  0862               	movf	sprintf@c^(0+128),w
  3829     044C  1283               	bcf	3,5	;RP0=0, select bank0
  3830     044D  00E0               	movwf	??_sprintf
  3831     044E  01E1               	clrf	??_sprintf+1
  3832     044F  0860               	movf	??_sprintf,w
  3833     0450  1683               	bsf	3,5	;RP0=1, select bank1
  3834     0451  02DD               	subwf	sprintf@prec^(0+128),f
  3835     0452  1283               	bcf	3,5	;RP0=0, select bank0
  3836     0453  0861               	movf	??_sprintf+1,w
  3837     0454  1683               	bsf	3,5	;RP0=1, select bank1
  3838     0455  1C03               	skipc
  3839     0456  03DE               	decf	(sprintf@prec+1)^(0+128),f
  3840     0457  02DE               	subwf	(sprintf@prec+1)^(0+128),f
  3841                           
  3842                           ;doprnt.c: 1245: if(c)
  3843     0458  0862               	movf	sprintf@c^(0+128),w
  3844     0459  1903               	btfsc	3,2
  3845     045A  2C63               	goto	l4838
  3846                           
  3847                           ;doprnt.c: 1247: ((*sp++ = ('.')));
  3848     045B  1283               	bcf	3,5	;RP0=0, select bank0
  3849     045C  0858               	movf	sprintf@sp,w
  3850     045D  0084               	movwf	4
  3851     045E  302E               	movlw	46
  3852     045F  1383               	bcf	3,7	;select IRP bank0
  3853     0460  0080               	movwf	0
  3854     0461  3001               	movlw	1
  3855     0462  07D8               	addwf	sprintf@sp,f
  3856     0463                     l4838:
  3857                           
  3858                           ;doprnt.c: 1253: val = (unsigned long)(fval * scale((signed char)c));
  3859     0463  1683               	bsf	3,5	;RP0=1, select bank1
  3860     0464  0862               	movf	sprintf@c^(0+128),w
  3861     0465  120A  158A  2571  120A  118A  	fcall	_scale
  3862     046A  083C               	movf	?_scale,w
  3863     046B  1683               	bsf	3,5	;RP0=1, select bank1
  3864     046C  00CD               	movwf	_sprintf$1103^(0+128)
  3865     046D  1283               	bcf	3,5	;RP0=0, select bank0
  3866     046E  083D               	movf	?_scale+1,w
  3867     046F  1683               	bsf	3,5	;RP0=1, select bank1
  3868     0470  00CE               	movwf	(_sprintf$1103+1)^(0+128)
  3869     0471  1283               	bcf	3,5	;RP0=0, select bank0
  3870     0472  083E               	movf	?_scale+2,w
  3871     0473  1683               	bsf	3,5	;RP0=1, select bank1
  3872     0474  00CF               	movwf	(_sprintf$1103+2)^(0+128)
  3873                           
  3874                           ;doprnt.c: 1253: val = (unsigned long)(fval * scale((signed char)c));
  3875     0475  084D               	movf	_sprintf$1103^(0+128),w
  3876     0476  1283               	bcf	3,5	;RP0=0, select bank0
  3877     0477  00B0               	movwf	___ftmul@f2
  3878     0478  1683               	bsf	3,5	;RP0=1, select bank1
  3879     0479  084E               	movf	(_sprintf$1103+1)^(0+128),w
  3880     047A  1283               	bcf	3,5	;RP0=0, select bank0
  3881     047B  00B1               	movwf	___ftmul@f2+1
  3882     047C  1683               	bsf	3,5	;RP0=1, select bank1
  3883     047D  084F               	movf	(_sprintf$1103+2)^(0+128),w
  3884     047E  1283               	bcf	3,5	;RP0=0, select bank0
  3885     047F  00B2               	movwf	___ftmul@f2+2
  3886     0480  1683               	bsf	3,5	;RP0=1, select bank1
  3887     0481  085F               	movf	sprintf@fval^(0+128),w
  3888     0482  1283               	bcf	3,5	;RP0=0, select bank0
  3889     0483  00AD               	movwf	___ftmul@f1
  3890     0484  1683               	bsf	3,5	;RP0=1, select bank1
  3891     0485  0860               	movf	(sprintf@fval+1)^(0+128),w
  3892     0486  1283               	bcf	3,5	;RP0=0, select bank0
  3893     0487  00AE               	movwf	___ftmul@f1+1
  3894     0488  1683               	bsf	3,5	;RP0=1, select bank1
  3895     0489  0861               	movf	(sprintf@fval+2)^(0+128),w
  3896     048A  1283               	bcf	3,5	;RP0=0, select bank0
  3897     048B  00AF               	movwf	___ftmul@f1+2
  3898     048C  160A  118A  2761  120A  118A  	fcall	___ftmul
  3899     0491  082D               	movf	?___ftmul,w
  3900     0492  00C3               	movwf	___fttol@f1
  3901     0493  082E               	movf	?___ftmul+1,w
  3902     0494  00C4               	movwf	___fttol@f1+1
  3903     0495  082F               	movf	?___ftmul+2,w
  3904     0496  00C5               	movwf	___fttol@f1+2
  3905     0497  120A  158A  200D  120A  118A  	fcall	___fttol
  3906     049C  0846               	movf	?___fttol+3,w
  3907     049D  1683               	bsf	3,5	;RP0=1, select bank1
  3908     049E  00DC               	movwf	(sprintf@val+3)^(0+128)
  3909     049F  1283               	bcf	3,5	;RP0=0, select bank0
  3910     04A0  0845               	movf	?___fttol+2,w
  3911     04A1  1683               	bsf	3,5	;RP0=1, select bank1
  3912     04A2  00DB               	movwf	(sprintf@val+2)^(0+128)
  3913     04A3  1283               	bcf	3,5	;RP0=0, select bank0
  3914     04A4  0844               	movf	?___fttol+1,w
  3915     04A5  1683               	bsf	3,5	;RP0=1, select bank1
  3916     04A6  00DA               	movwf	(sprintf@val+1)^(0+128)
  3917     04A7  1283               	bcf	3,5	;RP0=0, select bank0
  3918     04A8  0843               	movf	?___fttol,w
  3919     04A9                     L6:
  3920     04A9  1683               	bsf	3,5	;RP0=1, select bank1
  3921     04AA  00D9               	movwf	sprintf@val^(0+128)
  3922     04AB  3001               	movlw	1
  3923     04AC  02E2               	subwf	sprintf@c^(0+128),f
  3924     04AD  0A62               	incf	sprintf@c^(0+128),w
  3925     04AE  1903               	btfsc	3,2
  3926     04AF  2D91               	goto	l4860
  3927                           
  3928                           ;doprnt.c: 1255: tmpval.vd = val/dpowers[c];
  3929                           
  3930                           ;doprnt.c: 1254: while(c--) {
  3931     04B0  0862               	movf	sprintf@c^(0+128),w
  3932     04B1  1283               	bcf	3,5	;RP0=0, select bank0
  3933     04B2  00E0               	movwf	??_sprintf
  3934     04B3  3001               	movlw	1
  3935     04B4                     u6825:
  3936     04B4  1003               	clrc
  3937     04B5  0DE0               	rlf	??_sprintf,f
  3938     04B6  3EFF               	addlw	-1
  3939     04B7  1D03               	skipz
  3940     04B8  2CB4               	goto	u6825
  3941     04B9  1003               	clrc
  3942     04BA  0D60               	rlf	??_sprintf,w
  3943     04BB  3E60               	addlw	low (_dpowers| (0+32768))
  3944     04BC  0084               	movwf	4
  3945     04BD  3090               	movlw	high (_dpowers| (0+32768))
  3946     04BE  1803               	skipnc
  3947     04BF  3E01               	addlw	1
  3948     04C0  00FF               	movwf	127
  3949     04C1  160A  118A  2000  120A  118A  	fcall	stringtab
  3950     04C6  00A0               	movwf	___lldiv@divisor
  3951     04C7  160A  118A  2000  120A  118A  	fcall	stringtab
  3952     04CC  00A1               	movwf	___lldiv@divisor+1
  3953     04CD  160A  118A  2000  120A  118A  	fcall	stringtab
  3954     04D2  00A2               	movwf	___lldiv@divisor+2
  3955     04D3  160A  118A  2000  120A  118A  	fcall	stringtab
  3956     04D8  00A3               	movwf	___lldiv@divisor+3
  3957     04D9  1683               	bsf	3,5	;RP0=1, select bank1
  3958     04DA  085C               	movf	(sprintf@val+3)^(0+128),w
  3959     04DB  1283               	bcf	3,5	;RP0=0, select bank0
  3960     04DC  00A7               	movwf	___lldiv@dividend+3
  3961     04DD  1683               	bsf	3,5	;RP0=1, select bank1
  3962     04DE  085B               	movf	(sprintf@val+2)^(0+128),w
  3963     04DF  1283               	bcf	3,5	;RP0=0, select bank0
  3964     04E0  00A6               	movwf	___lldiv@dividend+2
  3965     04E1  1683               	bsf	3,5	;RP0=1, select bank1
  3966     04E2  085A               	movf	(sprintf@val+1)^(0+128),w
  3967     04E3  1283               	bcf	3,5	;RP0=0, select bank0
  3968     04E4  00A5               	movwf	___lldiv@dividend+1
  3969     04E5  1683               	bsf	3,5	;RP0=1, select bank1
  3970     04E6  0859               	movf	sprintf@val^(0+128),w
  3971     04E7  1283               	bcf	3,5	;RP0=0, select bank0
  3972     04E8  00A4               	movwf	___lldiv@dividend
  3973     04E9  160A  118A  2530  120A  118A  	fcall	___lldiv
  3974     04EE  0823               	movf	?___lldiv+3,w
  3975     04EF  1683               	bsf	3,5	;RP0=1, select bank1
  3976     04F0  00D8               	movwf	(sprintf@tmpval+3)^(0+128)
  3977     04F1  1283               	bcf	3,5	;RP0=0, select bank0
  3978     04F2  0822               	movf	?___lldiv+2,w
  3979     04F3  1683               	bsf	3,5	;RP0=1, select bank1
  3980     04F4  00D7               	movwf	(sprintf@tmpval+2)^(0+128)
  3981     04F5  1283               	bcf	3,5	;RP0=0, select bank0
  3982     04F6  0821               	movf	?___lldiv+1,w
  3983     04F7  1683               	bsf	3,5	;RP0=1, select bank1
  3984     04F8  00D6               	movwf	(sprintf@tmpval+1)^(0+128)
  3985     04F9  1283               	bcf	3,5	;RP0=0, select bank0
  3986     04FA  0820               	movf	?___lldiv,w
  3987     04FB  1683               	bsf	3,5	;RP0=1, select bank1
  3988     04FC  00D5               	movwf	sprintf@tmpval^(0+128)
  3989                           
  3990                           ;doprnt.c: 1256: tmpval.vd %= 10;
  3991     04FD  3000               	movlw	0
  3992     04FE  1283               	bcf	3,5	;RP0=0, select bank0
  3993     04FF  00B0               	movwf	___llmod@divisor+3
  3994     0500  3000               	movlw	0
  3995     0501  00AF               	movwf	___llmod@divisor+2
  3996     0502  3000               	movlw	0
  3997     0503  00AE               	movwf	___llmod@divisor+1
  3998     0504  300A               	movlw	10
  3999     0505  00AD               	movwf	___llmod@divisor
  4000     0506  1683               	bsf	3,5	;RP0=1, select bank1
  4001     0507  0858               	movf	(sprintf@tmpval+3)^(0+128),w
  4002     0508  1283               	bcf	3,5	;RP0=0, select bank0
  4003     0509  00B4               	movwf	___llmod@dividend+3
  4004     050A  1683               	bsf	3,5	;RP0=1, select bank1
  4005     050B  0857               	movf	(sprintf@tmpval+2)^(0+128),w
  4006     050C  1283               	bcf	3,5	;RP0=0, select bank0
  4007     050D  00B3               	movwf	___llmod@dividend+2
  4008     050E  1683               	bsf	3,5	;RP0=1, select bank1
  4009     050F  0856               	movf	(sprintf@tmpval+1)^(0+128),w
  4010     0510  1283               	bcf	3,5	;RP0=0, select bank0
  4011     0511  00B2               	movwf	___llmod@dividend+1
  4012     0512  1683               	bsf	3,5	;RP0=1, select bank1
  4013     0513  0855               	movf	sprintf@tmpval^(0+128),w
  4014     0514  1283               	bcf	3,5	;RP0=0, select bank0
  4015     0515  00B1               	movwf	___llmod@dividend
  4016     0516  160A  118A  2441  120A  118A  	fcall	___llmod
  4017     051B  0830               	movf	?___llmod+3,w
  4018     051C  1683               	bsf	3,5	;RP0=1, select bank1
  4019     051D  00D8               	movwf	(sprintf@tmpval+3)^(0+128)
  4020     051E  1283               	bcf	3,5	;RP0=0, select bank0
  4021     051F  082F               	movf	?___llmod+2,w
  4022     0520  1683               	bsf	3,5	;RP0=1, select bank1
  4023     0521  00D7               	movwf	(sprintf@tmpval+2)^(0+128)
  4024     0522  1283               	bcf	3,5	;RP0=0, select bank0
  4025     0523  082E               	movf	?___llmod+1,w
  4026     0524  1683               	bsf	3,5	;RP0=1, select bank1
  4027     0525  00D6               	movwf	(sprintf@tmpval+1)^(0+128)
  4028     0526  1283               	bcf	3,5	;RP0=0, select bank0
  4029     0527  082D               	movf	?___llmod,w
  4030     0528  1683               	bsf	3,5	;RP0=1, select bank1
  4031     0529  00D5               	movwf	sprintf@tmpval^(0+128)
  4032                           
  4033                           ;doprnt.c: 1257: ((*sp++ = ('0' + tmpval.vd)));
  4034     052A  1283               	bcf	3,5	;RP0=0, select bank0
  4035     052B  0858               	movf	sprintf@sp,w
  4036     052C  0084               	movwf	4
  4037     052D  1683               	bsf	3,5	;RP0=1, select bank1
  4038     052E  0855               	movf	sprintf@tmpval^(0+128),w
  4039     052F  3E30               	addlw	48
  4040     0530  1383               	bcf	3,7	;select IRP bank0
  4041     0531  0080               	movwf	0
  4042     0532  3001               	movlw	1
  4043     0533  1283               	bcf	3,5	;RP0=0, select bank0
  4044     0534  07D8               	addwf	sprintf@sp,f
  4045                           
  4046                           ;doprnt.c: 1258: val %= dpowers[c];
  4047     0535  1683               	bsf	3,5	;RP0=1, select bank1
  4048     0536  0862               	movf	sprintf@c^(0+128),w
  4049     0537  1283               	bcf	3,5	;RP0=0, select bank0
  4050     0538  00E0               	movwf	??_sprintf
  4051     0539  3001               	movlw	1
  4052     053A                     u6835:
  4053     053A  1003               	clrc
  4054     053B  0DE0               	rlf	??_sprintf,f
  4055     053C  3EFF               	addlw	-1
  4056     053D  1D03               	skipz
  4057     053E  2D3A               	goto	u6835
  4058     053F  1003               	clrc
  4059     0540  0D60               	rlf	??_sprintf,w
  4060     0541  3E60               	addlw	low (_dpowers| (0+32768))
  4061     0542  0084               	movwf	4
  4062     0543  3090               	movlw	high (_dpowers| (0+32768))
  4063     0544  1803               	skipnc
  4064     0545  3E01               	addlw	1
  4065     0546  00FF               	movwf	127
  4066     0547  160A  118A  2000  120A  118A  	fcall	stringtab
  4067     054C  00AD               	movwf	___llmod@divisor
  4068     054D  160A  118A  2000  120A  118A  	fcall	stringtab
  4069     0552  00AE               	movwf	___llmod@divisor+1
  4070     0553  160A  118A  2000  120A  118A  	fcall	stringtab
  4071     0558  00AF               	movwf	___llmod@divisor+2
  4072     0559  160A  118A  2000  120A  118A  	fcall	stringtab
  4073     055E  00B0               	movwf	___llmod@divisor+3
  4074     055F  1683               	bsf	3,5	;RP0=1, select bank1
  4075     0560  085C               	movf	(sprintf@val+3)^(0+128),w
  4076     0561  1283               	bcf	3,5	;RP0=0, select bank0
  4077     0562  00B4               	movwf	___llmod@dividend+3
  4078     0563  1683               	bsf	3,5	;RP0=1, select bank1
  4079     0564  085B               	movf	(sprintf@val+2)^(0+128),w
  4080     0565  1283               	bcf	3,5	;RP0=0, select bank0
  4081     0566  00B3               	movwf	___llmod@dividend+2
  4082     0567  1683               	bsf	3,5	;RP0=1, select bank1
  4083     0568  085A               	movf	(sprintf@val+1)^(0+128),w
  4084     0569  1283               	bcf	3,5	;RP0=0, select bank0
  4085     056A  00B2               	movwf	___llmod@dividend+1
  4086     056B  1683               	bsf	3,5	;RP0=1, select bank1
  4087     056C  0859               	movf	sprintf@val^(0+128),w
  4088     056D  1283               	bcf	3,5	;RP0=0, select bank0
  4089     056E  00B1               	movwf	___llmod@dividend
  4090     056F  160A  118A  2441  120A  118A  	fcall	___llmod
  4091     0574  0830               	movf	?___llmod+3,w
  4092     0575  1683               	bsf	3,5	;RP0=1, select bank1
  4093     0576  00DC               	movwf	(sprintf@val+3)^(0+128)
  4094     0577  1283               	bcf	3,5	;RP0=0, select bank0
  4095     0578  082F               	movf	?___llmod+2,w
  4096     0579  1683               	bsf	3,5	;RP0=1, select bank1
  4097     057A  00DB               	movwf	(sprintf@val+2)^(0+128)
  4098     057B  1283               	bcf	3,5	;RP0=0, select bank0
  4099     057C  082E               	movf	?___llmod+1,w
  4100     057D  1683               	bsf	3,5	;RP0=1, select bank1
  4101     057E  00DA               	movwf	(sprintf@val+1)^(0+128)
  4102     057F  1283               	bcf	3,5	;RP0=0, select bank0
  4103     0580  082D               	movf	?___llmod,w
  4104     0581  2CA9               	goto	L6
  4105     0582                     l4854:
  4106                           
  4107                           ;doprnt.c: 1262: ((*sp++ = ('0')));
  4108     0582  1283               	bcf	3,5	;RP0=0, select bank0
  4109     0583  0858               	movf	sprintf@sp,w
  4110     0584  0084               	movwf	4
  4111     0585  3030               	movlw	48
  4112     0586  1383               	bcf	3,7	;select IRP bank0
  4113     0587  0080               	movwf	0
  4114     0588  3001               	movlw	1
  4115     0589  07D8               	addwf	sprintf@sp,f
  4116                           
  4117                           ;doprnt.c: 1263: prec--;
  4118     058A  30FF               	movlw	255
  4119     058B  1683               	bsf	3,5	;RP0=1, select bank1
  4120     058C  07DD               	addwf	sprintf@prec^(0+128),f
  4121     058D  1803               	skipnc
  4122     058E  0ADE               	incf	(sprintf@prec+1)^(0+128),f
  4123     058F  30FF               	movlw	255
  4124     0590  07DE               	addwf	(sprintf@prec+1)^(0+128),f
  4125     0591                     l4860:
  4126     0591  085D               	movf	sprintf@prec^(0+128),w
  4127     0592  045E               	iorwf	(sprintf@prec+1)^(0+128),w
  4128     0593  1903               	btfsc	3,2
  4129     0594  2839               	goto	l4912
  4130     0595  2D82               	goto	l4854
  4131     0596                     l4862:
  4132                           
  4133                           ;doprnt.c: 1272: };doprnt.c: 1279: {;doprnt.c: 1285: val = (unsigned long)(*(int *)__va_
      +                          arg((*(int **)ap), (int)0));
  4134     0596  1683               	bsf	3,5	;RP0=1, select bank1
  4135     0597  0850               	movf	sprintf@ap^(0+128),w
  4136     0598  0084               	movwf	4
  4137     0599  1383               	bcf	3,7	;select IRP bank0
  4138     059A  0800               	movf	0,w
  4139     059B  1283               	bcf	3,5	;RP0=0, select bank0
  4140     059C  00E0               	movwf	??_sprintf
  4141     059D  0A84               	incf	4,f
  4142     059E  0800               	movf	0,w
  4143     059F  00E1               	movwf	??_sprintf+1
  4144     05A0  0860               	movf	??_sprintf,w
  4145     05A1  1683               	bsf	3,5	;RP0=1, select bank1
  4146     05A2  00D9               	movwf	sprintf@val^(0+128)
  4147     05A3  1283               	bcf	3,5	;RP0=0, select bank0
  4148     05A4  0861               	movf	??_sprintf+1,w
  4149     05A5  1683               	bsf	3,5	;RP0=1, select bank1
  4150     05A6  00DA               	movwf	(sprintf@val+1)^(0+128)
  4151     05A7  3000               	movlw	0
  4152     05A8  1BDA               	btfsc	(sprintf@val+1)^(0+128),7
  4153     05A9  30FF               	movlw	255
  4154     05AA  00DB               	movwf	(sprintf@val+2)^(0+128)
  4155     05AB  00DC               	movwf	(sprintf@val+3)^(0+128)
  4156     05AC  3002               	movlw	2
  4157     05AD  07D0               	addwf	sprintf@ap^(0+128),f
  4158                           
  4159                           ;doprnt.c: 1287: if((long)val < 0) {
  4160     05AE  1FDC               	btfss	(sprintf@val+3)^(0+128),7
  4161     05AF  2DBF               	goto	l4872
  4162                           
  4163                           ;doprnt.c: 1288: flag |= 0x03;
  4164     05B0  3003               	movlw	3
  4165     05B1  04D1               	iorwf	sprintf@flag^(0+128),f
  4166     05B2  3000               	movlw	0
  4167     05B3  04D2               	iorwf	(sprintf@flag+1)^(0+128),f
  4168                           
  4169                           ;doprnt.c: 1289: val = -val;
  4170     05B4  09D9               	comf	sprintf@val^(0+128),f
  4171     05B5  09DA               	comf	(sprintf@val+1)^(0+128),f
  4172     05B6  09DB               	comf	(sprintf@val+2)^(0+128),f
  4173     05B7  09DC               	comf	(sprintf@val+3)^(0+128),f
  4174     05B8  0AD9               	incf	sprintf@val^(0+128),f
  4175     05B9  1903               	skipnz
  4176     05BA  0ADA               	incf	(sprintf@val+1)^(0+128),f
  4177     05BB  1903               	skipnz
  4178     05BC  0ADB               	incf	(sprintf@val+2)^(0+128),f
  4179     05BD  1903               	skipnz
  4180     05BE  0ADC               	incf	(sprintf@val+3)^(0+128),f
  4181     05BF                     l4872:
  4182                           
  4183                           ;doprnt.c: 1290: };doprnt.c: 1292: };doprnt.c: 1316: if(prec == 0 && val == 0)
  4184     05BF  085D               	movf	sprintf@prec^(0+128),w
  4185     05C0  045E               	iorwf	(sprintf@prec+1)^(0+128),w
  4186     05C1  1D03               	btfss	3,2
  4187     05C2  2DCF               	goto	l4878
  4188     05C3  085C               	movf	(sprintf@val+3)^(0+128),w
  4189     05C4  045B               	iorwf	(sprintf@val+2)^(0+128),w
  4190     05C5  045A               	iorwf	(sprintf@val+1)^(0+128),w
  4191     05C6  0459               	iorwf	sprintf@val^(0+128),w
  4192     05C7  1D03               	skipz
  4193     05C8  2DCF               	goto	l4878
  4194                           
  4195                           ;doprnt.c: 1317: prec++;
  4196     05C9  3001               	movlw	1
  4197     05CA  07DD               	addwf	sprintf@prec^(0+128),f
  4198     05CB  1803               	skipnc
  4199     05CC  0ADE               	incf	(sprintf@prec+1)^(0+128),f
  4200     05CD  3000               	movlw	0
  4201     05CE  07DE               	addwf	(sprintf@prec+1)^(0+128),f
  4202     05CF                     l4878:
  4203                           
  4204                           ;doprnt.c: 1331: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4205     05CF  3001               	movlw	1
  4206     05D0  00E2               	movwf	sprintf@c^(0+128)
  4207     05D1                     l4884:
  4208                           
  4209                           ;doprnt.c: 1332: if(val < dpowers[c])
  4210     05D1  0862               	movf	sprintf@c^(0+128),w
  4211     05D2  1283               	bcf	3,5	;RP0=0, select bank0
  4212     05D3  00E0               	movwf	??_sprintf
  4213     05D4  3001               	movlw	1
  4214     05D5                     u6895:
  4215     05D5  1003               	clrc
  4216     05D6  0DE0               	rlf	??_sprintf,f
  4217     05D7  3EFF               	addlw	-1
  4218     05D8  1D03               	skipz
  4219     05D9  2DD5               	goto	u6895
  4220     05DA  1003               	clrc
  4221     05DB  0D60               	rlf	??_sprintf,w
  4222     05DC  3E60               	addlw	low (_dpowers| (0+32768))
  4223     05DD  0084               	movwf	4
  4224     05DE  3090               	movlw	high (_dpowers| (0+32768))
  4225     05DF  1803               	skipnc
  4226     05E0  3E01               	addlw	1
  4227     05E1  00FF               	movwf	127
  4228     05E2  160A  118A  2000  120A  118A  	fcall	stringtab
  4229     05E7  00E1               	movwf	??_sprintf+1
  4230     05E8  160A  118A  2000  120A  118A  	fcall	stringtab
  4231     05ED  00E2               	movwf	??_sprintf+2
  4232     05EE  160A  118A  2000  120A  118A  	fcall	stringtab
  4233     05F3  00E3               	movwf	??_sprintf+3
  4234     05F4  160A  118A  2000  120A  118A  	fcall	stringtab
  4235     05F9  00E4               	movwf	??_sprintf+4
  4236     05FA  0864               	movf	??_sprintf+4,w
  4237     05FB  1683               	bsf	3,5	;RP0=1, select bank1
  4238     05FC  025C               	subwf	(sprintf@val+3)^(0+128),w
  4239     05FD  1D03               	skipz
  4240     05FE  2E0F               	goto	u6905
  4241     05FF  1283               	bcf	3,5	;RP0=0, select bank0
  4242     0600  0863               	movf	??_sprintf+3,w
  4243     0601  1683               	bsf	3,5	;RP0=1, select bank1
  4244     0602  025B               	subwf	(sprintf@val+2)^(0+128),w
  4245     0603  1D03               	skipz
  4246     0604  2E0F               	goto	u6905
  4247     0605  1283               	bcf	3,5	;RP0=0, select bank0
  4248     0606  0862               	movf	??_sprintf+2,w
  4249     0607  1683               	bsf	3,5	;RP0=1, select bank1
  4250     0608  025A               	subwf	(sprintf@val+1)^(0+128),w
  4251     0609  1D03               	skipz
  4252     060A  2E0F               	goto	u6905
  4253     060B  1283               	bcf	3,5	;RP0=0, select bank0
  4254     060C  0861               	movf	??_sprintf+1,w
  4255     060D  1683               	bsf	3,5	;RP0=1, select bank1
  4256     060E  0259               	subwf	sprintf@val^(0+128),w
  4257     060F                     u6905:
  4258     060F  1C03               	btfss	3,0
  4259     0610  2E17               	goto	l4890
  4260     0611  3001               	movlw	1
  4261     0612  07E2               	addwf	sprintf@c^(0+128),f
  4262     0613  300A               	movlw	10
  4263     0614  0662               	xorwf	sprintf@c^(0+128),w
  4264     0615  1D03               	btfss	3,2
  4265     0616  2DD1               	goto	l4884
  4266     0617                     l4890:
  4267                           
  4268                           ;doprnt.c: 1365: if(c < prec)
  4269     0617  085E               	movf	(sprintf@prec+1)^(0+128),w
  4270     0618  3A80               	xorlw	128
  4271     0619  3C80               	sublw	128
  4272     061A  1D03               	skipz
  4273     061B  2E1E               	goto	u6925
  4274     061C  085D               	movf	sprintf@prec^(0+128),w
  4275     061D  0262               	subwf	sprintf@c^(0+128),w
  4276     061E                     u6925:
  4277     061E  1C03               	btfss	3,0
  4278     061F  2E3C               	goto	l4898
  4279                           
  4280                           ;doprnt.c: 1367: else if(prec < c)
  4281     0620  1683               	bsf	3,5	;RP0=1, select bank1
  4282     0621  1303               	bcf	3,6	;RP1=0, select bank1
  4283     0622  085E               	movf	(sprintf@prec+1)^(0+128),w
  4284     0623  3A80               	xorlw	128
  4285     0624  1283               	bcf	3,5	;RP0=0, select bank0
  4286     0625  00E0               	movwf	??_sprintf
  4287     0626  3080               	movlw	128
  4288     0627  0260               	subwf	??_sprintf,w
  4289     0628  1D03               	skipz
  4290     0629  2E2D               	goto	u6935
  4291     062A  1683               	bsf	3,5	;RP0=1, select bank1
  4292     062B  0862               	movf	sprintf@c^(0+128),w
  4293     062C  025D               	subwf	sprintf@prec^(0+128),w
  4294     062D                     u6935:
  4295     062D  1803               	skipnc
  4296     062E  2E3C               	goto	l4898
  4297                           
  4298                           ;doprnt.c: 1368: prec = c;
  4299     062F  1683               	bsf	3,5	;RP0=1, select bank1
  4300     0630  1303               	bcf	3,6	;RP1=0, select bank1
  4301     0631  0862               	movf	sprintf@c^(0+128),w
  4302     0632  1283               	bcf	3,5	;RP0=0, select bank0
  4303     0633  00E0               	movwf	??_sprintf
  4304     0634  01E1               	clrf	??_sprintf+1
  4305     0635  0860               	movf	??_sprintf,w
  4306     0636  1683               	bsf	3,5	;RP0=1, select bank1
  4307     0637  00DD               	movwf	sprintf@prec^(0+128)
  4308     0638  1283               	bcf	3,5	;RP0=0, select bank0
  4309     0639  0861               	movf	??_sprintf+1,w
  4310     063A  1683               	bsf	3,5	;RP0=1, select bank1
  4311     063B  00DE               	movwf	(sprintf@prec+1)^(0+128)
  4312     063C                     l4898:
  4313                           
  4314                           ;doprnt.c: 1448: {;doprnt.c: 1464: if(flag & 0x03)
  4315     063C  1683               	bsf	3,5	;RP0=1, select bank1
  4316     063D  1303               	bcf	3,6	;RP1=0, select bank1
  4317     063E  0851               	movf	sprintf@flag^(0+128),w
  4318     063F  3903               	andlw	3
  4319     0640  1903               	btfsc	3,2
  4320     0641  2E4B               	goto	l4910
  4321                           
  4322                           ;doprnt.c: 1465: ((*sp++ = ('-')));
  4323     0642  1283               	bcf	3,5	;RP0=0, select bank0
  4324     0643  0858               	movf	sprintf@sp,w
  4325     0644  0084               	movwf	4
  4326     0645  302D               	movlw	45
  4327     0646                     L8:
  4328     0646  1383               	bcf	3,7	;select IRP bank0
  4329     0647  0080               	movwf	0
  4330     0648  3001               	movlw	1
  4331     0649  1283               	bcf	3,5	;RP0=0, select bank0
  4332     064A  07D8               	addwf	sprintf@sp,f
  4333     064B                     l4910:
  4334     064B  30FF               	movlw	255
  4335     064C  1683               	bsf	3,5	;RP0=1, select bank1
  4336     064D  07DD               	addwf	sprintf@prec^(0+128),f
  4337     064E  1803               	skipnc
  4338     064F  0ADE               	incf	(sprintf@prec+1)^(0+128),f
  4339     0650  30FF               	movlw	255
  4340     0651  07DE               	addwf	(sprintf@prec+1)^(0+128),f
  4341     0652  0A5D               	incf	sprintf@prec^(0+128),w
  4342     0653  1903               	btfsc	3,2
  4343     0654  0A5E               	incf	(sprintf@prec+1)^(0+128),w
  4344     0655  1903               	btfsc	3,2
  4345     0656  2839               	goto	l4912
  4346                           
  4347                           ;doprnt.c: 1504: {;doprnt.c: 1515: c = (val / dpowers[(unsigned int)prec]) % 10 + '0';
  4348     0657  3000               	movlw	0
  4349     0658  1283               	bcf	3,5	;RP0=0, select bank0
  4350     0659  00B0               	movwf	___llmod@divisor+3
  4351     065A  3000               	movlw	0
  4352     065B  00AF               	movwf	___llmod@divisor+2
  4353     065C  3000               	movlw	0
  4354     065D  00AE               	movwf	___llmod@divisor+1
  4355     065E  300A               	movlw	10
  4356     065F  00AD               	movwf	___llmod@divisor
  4357     0660  1683               	bsf	3,5	;RP0=1, select bank1
  4358     0661  085D               	movf	sprintf@prec^(0+128),w
  4359     0662  1283               	bcf	3,5	;RP0=0, select bank0
  4360     0663  00E0               	movwf	??_sprintf
  4361     0664  3001               	movlw	1
  4362     0665                     u6955:
  4363     0665  1003               	clrc
  4364     0666  0DE0               	rlf	??_sprintf,f
  4365     0667  3EFF               	addlw	-1
  4366     0668  1D03               	skipz
  4367     0669  2E65               	goto	u6955
  4368     066A  1003               	clrc
  4369     066B  0D60               	rlf	??_sprintf,w
  4370     066C  3E60               	addlw	low (_dpowers| (0+32768))
  4371     066D  0084               	movwf	4
  4372     066E  3090               	movlw	high (_dpowers| (0+32768))
  4373     066F  1803               	skipnc
  4374     0670  3E01               	addlw	1
  4375     0671  00FF               	movwf	127
  4376     0672  160A  118A  2000  120A  118A  	fcall	stringtab
  4377     0677  00A0               	movwf	___lldiv@divisor
  4378     0678  160A  118A  2000  120A  118A  	fcall	stringtab
  4379     067D  00A1               	movwf	___lldiv@divisor+1
  4380     067E  160A  118A  2000  120A  118A  	fcall	stringtab
  4381     0683  00A2               	movwf	___lldiv@divisor+2
  4382     0684  160A  118A  2000  120A  118A  	fcall	stringtab
  4383     0689  00A3               	movwf	___lldiv@divisor+3
  4384     068A  1683               	bsf	3,5	;RP0=1, select bank1
  4385     068B  085C               	movf	(sprintf@val+3)^(0+128),w
  4386     068C  1283               	bcf	3,5	;RP0=0, select bank0
  4387     068D  00A7               	movwf	___lldiv@dividend+3
  4388     068E  1683               	bsf	3,5	;RP0=1, select bank1
  4389     068F  085B               	movf	(sprintf@val+2)^(0+128),w
  4390     0690  1283               	bcf	3,5	;RP0=0, select bank0
  4391     0691  00A6               	movwf	___lldiv@dividend+2
  4392     0692  1683               	bsf	3,5	;RP0=1, select bank1
  4393     0693  085A               	movf	(sprintf@val+1)^(0+128),w
  4394     0694  1283               	bcf	3,5	;RP0=0, select bank0
  4395     0695  00A5               	movwf	___lldiv@dividend+1
  4396     0696  1683               	bsf	3,5	;RP0=1, select bank1
  4397     0697  0859               	movf	sprintf@val^(0+128),w
  4398     0698  1283               	bcf	3,5	;RP0=0, select bank0
  4399     0699  00A4               	movwf	___lldiv@dividend
  4400     069A  160A  118A  2530  120A  118A  	fcall	___lldiv
  4401     069F  0823               	movf	?___lldiv+3,w
  4402     06A0  00B4               	movwf	___llmod@dividend+3
  4403     06A1  0822               	movf	?___lldiv+2,w
  4404     06A2  00B3               	movwf	___llmod@dividend+2
  4405     06A3  0821               	movf	?___lldiv+1,w
  4406     06A4  00B2               	movwf	___llmod@dividend+1
  4407     06A5  0820               	movf	?___lldiv,w
  4408     06A6  00B1               	movwf	___llmod@dividend
  4409     06A7  160A  118A  2441  120A  118A  	fcall	___llmod
  4410     06AC  082D               	movf	?___llmod,w
  4411     06AD  3E30               	addlw	48
  4412     06AE  1683               	bsf	3,5	;RP0=1, select bank1
  4413     06AF  00E2               	movwf	sprintf@c^(0+128)
  4414                           
  4415                           ;doprnt.c: 1549: };doprnt.c: 1550: ((*sp++ = (c)));
  4416     06B0  1283               	bcf	3,5	;RP0=0, select bank0
  4417     06B1  0858               	movf	sprintf@sp,w
  4418     06B2  0084               	movwf	4
  4419     06B3  1683               	bsf	3,5	;RP0=1, select bank1
  4420     06B4  0862               	movf	sprintf@c^(0+128),w
  4421     06B5  2E46               	goto	L8
  4422     06B6                     l4914:
  4423                           
  4424                           ;doprnt.c: 1564: *sp = 0;
  4425     06B6  1283               	bcf	3,5	;RP0=0, select bank0
  4426     06B7  0858               	movf	sprintf@sp,w
  4427     06B8  0084               	movwf	4
  4428     06B9  1383               	bcf	3,7	;select IRP bank0
  4429     06BA  0180               	clrf	0
  4430     06BB  0008               	return
  4431     06BC                     __end_of_sprintf:
  4432                           
  4433                           	psect	text6
  4434     0D71                     __ptext6:	
  4435 ;; *************** function _scale *****************
  4436 ;; Defined at:
  4437 ;;		line 433 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c90\common\doprnt.c"
  4438 ;; Parameters:    Size  Location     Type
  4439 ;;  scl             1    wreg     char 
  4440 ;; Auto vars:     Size  Location     Type
  4441 ;;  scl             1   34[BANK0 ] char 
  4442 ;; Return value:  Size  Location     Type
  4443 ;;                  3   28[BANK0 ] char 
  4444 ;; Registers used:
  4445 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4446 ;; Tracked objects:
  4447 ;;		On entry : 300/100
  4448 ;;		On exit  : 300/0
  4449 ;;		Unchanged: 0/0
  4450 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4451 ;;      Params:         0       3       0       0       0
  4452 ;;      Locals:         0       4       0       0       0
  4453 ;;      Temps:          0       0       0       0       0
  4454 ;;      Totals:         0       7       0       0       0
  4455 ;;Total ram usage:        7 bytes
  4456 ;; Hardware stack levels used: 1
  4457 ;; Hardware stack levels required when called: 3
  4458 ;; This function calls:
  4459 ;;		___awdiv
  4460 ;;		___awmod
  4461 ;;		___bmul
  4462 ;;		___ftmul
  4463 ;; This function is called by:
  4464 ;;		_sprintf
  4465 ;; This function uses a non-reentrant model
  4466 ;;
  4467                           
  4468     0D71                     _scale:	
  4469                           ;psect for function _scale
  4470                           
  4471                           
  4472                           ;incstack = 0
  4473                           ; Regs used in _scale: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4474                           ;scale@scl stored from wreg
  4475     0D71  1283               	bcf	3,5	;RP0=0, select bank0
  4476     0D72  00C2               	movwf	scale@scl
  4477                           
  4478                           ;doprnt.c: 436: if(scl < 0) {
  4479     0D73  1FC2               	btfss	scale@scl,7
  4480     0D74  2EBC               	goto	l4290
  4481                           
  4482                           ;doprnt.c: 437: scl = -scl;
  4483     0D75  0342               	decf	scale@scl,w
  4484     0D76  3AFF               	xorlw	255
  4485     0D77  00C2               	movwf	scale@scl
  4486                           
  4487                           ;doprnt.c: 438: if(scl>=110)
  4488     0D78  0842               	movf	scale@scl,w
  4489     0D79  3A80               	xorlw	128
  4490     0D7A  3E12               	addlw	-238
  4491     0D7B  1C03               	skipc
  4492     0D7C  2E31               	goto	l4280
  4493                           
  4494                           ;doprnt.c: 439: return _npowers_[(unsigned char)(scl/100+18)] * _npowers_[(unsigned char
      +                          )((scl%100)/10+9)] * _npowers_[(unsigned char)(scl%10)];
  4495     0D7D  3003               	movlw	3
  4496     0D7E  00AA               	movwf	___bmul@multiplicand
  4497     0D7F  300A               	movlw	10
  4498     0D80  00A2               	movwf	___awdiv@divisor
  4499     0D81  3000               	movlw	0
  4500     0D82  00A3               	movwf	___awdiv@divisor+1
  4501     0D83  0842               	movf	scale@scl,w
  4502     0D84  00F5               	movwf	___awmod@dividend
  4503     0D85  01F6               	clrf	___awmod@dividend+1
  4504     0D86  1BF5               	btfsc	___awmod@dividend,7
  4505     0D87  03F6               	decf	___awmod@dividend+1,f
  4506     0D88  3064               	movlw	100
  4507     0D89  00F3               	movwf	___awmod@divisor
  4508     0D8A  3000               	movlw	0
  4509     0D8B  00F4               	movwf	___awmod@divisor+1
  4510     0D8C  160A  118A  23F8  120A  158A  	fcall	___awmod
  4511     0D91  0874               	movf	?___awmod+1,w
  4512     0D92  00A5               	movwf	___awdiv@dividend+1
  4513     0D93  0873               	movf	?___awmod,w
  4514     0D94  00A4               	movwf	___awdiv@dividend
  4515     0D95  160A  118A  24DB  120A  158A  	fcall	___awdiv
  4516     0D9A  0822               	movf	?___awdiv,w
  4517     0D9B  3E09               	addlw	9
  4518     0D9C  160A  158A  2766  120A  158A  	fcall	___bmul
  4519     0DA1  3E39               	addlw	low (__npowers_| (0+32768))
  4520     0DA2  0084               	movwf	4
  4521     0DA3  3090               	movlw	high (__npowers_| (0+32768))
  4522     0DA4  1803               	skipnc
  4523     0DA5  3E01               	addlw	1
  4524     0DA6  00FF               	movwf	127
  4525     0DA7  160A  118A  2000  120A  158A  	fcall	stringtab
  4526     0DAC  00AD               	movwf	___ftmul@f1
  4527     0DAD  160A  118A  2000  120A  158A  	fcall	stringtab
  4528     0DB2  00AE               	movwf	___ftmul@f1+1
  4529     0DB3  160A  118A  2000  120A  158A  	fcall	stringtab
  4530     0DB8  00AF               	movwf	___ftmul@f1+2
  4531     0DB9  3003               	movlw	3
  4532     0DBA  00AA               	movwf	___bmul@multiplicand
  4533     0DBB  3064               	movlw	100
  4534     0DBC  00A2               	movwf	___awdiv@divisor
  4535     0DBD  3000               	movlw	0
  4536     0DBE  00A3               	movwf	___awdiv@divisor+1
  4537     0DBF  0842               	movf	scale@scl,w
  4538     0DC0  00A4               	movwf	___awdiv@dividend
  4539     0DC1  01A5               	clrf	___awdiv@dividend+1
  4540     0DC2  1BA4               	btfsc	___awdiv@dividend,7
  4541     0DC3  03A5               	decf	___awdiv@dividend+1,f
  4542     0DC4  160A  118A  24DB  120A  158A  	fcall	___awdiv
  4543     0DC9  0822               	movf	?___awdiv,w
  4544     0DCA  3E12               	addlw	18
  4545     0DCB  160A  158A  2766  120A  158A  	fcall	___bmul
  4546     0DD0  3E39               	addlw	low (__npowers_| (0+32768))
  4547     0DD1  0084               	movwf	4
  4548     0DD2  3090               	movlw	high (__npowers_| (0+32768))
  4549     0DD3  1803               	skipnc
  4550     0DD4  3E01               	addlw	1
  4551     0DD5  00FF               	movwf	127
  4552     0DD6  160A  118A  2000  120A  158A  	fcall	stringtab
  4553     0DDB  00B0               	movwf	___ftmul@f2
  4554     0DDC  160A  118A  2000  120A  158A  	fcall	stringtab
  4555     0DE1  00B1               	movwf	___ftmul@f2+1
  4556     0DE2  160A  118A  2000  120A  158A  	fcall	stringtab
  4557     0DE7  00B2               	movwf	___ftmul@f2+2
  4558     0DE8  160A  118A  2761  120A  158A  	fcall	___ftmul
  4559     0DED  082D               	movf	?___ftmul,w
  4560     0DEE  00BF               	movwf	_scale$1102
  4561     0DEF  082E               	movf	?___ftmul+1,w
  4562     0DF0  00C0               	movwf	_scale$1102+1
  4563     0DF1  082F               	movf	?___ftmul+2,w
  4564     0DF2  00C1               	movwf	_scale$1102+2
  4565                           
  4566                           ;doprnt.c: 439: return _npowers_[(unsigned char)(scl/100+18)] * _npowers_[(unsigned char
      +                          )((scl%100)/10+9)] * _npowers_[(unsigned char)(scl%10)];
  4567     0DF3  3003               	movlw	3
  4568     0DF4  00AA               	movwf	___bmul@multiplicand
  4569     0DF5  0842               	movf	scale@scl,w
  4570     0DF6  00F5               	movwf	___awmod@dividend
  4571     0DF7  01F6               	clrf	___awmod@dividend+1
  4572     0DF8  1BF5               	btfsc	___awmod@dividend,7
  4573     0DF9  03F6               	decf	___awmod@dividend+1,f
  4574     0DFA  300A               	movlw	10
  4575     0DFB  00F3               	movwf	___awmod@divisor
  4576     0DFC  3000               	movlw	0
  4577     0DFD  00F4               	movwf	___awmod@divisor+1
  4578     0DFE  160A  118A  23F8  120A  158A  	fcall	___awmod
  4579     0E03  0873               	movf	?___awmod,w
  4580     0E04  160A  158A  2766  120A  158A  	fcall	___bmul
  4581     0E09  3E39               	addlw	low (__npowers_| (0+32768))
  4582     0E0A  0084               	movwf	4
  4583     0E0B  3090               	movlw	high (__npowers_| (0+32768))
  4584     0E0C  1803               	skipnc
  4585     0E0D  3E01               	addlw	1
  4586     0E0E  00FF               	movwf	127
  4587     0E0F  160A  118A  2000  120A  158A  	fcall	stringtab
  4588     0E14  00AD               	movwf	___ftmul@f1
  4589     0E15  160A  118A  2000  120A  158A  	fcall	stringtab
  4590     0E1A  00AE               	movwf	___ftmul@f1+1
  4591     0E1B  160A  118A  2000  120A  158A  	fcall	stringtab
  4592     0E20  00AF               	movwf	___ftmul@f1+2
  4593     0E21  083F               	movf	_scale$1102,w
  4594     0E22  00B0               	movwf	___ftmul@f2
  4595     0E23  0840               	movf	_scale$1102+1,w
  4596     0E24  00B1               	movwf	___ftmul@f2+1
  4597     0E25  0841               	movf	_scale$1102+2,w
  4598     0E26  00B2               	movwf	___ftmul@f2+2
  4599     0E27  160A  118A  2761   	fcall	___ftmul
  4600     0E2A  082D               	movf	?___ftmul,w
  4601     0E2B  00BC               	movwf	?_scale
  4602     0E2C  082E               	movf	?___ftmul+1,w
  4603     0E2D  00BD               	movwf	?_scale+1
  4604     0E2E  082F               	movf	?___ftmul+2,w
  4605     0E2F  00BE               	movwf	?_scale+2
  4606     0E30  0008               	return
  4607     0E31                     l4280:
  4608                           
  4609                           ;doprnt.c: 440: else if(scl > 10)
  4610     0E31  0842               	movf	scale@scl,w
  4611     0E32  3A80               	xorlw	128
  4612     0E33  3E75               	addlw	-139
  4613     0E34  1C03               	skipc
  4614     0E35  2E9D               	goto	l4286
  4615                           
  4616                           ;doprnt.c: 441: return _npowers_[(unsigned char)(scl/10+9)] * _npowers_[(unsigned char)(
      +                          scl%10)];
  4617     0E36  3003               	movlw	3
  4618     0E37  00AA               	movwf	___bmul@multiplicand
  4619     0E38  0842               	movf	scale@scl,w
  4620     0E39  00F5               	movwf	___awmod@dividend
  4621     0E3A  01F6               	clrf	___awmod@dividend+1
  4622     0E3B  1BF5               	btfsc	___awmod@dividend,7
  4623     0E3C  03F6               	decf	___awmod@dividend+1,f
  4624     0E3D  300A               	movlw	10
  4625     0E3E  00F3               	movwf	___awmod@divisor
  4626     0E3F  3000               	movlw	0
  4627     0E40  00F4               	movwf	___awmod@divisor+1
  4628     0E41  160A  118A  23F8  120A  158A  	fcall	___awmod
  4629     0E46  0873               	movf	?___awmod,w
  4630     0E47  160A  158A  2766  120A  158A  	fcall	___bmul
  4631     0E4C  3E39               	addlw	low (__npowers_| (0+32768))
  4632     0E4D  0084               	movwf	4
  4633     0E4E  3090               	movlw	high (__npowers_| (0+32768))
  4634     0E4F  1803               	skipnc
  4635     0E50  3E01               	addlw	1
  4636     0E51  00FF               	movwf	127
  4637     0E52  160A  118A  2000  120A  158A  	fcall	stringtab
  4638     0E57  00AD               	movwf	___ftmul@f1
  4639     0E58  160A  118A  2000  120A  158A  	fcall	stringtab
  4640     0E5D  00AE               	movwf	___ftmul@f1+1
  4641     0E5E  160A  118A  2000  120A  158A  	fcall	stringtab
  4642     0E63  00AF               	movwf	___ftmul@f1+2
  4643     0E64  3003               	movlw	3
  4644     0E65  00AA               	movwf	___bmul@multiplicand
  4645     0E66  300A               	movlw	10
  4646     0E67  00A2               	movwf	___awdiv@divisor
  4647     0E68  3000               	movlw	0
  4648     0E69  00A3               	movwf	___awdiv@divisor+1
  4649     0E6A  0842               	movf	scale@scl,w
  4650     0E6B  00A4               	movwf	___awdiv@dividend
  4651     0E6C  01A5               	clrf	___awdiv@dividend+1
  4652     0E6D  1BA4               	btfsc	___awdiv@dividend,7
  4653     0E6E  03A5               	decf	___awdiv@dividend+1,f
  4654     0E6F  160A  118A  24DB  120A  158A  	fcall	___awdiv
  4655     0E74  0822               	movf	?___awdiv,w
  4656     0E75  3E09               	addlw	9
  4657     0E76  160A  158A  2766  120A  158A  	fcall	___bmul
  4658     0E7B  3E39               	addlw	low (__npowers_| (0+32768))
  4659     0E7C  0084               	movwf	4
  4660     0E7D  3090               	movlw	high (__npowers_| (0+32768))
  4661     0E7E  1803               	skipnc
  4662     0E7F  3E01               	addlw	1
  4663     0E80  00FF               	movwf	127
  4664     0E81  160A  118A  2000  120A  158A  	fcall	stringtab
  4665     0E86  00B0               	movwf	___ftmul@f2
  4666     0E87  160A  118A  2000  120A  158A  	fcall	stringtab
  4667     0E8C  00B1               	movwf	___ftmul@f2+1
  4668     0E8D  160A  118A  2000  120A  158A  	fcall	stringtab
  4669     0E92  00B2               	movwf	___ftmul@f2+2
  4670     0E93  160A  118A  2761   	fcall	___ftmul
  4671     0E96  082D               	movf	?___ftmul,w
  4672     0E97  00BC               	movwf	?_scale
  4673     0E98  082E               	movf	?___ftmul+1,w
  4674     0E99  00BD               	movwf	?_scale+1
  4675     0E9A  082F               	movf	?___ftmul+2,w
  4676     0E9B  00BE               	movwf	?_scale+2
  4677     0E9C  0008               	return
  4678     0E9D                     l4286:
  4679                           
  4680                           ;doprnt.c: 442: return _npowers_[(unsigned char)scl];
  4681     0E9D  3003               	movlw	3
  4682     0E9E  00AA               	movwf	___bmul@multiplicand
  4683     0E9F  0842               	movf	scale@scl,w
  4684     0EA0  160A  158A  2766  120A  158A  	fcall	___bmul
  4685     0EA5  3E39               	addlw	low (__npowers_| (0+32768))
  4686     0EA6  0084               	movwf	4
  4687     0EA7  3090               	movlw	high (__npowers_| (0+32768))
  4688     0EA8  1803               	skipnc
  4689     0EA9  3E01               	addlw	1
  4690     0EAA  00FF               	movwf	127
  4691     0EAB  160A  118A  2000  120A  158A  	fcall	stringtab
  4692     0EB0  00BC               	movwf	?_scale
  4693     0EB1  160A  118A  2000  120A  158A  	fcall	stringtab
  4694     0EB6  00BD               	movwf	?_scale+1
  4695     0EB7  160A  118A  2000   	fcall	stringtab
  4696     0EBA  00BE               	movwf	?_scale+2
  4697     0EBB  0008               	return
  4698     0EBC                     l4290:
  4699                           
  4700                           ;doprnt.c: 443: };doprnt.c: 444: if(scl>=110)
  4701     0EBC  0842               	movf	scale@scl,w
  4702     0EBD  3A80               	xorlw	128
  4703     0EBE  3E12               	addlw	-238
  4704     0EBF  1C03               	skipc
  4705     0EC0  2F75               	goto	l4298
  4706                           
  4707                           ;doprnt.c: 445: return _powers_[(unsigned char)(scl/100+18)] * _powers_[(unsigned char)(
      +                          (scl%100)/10+9)] * _powers_[(unsigned char)(scl%10)];
  4708     0EC1  3003               	movlw	3
  4709     0EC2  00AA               	movwf	___bmul@multiplicand
  4710     0EC3  300A               	movlw	10
  4711     0EC4  00A2               	movwf	___awdiv@divisor
  4712     0EC5  3000               	movlw	0
  4713     0EC6  00A3               	movwf	___awdiv@divisor+1
  4714     0EC7  0842               	movf	scale@scl,w
  4715     0EC8  00F5               	movwf	___awmod@dividend
  4716     0EC9  01F6               	clrf	___awmod@dividend+1
  4717     0ECA  1BF5               	btfsc	___awmod@dividend,7
  4718     0ECB  03F6               	decf	___awmod@dividend+1,f
  4719     0ECC  3064               	movlw	100
  4720     0ECD  00F3               	movwf	___awmod@divisor
  4721     0ECE  3000               	movlw	0
  4722     0ECF  00F4               	movwf	___awmod@divisor+1
  4723     0ED0  160A  118A  23F8  120A  158A  	fcall	___awmod
  4724     0ED5  0874               	movf	?___awmod+1,w
  4725     0ED6  00A5               	movwf	___awdiv@dividend+1
  4726     0ED7  0873               	movf	?___awmod,w
  4727     0ED8  00A4               	movwf	___awdiv@dividend
  4728     0ED9  160A  118A  24DB  120A  158A  	fcall	___awdiv
  4729     0EDE  0822               	movf	?___awdiv,w
  4730     0EDF  3E09               	addlw	9
  4731     0EE0  160A  158A  2766  120A  158A  	fcall	___bmul
  4732     0EE5  3E12               	addlw	low (__powers_| (0+32768))
  4733     0EE6  0084               	movwf	4
  4734     0EE7  3090               	movlw	high (__powers_| (0+32768))
  4735     0EE8  1803               	skipnc
  4736     0EE9  3E01               	addlw	1
  4737     0EEA  00FF               	movwf	127
  4738     0EEB  160A  118A  2000  120A  158A  	fcall	stringtab
  4739     0EF0  00AD               	movwf	___ftmul@f1
  4740     0EF1  160A  118A  2000  120A  158A  	fcall	stringtab
  4741     0EF6  00AE               	movwf	___ftmul@f1+1
  4742     0EF7  160A  118A  2000  120A  158A  	fcall	stringtab
  4743     0EFC  00AF               	movwf	___ftmul@f1+2
  4744     0EFD  3003               	movlw	3
  4745     0EFE  00AA               	movwf	___bmul@multiplicand
  4746     0EFF  3064               	movlw	100
  4747     0F00  00A2               	movwf	___awdiv@divisor
  4748     0F01  3000               	movlw	0
  4749     0F02  00A3               	movwf	___awdiv@divisor+1
  4750     0F03  0842               	movf	scale@scl,w
  4751     0F04  00A4               	movwf	___awdiv@dividend
  4752     0F05  01A5               	clrf	___awdiv@dividend+1
  4753     0F06  1BA4               	btfsc	___awdiv@dividend,7
  4754     0F07  03A5               	decf	___awdiv@dividend+1,f
  4755     0F08  160A  118A  24DB  120A  158A  	fcall	___awdiv
  4756     0F0D  0822               	movf	?___awdiv,w
  4757     0F0E  3E12               	addlw	18
  4758     0F0F  160A  158A  2766  120A  158A  	fcall	___bmul
  4759     0F14  3E12               	addlw	low (__powers_| (0+32768))
  4760     0F15  0084               	movwf	4
  4761     0F16  3090               	movlw	high (__powers_| (0+32768))
  4762     0F17  1803               	skipnc
  4763     0F18  3E01               	addlw	1
  4764     0F19  00FF               	movwf	127
  4765     0F1A  160A  118A  2000  120A  158A  	fcall	stringtab
  4766     0F1F  00B0               	movwf	___ftmul@f2
  4767     0F20  160A  118A  2000  120A  158A  	fcall	stringtab
  4768     0F25  00B1               	movwf	___ftmul@f2+1
  4769     0F26  160A  118A  2000  120A  158A  	fcall	stringtab
  4770     0F2B  00B2               	movwf	___ftmul@f2+2
  4771     0F2C  160A  118A  2761  120A  158A  	fcall	___ftmul
  4772     0F31  082D               	movf	?___ftmul,w
  4773     0F32  00BF               	movwf	_scale$1102
  4774     0F33  082E               	movf	?___ftmul+1,w
  4775     0F34  00C0               	movwf	_scale$1102+1
  4776     0F35  082F               	movf	?___ftmul+2,w
  4777     0F36  00C1               	movwf	_scale$1102+2
  4778                           
  4779                           ;doprnt.c: 445: return _powers_[(unsigned char)(scl/100+18)] * _powers_[(unsigned char)(
      +                          (scl%100)/10+9)] * _powers_[(unsigned char)(scl%10)];
  4780     0F37  3003               	movlw	3
  4781     0F38  00AA               	movwf	___bmul@multiplicand
  4782     0F39  0842               	movf	scale@scl,w
  4783     0F3A  00F5               	movwf	___awmod@dividend
  4784     0F3B  01F6               	clrf	___awmod@dividend+1
  4785     0F3C  1BF5               	btfsc	___awmod@dividend,7
  4786     0F3D  03F6               	decf	___awmod@dividend+1,f
  4787     0F3E  300A               	movlw	10
  4788     0F3F  00F3               	movwf	___awmod@divisor
  4789     0F40  3000               	movlw	0
  4790     0F41  00F4               	movwf	___awmod@divisor+1
  4791     0F42  160A  118A  23F8  120A  158A  	fcall	___awmod
  4792     0F47  0873               	movf	?___awmod,w
  4793     0F48  160A  158A  2766  120A  158A  	fcall	___bmul
  4794     0F4D  3E12               	addlw	low (__powers_| (0+32768))
  4795     0F4E  0084               	movwf	4
  4796     0F4F  3090               	movlw	high (__powers_| (0+32768))
  4797     0F50  1803               	skipnc
  4798     0F51  3E01               	addlw	1
  4799     0F52  00FF               	movwf	127
  4800     0F53  160A  118A  2000  120A  158A  	fcall	stringtab
  4801     0F58  00AD               	movwf	___ftmul@f1
  4802     0F59  160A  118A  2000  120A  158A  	fcall	stringtab
  4803     0F5E  00AE               	movwf	___ftmul@f1+1
  4804     0F5F  160A  118A  2000  120A  158A  	fcall	stringtab
  4805     0F64  00AF               	movwf	___ftmul@f1+2
  4806     0F65  083F               	movf	_scale$1102,w
  4807     0F66  00B0               	movwf	___ftmul@f2
  4808     0F67  0840               	movf	_scale$1102+1,w
  4809     0F68  00B1               	movwf	___ftmul@f2+1
  4810     0F69  0841               	movf	_scale$1102+2,w
  4811     0F6A  00B2               	movwf	___ftmul@f2+2
  4812     0F6B  160A  118A  2761   	fcall	___ftmul
  4813     0F6E  082D               	movf	?___ftmul,w
  4814     0F6F  00BC               	movwf	?_scale
  4815     0F70  082E               	movf	?___ftmul+1,w
  4816     0F71  00BD               	movwf	?_scale+1
  4817     0F72  082F               	movf	?___ftmul+2,w
  4818     0F73  00BE               	movwf	?_scale+2
  4819     0F74  0008               	return
  4820     0F75                     l4298:
  4821                           
  4822                           ;doprnt.c: 446: else if(scl > 10)
  4823     0F75  0842               	movf	scale@scl,w
  4824     0F76  3A80               	xorlw	128
  4825     0F77  3E75               	addlw	-139
  4826     0F78  1C03               	skipc
  4827     0F79  2FE1               	goto	l4304
  4828                           
  4829                           ;doprnt.c: 447: return _powers_[(unsigned char)(scl/10+9)] * _powers_[(unsigned char)(sc
      +                          l%10)];
  4830     0F7A  3003               	movlw	3
  4831     0F7B  00AA               	movwf	___bmul@multiplicand
  4832     0F7C  0842               	movf	scale@scl,w
  4833     0F7D  00F5               	movwf	___awmod@dividend
  4834     0F7E  01F6               	clrf	___awmod@dividend+1
  4835     0F7F  1BF5               	btfsc	___awmod@dividend,7
  4836     0F80  03F6               	decf	___awmod@dividend+1,f
  4837     0F81  300A               	movlw	10
  4838     0F82  00F3               	movwf	___awmod@divisor
  4839     0F83  3000               	movlw	0
  4840     0F84  00F4               	movwf	___awmod@divisor+1
  4841     0F85  160A  118A  23F8  120A  158A  	fcall	___awmod
  4842     0F8A  0873               	movf	?___awmod,w
  4843     0F8B  160A  158A  2766  120A  158A  	fcall	___bmul
  4844     0F90  3E12               	addlw	low (__powers_| (0+32768))
  4845     0F91  0084               	movwf	4
  4846     0F92  3090               	movlw	high (__powers_| (0+32768))
  4847     0F93  1803               	skipnc
  4848     0F94  3E01               	addlw	1
  4849     0F95  00FF               	movwf	127
  4850     0F96  160A  118A  2000  120A  158A  	fcall	stringtab
  4851     0F9B  00AD               	movwf	___ftmul@f1
  4852     0F9C  160A  118A  2000  120A  158A  	fcall	stringtab
  4853     0FA1  00AE               	movwf	___ftmul@f1+1
  4854     0FA2  160A  118A  2000  120A  158A  	fcall	stringtab
  4855     0FA7  00AF               	movwf	___ftmul@f1+2
  4856     0FA8  3003               	movlw	3
  4857     0FA9  00AA               	movwf	___bmul@multiplicand
  4858     0FAA  300A               	movlw	10
  4859     0FAB  00A2               	movwf	___awdiv@divisor
  4860     0FAC  3000               	movlw	0
  4861     0FAD  00A3               	movwf	___awdiv@divisor+1
  4862     0FAE  0842               	movf	scale@scl,w
  4863     0FAF  00A4               	movwf	___awdiv@dividend
  4864     0FB0  01A5               	clrf	___awdiv@dividend+1
  4865     0FB1  1BA4               	btfsc	___awdiv@dividend,7
  4866     0FB2  03A5               	decf	___awdiv@dividend+1,f
  4867     0FB3  160A  118A  24DB  120A  158A  	fcall	___awdiv
  4868     0FB8  0822               	movf	?___awdiv,w
  4869     0FB9  3E09               	addlw	9
  4870     0FBA  160A  158A  2766  120A  158A  	fcall	___bmul
  4871     0FBF  3E12               	addlw	low (__powers_| (0+32768))
  4872     0FC0  0084               	movwf	4
  4873     0FC1  3090               	movlw	high (__powers_| (0+32768))
  4874     0FC2  1803               	skipnc
  4875     0FC3  3E01               	addlw	1
  4876     0FC4  00FF               	movwf	127
  4877     0FC5  160A  118A  2000  120A  158A  	fcall	stringtab
  4878     0FCA  00B0               	movwf	___ftmul@f2
  4879     0FCB  160A  118A  2000  120A  158A  	fcall	stringtab
  4880     0FD0  00B1               	movwf	___ftmul@f2+1
  4881     0FD1  160A  118A  2000  120A  158A  	fcall	stringtab
  4882     0FD6  00B2               	movwf	___ftmul@f2+2
  4883     0FD7  160A  118A  2761   	fcall	___ftmul
  4884     0FDA  082D               	movf	?___ftmul,w
  4885     0FDB  00BC               	movwf	?_scale
  4886     0FDC  082E               	movf	?___ftmul+1,w
  4887     0FDD  00BD               	movwf	?_scale+1
  4888     0FDE  082F               	movf	?___ftmul+2,w
  4889     0FDF  00BE               	movwf	?_scale+2
  4890     0FE0  0008               	return
  4891     0FE1                     l4304:
  4892                           
  4893                           ;doprnt.c: 448: return _powers_[(unsigned char)scl];
  4894     0FE1  3003               	movlw	3
  4895     0FE2  00AA               	movwf	___bmul@multiplicand
  4896     0FE3  0842               	movf	scale@scl,w
  4897     0FE4  160A  158A  2766  120A  158A  	fcall	___bmul
  4898     0FE9  3E12               	addlw	low (__powers_| (0+32768))
  4899     0FEA  0084               	movwf	4
  4900     0FEB  3090               	movlw	high (__powers_| (0+32768))
  4901     0FEC  1803               	skipnc
  4902     0FED  3E01               	addlw	1
  4903     0FEE  00FF               	movwf	127
  4904     0FEF  160A  118A  2000  120A  158A  	fcall	stringtab
  4905     0FF4  00BC               	movwf	?_scale
  4906     0FF5  160A  118A  2000  120A  158A  	fcall	stringtab
  4907     0FFA  00BD               	movwf	?_scale+1
  4908     0FFB  160A  118A  2000   	fcall	stringtab
  4909     0FFE  00BE               	movwf	?_scale+2
  4910     0FFF  0008               	return
  4911     1000                     __end_of_scale:
  4912                           
  4913                           	psect	text7
  4914     13F8                     __ptext7:	
  4915 ;; *************** function ___awmod *****************
  4916 ;; Defined at:
  4917 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c90\common\awmod.c"
  4918 ;; Parameters:    Size  Location     Type
  4919 ;;  divisor         2    3[COMMON] int 
  4920 ;;  dividend        2    5[COMMON] int 
  4921 ;; Auto vars:     Size  Location     Type
  4922 ;;  sign            1    1[BANK0 ] unsigned char 
  4923 ;;  counter         1    0[BANK0 ] unsigned char 
  4924 ;; Return value:  Size  Location     Type
  4925 ;;                  2    3[COMMON] int 
  4926 ;; Registers used:
  4927 ;;		wreg, status,2, status,0
  4928 ;; Tracked objects:
  4929 ;;		On entry : 300/0
  4930 ;;		On exit  : 300/0
  4931 ;;		Unchanged: 0/0
  4932 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4933 ;;      Params:         4       0       0       0       0
  4934 ;;      Locals:         0       2       0       0       0
  4935 ;;      Temps:          0       0       0       0       0
  4936 ;;      Totals:         4       2       0       0       0
  4937 ;;Total ram usage:        6 bytes
  4938 ;; Hardware stack levels used: 1
  4939 ;; Hardware stack levels required when called: 1
  4940 ;; This function calls:
  4941 ;;		Nothing
  4942 ;; This function is called by:
  4943 ;;		_scale
  4944 ;; This function uses a non-reentrant model
  4945 ;;
  4946                           
  4947     13F8                     ___awmod:	
  4948                           ;psect for function ___awmod
  4949                           
  4950                           
  4951                           ;incstack = 0
  4952                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  4953     13F8  01A1               	clrf	___awmod@sign
  4954     13F9  1FF6               	btfss	___awmod@dividend+1,7
  4955     13FA  2C02               	goto	l4028
  4956     13FB  09F5               	comf	___awmod@dividend,f
  4957     13FC  09F6               	comf	___awmod@dividend+1,f
  4958     13FD  0AF5               	incf	___awmod@dividend,f
  4959     13FE  1903               	skipnz
  4960     13FF  0AF6               	incf	___awmod@dividend+1,f
  4961     1400  3001               	movlw	1
  4962     1401  00A1               	movwf	___awmod@sign
  4963     1402                     l4028:
  4964     1402  1FF4               	btfss	___awmod@divisor+1,7
  4965     1403  2C09               	goto	l4032
  4966     1404  09F3               	comf	___awmod@divisor,f
  4967     1405  09F4               	comf	___awmod@divisor+1,f
  4968     1406  0AF3               	incf	___awmod@divisor,f
  4969     1407  1903               	skipnz
  4970     1408  0AF4               	incf	___awmod@divisor+1,f
  4971     1409                     l4032:
  4972     1409  0873               	movf	___awmod@divisor,w
  4973     140A  0474               	iorwf	___awmod@divisor+1,w
  4974     140B  1903               	btfsc	3,2
  4975     140C  2C34               	goto	l4050
  4976     140D  3001               	movlw	1
  4977     140E  00A0               	movwf	___awmod@counter
  4978     140F                     l4040:
  4979     140F  1BF4               	btfsc	___awmod@divisor+1,7
  4980     1410  2C1B               	goto	l4042
  4981     1411  3001               	movlw	1
  4982     1412                     u5255:
  4983     1412  1003               	clrc
  4984     1413  0DF3               	rlf	___awmod@divisor,f
  4985     1414  0DF4               	rlf	___awmod@divisor+1,f
  4986     1415  3EFF               	addlw	-1
  4987     1416  1D03               	skipz
  4988     1417  2C12               	goto	u5255
  4989     1418  3001               	movlw	1
  4990     1419  07A0               	addwf	___awmod@counter,f
  4991     141A  2C0F               	goto	l4040
  4992     141B                     l4042:
  4993     141B  0874               	movf	___awmod@divisor+1,w
  4994     141C  0276               	subwf	___awmod@dividend+1,w
  4995     141D  1D03               	skipz
  4996     141E  2C21               	goto	u5275
  4997     141F  0873               	movf	___awmod@divisor,w
  4998     1420  0275               	subwf	___awmod@dividend,w
  4999     1421                     u5275:
  5000     1421  1C03               	skipc
  5001     1422  2C29               	goto	l4046
  5002     1423  0873               	movf	___awmod@divisor,w
  5003     1424  02F5               	subwf	___awmod@dividend,f
  5004     1425  0874               	movf	___awmod@divisor+1,w
  5005     1426  1C03               	skipc
  5006     1427  03F6               	decf	___awmod@dividend+1,f
  5007     1428  02F6               	subwf	___awmod@dividend+1,f
  5008     1429                     l4046:
  5009     1429  3001               	movlw	1
  5010     142A                     u5285:
  5011     142A  1003               	clrc
  5012     142B  0CF4               	rrf	___awmod@divisor+1,f
  5013     142C  0CF3               	rrf	___awmod@divisor,f
  5014     142D  3EFF               	addlw	-1
  5015     142E  1D03               	skipz
  5016     142F  2C2A               	goto	u5285
  5017     1430  3001               	movlw	1
  5018     1431  02A0               	subwf	___awmod@counter,f
  5019     1432  1D03               	btfss	3,2
  5020     1433  2C1B               	goto	l4042
  5021     1434                     l4050:
  5022     1434  0821               	movf	___awmod@sign,w
  5023     1435  1903               	btfsc	3,2
  5024     1436  2C3C               	goto	l4054
  5025     1437  09F5               	comf	___awmod@dividend,f
  5026     1438  09F6               	comf	___awmod@dividend+1,f
  5027     1439  0AF5               	incf	___awmod@dividend,f
  5028     143A  1903               	skipnz
  5029     143B  0AF6               	incf	___awmod@dividend+1,f
  5030     143C                     l4054:
  5031     143C  0876               	movf	___awmod@dividend+1,w
  5032     143D  00F4               	movwf	?___awmod+1
  5033     143E  0875               	movf	___awmod@dividend,w
  5034     143F  00F3               	movwf	?___awmod
  5035     1440  0008               	return
  5036     1441                     __end_of___awmod:
  5037                           
  5038                           	psect	text8
  5039     14DB                     __ptext8:	
  5040 ;; *************** function ___awdiv *****************
  5041 ;; Defined at:
  5042 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c90\common\awdiv.c"
  5043 ;; Parameters:    Size  Location     Type
  5044 ;;  divisor         2    2[BANK0 ] int 
  5045 ;;  dividend        2    4[BANK0 ] int 
  5046 ;; Auto vars:     Size  Location     Type
  5047 ;;  quotient        2    8[BANK0 ] int 
  5048 ;;  sign            1    7[BANK0 ] unsigned char 
  5049 ;;  counter         1    6[BANK0 ] unsigned char 
  5050 ;; Return value:  Size  Location     Type
  5051 ;;                  2    2[BANK0 ] int 
  5052 ;; Registers used:
  5053 ;;		wreg, status,2, status,0
  5054 ;; Tracked objects:
  5055 ;;		On entry : 300/0
  5056 ;;		On exit  : 300/0
  5057 ;;		Unchanged: 0/0
  5058 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5059 ;;      Params:         0       4       0       0       0
  5060 ;;      Locals:         0       4       0       0       0
  5061 ;;      Temps:          0       0       0       0       0
  5062 ;;      Totals:         0       8       0       0       0
  5063 ;;Total ram usage:        8 bytes
  5064 ;; Hardware stack levels used: 1
  5065 ;; Hardware stack levels required when called: 1
  5066 ;; This function calls:
  5067 ;;		Nothing
  5068 ;; This function is called by:
  5069 ;;		_scale
  5070 ;;		_sprintf
  5071 ;; This function uses a non-reentrant model
  5072 ;;
  5073                           
  5074     14DB                     ___awdiv:	
  5075                           ;psect for function ___awdiv
  5076                           
  5077                           
  5078                           ;incstack = 0
  5079                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  5080     14DB  01A7               	clrf	___awdiv@sign
  5081     14DC  1FA3               	btfss	___awdiv@divisor+1,7
  5082     14DD  2CE5               	goto	l3984
  5083     14DE  09A2               	comf	___awdiv@divisor,f
  5084     14DF  09A3               	comf	___awdiv@divisor+1,f
  5085     14E0  0AA2               	incf	___awdiv@divisor,f
  5086     14E1  1903               	skipnz
  5087     14E2  0AA3               	incf	___awdiv@divisor+1,f
  5088     14E3  3001               	movlw	1
  5089     14E4  00A7               	movwf	___awdiv@sign
  5090     14E5                     l3984:
  5091     14E5  1FA5               	btfss	___awdiv@dividend+1,7
  5092     14E6  2CEE               	goto	l3990
  5093     14E7  09A4               	comf	___awdiv@dividend,f
  5094     14E8  09A5               	comf	___awdiv@dividend+1,f
  5095     14E9  0AA4               	incf	___awdiv@dividend,f
  5096     14EA  1903               	skipnz
  5097     14EB  0AA5               	incf	___awdiv@dividend+1,f
  5098     14EC  3001               	movlw	1
  5099     14ED  06A7               	xorwf	___awdiv@sign,f
  5100     14EE                     l3990:
  5101     14EE  01A8               	clrf	___awdiv@quotient
  5102     14EF  01A9               	clrf	___awdiv@quotient+1
  5103     14F0  0822               	movf	___awdiv@divisor,w
  5104     14F1  0423               	iorwf	___awdiv@divisor+1,w
  5105     14F2  1903               	btfsc	3,2
  5106     14F3  2D23               	goto	l4012
  5107     14F4  3001               	movlw	1
  5108     14F5  00A6               	movwf	___awdiv@counter
  5109     14F6                     l4000:
  5110     14F6  1BA3               	btfsc	___awdiv@divisor+1,7
  5111     14F7  2D02               	goto	l4002
  5112     14F8  3001               	movlw	1
  5113     14F9                     u5155:
  5114     14F9  1003               	clrc
  5115     14FA  0DA2               	rlf	___awdiv@divisor,f
  5116     14FB  0DA3               	rlf	___awdiv@divisor+1,f
  5117     14FC  3EFF               	addlw	-1
  5118     14FD  1D03               	skipz
  5119     14FE  2CF9               	goto	u5155
  5120     14FF  3001               	movlw	1
  5121     1500  07A6               	addwf	___awdiv@counter,f
  5122     1501  2CF6               	goto	l4000
  5123     1502                     l4002:
  5124     1502  3001               	movlw	1
  5125     1503                     u5175:
  5126     1503  1003               	clrc
  5127     1504  0DA8               	rlf	___awdiv@quotient,f
  5128     1505  0DA9               	rlf	___awdiv@quotient+1,f
  5129     1506  3EFF               	addlw	-1
  5130     1507  1D03               	skipz
  5131     1508  2D03               	goto	u5175
  5132     1509  0823               	movf	___awdiv@divisor+1,w
  5133     150A  0225               	subwf	___awdiv@dividend+1,w
  5134     150B  1D03               	skipz
  5135     150C  2D0F               	goto	u5185
  5136     150D  0822               	movf	___awdiv@divisor,w
  5137     150E  0224               	subwf	___awdiv@dividend,w
  5138     150F                     u5185:
  5139     150F  1C03               	skipc
  5140     1510  2D18               	goto	l4008
  5141     1511  0822               	movf	___awdiv@divisor,w
  5142     1512  02A4               	subwf	___awdiv@dividend,f
  5143     1513  0823               	movf	___awdiv@divisor+1,w
  5144     1514  1C03               	skipc
  5145     1515  03A5               	decf	___awdiv@dividend+1,f
  5146     1516  02A5               	subwf	___awdiv@dividend+1,f
  5147     1517  1428               	bsf	___awdiv@quotient,0
  5148     1518                     l4008:
  5149     1518  3001               	movlw	1
  5150     1519                     u5195:
  5151     1519  1003               	clrc
  5152     151A  0CA3               	rrf	___awdiv@divisor+1,f
  5153     151B  0CA2               	rrf	___awdiv@divisor,f
  5154     151C  3EFF               	addlw	-1
  5155     151D  1D03               	skipz
  5156     151E  2D19               	goto	u5195
  5157     151F  3001               	movlw	1
  5158     1520  02A6               	subwf	___awdiv@counter,f
  5159     1521  1D03               	btfss	3,2
  5160     1522  2D02               	goto	l4002
  5161     1523                     l4012:
  5162     1523  0827               	movf	___awdiv@sign,w
  5163     1524  1903               	btfsc	3,2
  5164     1525  2D2B               	goto	l4016
  5165     1526  09A8               	comf	___awdiv@quotient,f
  5166     1527  09A9               	comf	___awdiv@quotient+1,f
  5167     1528  0AA8               	incf	___awdiv@quotient,f
  5168     1529  1903               	skipnz
  5169     152A  0AA9               	incf	___awdiv@quotient+1,f
  5170     152B                     l4016:
  5171     152B  0829               	movf	___awdiv@quotient+1,w
  5172     152C  00A3               	movwf	?___awdiv+1
  5173     152D  0828               	movf	___awdiv@quotient,w
  5174     152E  00A2               	movwf	?___awdiv
  5175     152F  0008               	return
  5176     1530                     __end_of___awdiv:
  5177                           
  5178                           	psect	text9
  5179     1F58                     __ptext9:	
  5180 ;; *************** function _isdigit *****************
  5181 ;; Defined at:
  5182 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c90\common\isdigit.c"
  5183 ;; Parameters:    Size  Location     Type
  5184 ;;  c               1    wreg     unsigned char 
  5185 ;; Auto vars:     Size  Location     Type
  5186 ;;  c               1    4[COMMON] unsigned char 
  5187 ;; Return value:  Size  Location     Type
  5188 ;;		None               void
  5189 ;; Registers used:
  5190 ;;		wreg, status,2, status,0
  5191 ;; Tracked objects:
  5192 ;;		On entry : 300/0
  5193 ;;		On exit  : 300/0
  5194 ;;		Unchanged: 300/0
  5195 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5196 ;;      Params:         0       0       0       0       0
  5197 ;;      Locals:         2       0       0       0       0
  5198 ;;      Temps:          0       0       0       0       0
  5199 ;;      Totals:         2       0       0       0       0
  5200 ;;Total ram usage:        2 bytes
  5201 ;; Hardware stack levels used: 1
  5202 ;; Hardware stack levels required when called: 1
  5203 ;; This function calls:
  5204 ;;		Nothing
  5205 ;; This function is called by:
  5206 ;;		_sprintf
  5207 ;; This function uses a non-reentrant model
  5208 ;;
  5209                           
  5210     1F58                     _isdigit:	
  5211                           ;psect for function _isdigit
  5212                           
  5213                           
  5214                           ;incstack = 0
  5215                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  5216                           ;isdigit@c stored from wreg
  5217     1F58  00F4               	movwf	isdigit@c
  5218     1F59  01F3               	clrf	_isdigit$874
  5219     1F5A  303A               	movlw	58
  5220     1F5B  0274               	subwf	isdigit@c,w
  5221     1F5C  1803               	skipnc
  5222     1F5D  2F64               	goto	l4316
  5223     1F5E  3030               	movlw	48
  5224     1F5F  0274               	subwf	isdigit@c,w
  5225     1F60  1C03               	skipc
  5226     1F61  2F64               	goto	l4316
  5227     1F62  3001               	movlw	1
  5228     1F63  00F3               	movwf	_isdigit$874
  5229     1F64                     l4316:
  5230     1F64  0C73               	rrf	_isdigit$874,w
  5231     1F65  0008               	return
  5232     1F66                     __end_of_isdigit:
  5233                           
  5234                           	psect	text10
  5235     0C1A                     __ptext10:	
  5236 ;; *************** function _fround *****************
  5237 ;; Defined at:
  5238 ;;		line 417 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c90\common\doprnt.c"
  5239 ;; Parameters:    Size  Location     Type
  5240 ;;  prec            1    wreg     unsigned char 
  5241 ;; Auto vars:     Size  Location     Type
  5242 ;;  prec            1   37[BANK0 ] unsigned char 
  5243 ;; Return value:  Size  Location     Type
  5244 ;;                  3   28[BANK0 ] unsigned char 
  5245 ;; Registers used:
  5246 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5247 ;; Tracked objects:
  5248 ;;		On entry : 300/100
  5249 ;;		On exit  : 300/0
  5250 ;;		Unchanged: 0/0
  5251 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5252 ;;      Params:         0       3       0       0       0
  5253 ;;      Locals:         0       7       0       0       0
  5254 ;;      Temps:          0       0       0       0       0
  5255 ;;      Totals:         0      10       0       0       0
  5256 ;;Total ram usage:       10 bytes
  5257 ;; Hardware stack levels used: 1
  5258 ;; Hardware stack levels required when called: 3
  5259 ;; This function calls:
  5260 ;;		___bmul
  5261 ;;		___ftmul
  5262 ;;		___lbdiv
  5263 ;;		___lbmod
  5264 ;; This function is called by:
  5265 ;;		_sprintf
  5266 ;; This function uses a non-reentrant model
  5267 ;;
  5268                           
  5269     0C1A                     _fround:	
  5270                           ;psect for function _fround
  5271                           
  5272                           
  5273                           ;incstack = 0
  5274                           ; Regs used in _fround: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5275                           ;fround@prec stored from wreg
  5276     0C1A  1283               	bcf	3,5	;RP0=0, select bank0
  5277     0C1B  00C5               	movwf	fround@prec
  5278                           
  5279                           ;doprnt.c: 421: if(prec>=110)
  5280     0C1C  306E               	movlw	110
  5281     0C1D  0245               	subwf	fround@prec,w
  5282     0C1E  1C03               	skipc
  5283     0C1F  2CCE               	goto	l4256
  5284                           
  5285                           ;doprnt.c: 422: return 0.5 * _npowers_[prec/100U+18U] * _npowers_[(prec%100U)/10U+9U] * 
      +                          _npowers_[prec%10U];
  5286     0C20  3003               	movlw	3
  5287     0C21  00AA               	movwf	___bmul@multiplicand
  5288     0C22  300A               	movlw	10
  5289     0C23  00F6               	movwf	___lbdiv@divisor
  5290     0C24  3064               	movlw	100
  5291     0C25  00F3               	movwf	___lbmod@divisor
  5292     0C26  0845               	movf	fround@prec,w
  5293     0C27  160A  118A  21E1  120A  158A  	fcall	___lbmod
  5294     0C2C  160A  118A  21C2  120A  158A  	fcall	___lbdiv
  5295     0C31  160A  158A  2766  120A  158A  	fcall	___bmul
  5296     0C36  3E54               	addlw	low ((__npowers_| (0+32768)+27))
  5297     0C37  0084               	movwf	4
  5298     0C38  3090               	movlw	high ((__npowers_| (0+32768)+27))
  5299     0C39  1803               	skipnc
  5300     0C3A  3E01               	addlw	1
  5301     0C3B  00FF               	movwf	127
  5302     0C3C  160A  118A  2000  120A  158A  	fcall	stringtab
  5303     0C41  00AD               	movwf	___ftmul@f1
  5304     0C42  160A  118A  2000  120A  158A  	fcall	stringtab
  5305     0C47  00AE               	movwf	___ftmul@f1+1
  5306     0C48  160A  118A  2000  120A  158A  	fcall	stringtab
  5307     0C4D  00AF               	movwf	___ftmul@f1+2
  5308     0C4E  3003               	movlw	3
  5309     0C4F  00AA               	movwf	___bmul@multiplicand
  5310     0C50  3064               	movlw	100
  5311     0C51  00F6               	movwf	___lbdiv@divisor
  5312     0C52  0845               	movf	fround@prec,w
  5313     0C53  160A  118A  21C2  120A  158A  	fcall	___lbdiv
  5314     0C58  160A  158A  2766  120A  158A  	fcall	___bmul
  5315     0C5D  3E6F               	addlw	low ((__npowers_| (0+32768)+54))
  5316     0C5E  0084               	movwf	4
  5317     0C5F  3090               	movlw	high ((__npowers_| (0+32768)+54))
  5318     0C60  1803               	skipnc
  5319     0C61  3E01               	addlw	1
  5320     0C62  00FF               	movwf	127
  5321     0C63  160A  118A  2000  120A  158A  	fcall	stringtab
  5322     0C68  00B0               	movwf	___ftmul@f2
  5323     0C69  160A  118A  2000  120A  158A  	fcall	stringtab
  5324     0C6E  00B1               	movwf	___ftmul@f2+1
  5325     0C6F  160A  118A  2000  120A  158A  	fcall	stringtab
  5326     0C74  00B2               	movwf	___ftmul@f2+2
  5327     0C75  160A  118A  2761  120A  158A  	fcall	___ftmul
  5328     0C7A  082D               	movf	?___ftmul,w
  5329     0C7B  00C2               	movwf	_fround$1100
  5330     0C7C  082E               	movf	?___ftmul+1,w
  5331     0C7D  00C3               	movwf	_fround$1100+1
  5332     0C7E  082F               	movf	?___ftmul+2,w
  5333     0C7F  00C4               	movwf	_fround$1100+2
  5334                           
  5335                           ;doprnt.c: 422: return 0.5 * _npowers_[prec/100U+18U] * _npowers_[(prec%100U)/10U+9U] * 
      +                          _npowers_[prec%10U];
  5336     0C80  3003               	movlw	3
  5337     0C81  00AA               	movwf	___bmul@multiplicand
  5338     0C82  300A               	movlw	10
  5339     0C83  00F3               	movwf	___lbmod@divisor
  5340     0C84  0845               	movf	fround@prec,w
  5341     0C85  160A  118A  21E1  120A  158A  	fcall	___lbmod
  5342     0C8A  160A  158A  2766  120A  158A  	fcall	___bmul
  5343     0C8F  3E39               	addlw	low (__npowers_| (0+32768))
  5344     0C90  0084               	movwf	4
  5345     0C91  3090               	movlw	high (__npowers_| (0+32768))
  5346     0C92  1803               	skipnc
  5347     0C93  3E01               	addlw	1
  5348     0C94  00FF               	movwf	127
  5349     0C95  160A  118A  2000  120A  158A  	fcall	stringtab
  5350     0C9A  00AD               	movwf	___ftmul@f1
  5351     0C9B  160A  118A  2000  120A  158A  	fcall	stringtab
  5352     0CA0  00AE               	movwf	___ftmul@f1+1
  5353     0CA1  160A  118A  2000  120A  158A  	fcall	stringtab
  5354     0CA6  00AF               	movwf	___ftmul@f1+2
  5355     0CA7  0842               	movf	_fround$1100,w
  5356     0CA8  00B0               	movwf	___ftmul@f2
  5357     0CA9  0843               	movf	_fround$1100+1,w
  5358     0CAA  00B1               	movwf	___ftmul@f2+1
  5359     0CAB  0844               	movf	_fround$1100+2,w
  5360     0CAC  00B2               	movwf	___ftmul@f2+2
  5361     0CAD  160A  118A  2761  120A  158A  	fcall	___ftmul
  5362     0CB2  082D               	movf	?___ftmul,w
  5363     0CB3  00BF               	movwf	_fround$1101
  5364     0CB4  082E               	movf	?___ftmul+1,w
  5365     0CB5  00C0               	movwf	_fround$1101+1
  5366     0CB6  082F               	movf	?___ftmul+2,w
  5367     0CB7  00C1               	movwf	_fround$1101+2
  5368                           
  5369                           ;doprnt.c: 422: return 0.5 * _npowers_[prec/100U+18U] * _npowers_[(prec%100U)/10U+9U] * 
      +                          _npowers_[prec%10U];
  5370     0CB8  3000               	movlw	0
  5371     0CB9  00AD               	movwf	___ftmul@f1
  5372     0CBA  3000               	movlw	0
  5373     0CBB  00AE               	movwf	___ftmul@f1+1
  5374     0CBC  303F               	movlw	63
  5375     0CBD  00AF               	movwf	___ftmul@f1+2
  5376     0CBE  083F               	movf	_fround$1101,w
  5377     0CBF  00B0               	movwf	___ftmul@f2
  5378     0CC0  0840               	movf	_fround$1101+1,w
  5379     0CC1  00B1               	movwf	___ftmul@f2+1
  5380     0CC2  0841               	movf	_fround$1101+2,w
  5381     0CC3  00B2               	movwf	___ftmul@f2+2
  5382     0CC4  160A  118A  2761   	fcall	___ftmul
  5383     0CC7  082D               	movf	?___ftmul,w
  5384     0CC8  00BC               	movwf	?_fround
  5385     0CC9  082E               	movf	?___ftmul+1,w
  5386     0CCA  00BD               	movwf	?_fround+1
  5387     0CCB  082F               	movf	?___ftmul+2,w
  5388     0CCC  00BE               	movwf	?_fround+2
  5389     0CCD  0008               	return
  5390     0CCE                     l4256:
  5391                           
  5392                           ;doprnt.c: 423: else if(prec > 10)
  5393     0CCE  300B               	movlw	11
  5394     0CCF  0245               	subwf	fround@prec,w
  5395     0CD0  1C03               	skipc
  5396     0CD1  2D41               	goto	l4264
  5397                           
  5398                           ;doprnt.c: 424: return 0.5 * _npowers_[prec/10U+9U] * _npowers_[prec%10U];
  5399     0CD2  3003               	movlw	3
  5400     0CD3  00AA               	movwf	___bmul@multiplicand
  5401     0CD4  300A               	movlw	10
  5402     0CD5  00F3               	movwf	___lbmod@divisor
  5403     0CD6  0845               	movf	fround@prec,w
  5404     0CD7  160A  118A  21E1  120A  158A  	fcall	___lbmod
  5405     0CDC  160A  158A  2766  120A  158A  	fcall	___bmul
  5406     0CE1  3E39               	addlw	low (__npowers_| (0+32768))
  5407     0CE2  0084               	movwf	4
  5408     0CE3  3090               	movlw	high (__npowers_| (0+32768))
  5409     0CE4  1803               	skipnc
  5410     0CE5  3E01               	addlw	1
  5411     0CE6  00FF               	movwf	127
  5412     0CE7  160A  118A  2000  120A  158A  	fcall	stringtab
  5413     0CEC  00AD               	movwf	___ftmul@f1
  5414     0CED  160A  118A  2000  120A  158A  	fcall	stringtab
  5415     0CF2  00AE               	movwf	___ftmul@f1+1
  5416     0CF3  160A  118A  2000  120A  158A  	fcall	stringtab
  5417     0CF8  00AF               	movwf	___ftmul@f1+2
  5418     0CF9  3003               	movlw	3
  5419     0CFA  00AA               	movwf	___bmul@multiplicand
  5420     0CFB  300A               	movlw	10
  5421     0CFC  00F6               	movwf	___lbdiv@divisor
  5422     0CFD  0845               	movf	fround@prec,w
  5423     0CFE  160A  118A  21C2  120A  158A  	fcall	___lbdiv
  5424     0D03  160A  158A  2766  120A  158A  	fcall	___bmul
  5425     0D08  3E54               	addlw	low ((__npowers_| (0+32768)+27))
  5426     0D09  0084               	movwf	4
  5427     0D0A  3090               	movlw	high ((__npowers_| (0+32768)+27))
  5428     0D0B  1803               	skipnc
  5429     0D0C  3E01               	addlw	1
  5430     0D0D  00FF               	movwf	127
  5431     0D0E  160A  118A  2000  120A  158A  	fcall	stringtab
  5432     0D13  00B0               	movwf	___ftmul@f2
  5433     0D14  160A  118A  2000  120A  158A  	fcall	stringtab
  5434     0D19  00B1               	movwf	___ftmul@f2+1
  5435     0D1A  160A  118A  2000  120A  158A  	fcall	stringtab
  5436     0D1F  00B2               	movwf	___ftmul@f2+2
  5437     0D20  160A  118A  2761  120A  158A  	fcall	___ftmul
  5438     0D25  082D               	movf	?___ftmul,w
  5439     0D26  00C2               	movwf	_fround$1100
  5440     0D27  082E               	movf	?___ftmul+1,w
  5441     0D28  00C3               	movwf	_fround$1100+1
  5442     0D29  082F               	movf	?___ftmul+2,w
  5443     0D2A  00C4               	movwf	_fround$1100+2
  5444                           
  5445                           ;doprnt.c: 424: return 0.5 * _npowers_[prec/10U+9U] * _npowers_[prec%10U];
  5446     0D2B  3000               	movlw	0
  5447     0D2C  00AD               	movwf	___ftmul@f1
  5448     0D2D  3000               	movlw	0
  5449     0D2E  00AE               	movwf	___ftmul@f1+1
  5450     0D2F  303F               	movlw	63
  5451     0D30  00AF               	movwf	___ftmul@f1+2
  5452     0D31  0842               	movf	_fround$1100,w
  5453     0D32  00B0               	movwf	___ftmul@f2
  5454     0D33  0843               	movf	_fround$1100+1,w
  5455     0D34  00B1               	movwf	___ftmul@f2+1
  5456     0D35  0844               	movf	_fround$1100+2,w
  5457     0D36  00B2               	movwf	___ftmul@f2+2
  5458     0D37  160A  118A  2761   	fcall	___ftmul
  5459     0D3A  082D               	movf	?___ftmul,w
  5460     0D3B  00BC               	movwf	?_fround
  5461     0D3C  082E               	movf	?___ftmul+1,w
  5462     0D3D  00BD               	movwf	?_fround+1
  5463     0D3E  082F               	movf	?___ftmul+2,w
  5464     0D3F  00BE               	movwf	?_fround+2
  5465     0D40  0008               	return
  5466     0D41                     l4264:
  5467                           
  5468                           ;doprnt.c: 425: return 0.5 * _npowers_[prec];
  5469     0D41  3000               	movlw	0
  5470     0D42  00AD               	movwf	___ftmul@f1
  5471     0D43  3000               	movlw	0
  5472     0D44  00AE               	movwf	___ftmul@f1+1
  5473     0D45  303F               	movlw	63
  5474     0D46  00AF               	movwf	___ftmul@f1+2
  5475     0D47  3003               	movlw	3
  5476     0D48  00AA               	movwf	___bmul@multiplicand
  5477     0D49  0845               	movf	fround@prec,w
  5478     0D4A  160A  158A  2766  120A  158A  	fcall	___bmul
  5479     0D4F  3E39               	addlw	low (__npowers_| (0+32768))
  5480     0D50  0084               	movwf	4
  5481     0D51  3090               	movlw	high (__npowers_| (0+32768))
  5482     0D52  1803               	skipnc
  5483     0D53  3E01               	addlw	1
  5484     0D54  00FF               	movwf	127
  5485     0D55  160A  118A  2000  120A  158A  	fcall	stringtab
  5486     0D5A  00B0               	movwf	___ftmul@f2
  5487     0D5B  160A  118A  2000  120A  158A  	fcall	stringtab
  5488     0D60  00B1               	movwf	___ftmul@f2+1
  5489     0D61  160A  118A  2000  120A  158A  	fcall	stringtab
  5490     0D66  00B2               	movwf	___ftmul@f2+2
  5491     0D67  160A  118A  2761   	fcall	___ftmul
  5492     0D6A  082D               	movf	?___ftmul,w
  5493     0D6B  00BC               	movwf	?_fround
  5494     0D6C  082E               	movf	?___ftmul+1,w
  5495     0D6D  00BD               	movwf	?_fround+1
  5496     0D6E  082F               	movf	?___ftmul+2,w
  5497     0D6F  00BE               	movwf	?_fround+2
  5498     0D70  0008               	return
  5499     0D71                     __end_of_fround:
  5500                           
  5501                           	psect	text11
  5502     11E1                     __ptext11:	
  5503 ;; *************** function ___lbmod *****************
  5504 ;; Defined at:
  5505 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c90\common\lbmod.c"
  5506 ;; Parameters:    Size  Location     Type
  5507 ;;  dividend        1    wreg     unsigned char 
  5508 ;;  divisor         1    3[COMMON] unsigned char 
  5509 ;; Auto vars:     Size  Location     Type
  5510 ;;  dividend        1    0[BANK0 ] unsigned char 
  5511 ;;  rem             1    2[BANK0 ] unsigned char 
  5512 ;;  counter         1    1[BANK0 ] unsigned char 
  5513 ;; Return value:  Size  Location     Type
  5514 ;;                  1    wreg      unsigned char 
  5515 ;; Registers used:
  5516 ;;		wreg, status,2, status,0
  5517 ;; Tracked objects:
  5518 ;;		On entry : 300/0
  5519 ;;		On exit  : 300/0
  5520 ;;		Unchanged: 0/0
  5521 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5522 ;;      Params:         1       0       0       0       0
  5523 ;;      Locals:         0       3       0       0       0
  5524 ;;      Temps:          2       0       0       0       0
  5525 ;;      Totals:         3       3       0       0       0
  5526 ;;Total ram usage:        6 bytes
  5527 ;; Hardware stack levels used: 1
  5528 ;; Hardware stack levels required when called: 1
  5529 ;; This function calls:
  5530 ;;		Nothing
  5531 ;; This function is called by:
  5532 ;;		_fround
  5533 ;; This function uses a non-reentrant model
  5534 ;;
  5535                           
  5536     11E1                     ___lbmod:	
  5537                           ;psect for function ___lbmod
  5538                           
  5539                           
  5540                           ;incstack = 0
  5541                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  5542                           ;___lbmod@dividend stored from wreg
  5543     11E1  00A0               	movwf	___lbmod@dividend
  5544     11E2  3008               	movlw	8
  5545     11E3  00A1               	movwf	___lbmod@counter
  5546     11E4  01A2               	clrf	___lbmod@rem
  5547     11E5                     l4206:
  5548     11E5  0820               	movf	___lbmod@dividend,w
  5549     11E6  00F4               	movwf	??___lbmod
  5550     11E7  3007               	movlw	7
  5551     11E8                     u5715:
  5552     11E8  1003               	clrc
  5553     11E9  0CF4               	rrf	??___lbmod,f
  5554     11EA  3EFF               	addlw	-1
  5555     11EB  1D03               	skipz
  5556     11EC  29E8               	goto	u5715
  5557     11ED  0822               	movf	___lbmod@rem,w
  5558     11EE  00F5               	movwf	??___lbmod+1
  5559     11EF  0775               	addwf	??___lbmod+1,w
  5560     11F0  0474               	iorwf	??___lbmod,w
  5561     11F1  00A2               	movwf	___lbmod@rem
  5562     11F2  1003               	clrc
  5563     11F3  0DA0               	rlf	___lbmod@dividend,f
  5564     11F4  0873               	movf	___lbmod@divisor,w
  5565     11F5  0222               	subwf	___lbmod@rem,w
  5566     11F6  1C03               	skipc
  5567     11F7  29FA               	goto	l931
  5568     11F8  0873               	movf	___lbmod@divisor,w
  5569     11F9  02A2               	subwf	___lbmod@rem,f
  5570     11FA                     l931:
  5571     11FA  3001               	movlw	1
  5572     11FB  02A1               	subwf	___lbmod@counter,f
  5573     11FC  1D03               	btfss	3,2
  5574     11FD  29E5               	goto	l4206
  5575     11FE  0822               	movf	___lbmod@rem,w
  5576     11FF  0008               	return
  5577     1200                     __end_of___lbmod:
  5578                           
  5579                           	psect	text12
  5580     11C2                     __ptext12:	
  5581 ;; *************** function ___lbdiv *****************
  5582 ;; Defined at:
  5583 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c90\common\lbdiv.c"
  5584 ;; Parameters:    Size  Location     Type
  5585 ;;  dividend        1    wreg     unsigned char 
  5586 ;;  divisor         1    6[COMMON] unsigned char 
  5587 ;; Auto vars:     Size  Location     Type
  5588 ;;  dividend        1    3[BANK0 ] unsigned char 
  5589 ;;  quotient        1    5[BANK0 ] unsigned char 
  5590 ;;  counter         1    4[BANK0 ] unsigned char 
  5591 ;; Return value:  Size  Location     Type
  5592 ;;                  1    wreg      unsigned char 
  5593 ;; Registers used:
  5594 ;;		wreg, status,2, status,0
  5595 ;; Tracked objects:
  5596 ;;		On entry : 300/0
  5597 ;;		On exit  : 300/0
  5598 ;;		Unchanged: 0/0
  5599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5600 ;;      Params:         1       0       0       0       0
  5601 ;;      Locals:         0       3       0       0       0
  5602 ;;      Temps:          0       0       0       0       0
  5603 ;;      Totals:         1       3       0       0       0
  5604 ;;Total ram usage:        4 bytes
  5605 ;; Hardware stack levels used: 1
  5606 ;; Hardware stack levels required when called: 1
  5607 ;; This function calls:
  5608 ;;		Nothing
  5609 ;; This function is called by:
  5610 ;;		_fround
  5611 ;; This function uses a non-reentrant model
  5612 ;;
  5613                           
  5614     11C2                     ___lbdiv:	
  5615                           ;psect for function ___lbdiv
  5616                           
  5617                           
  5618                           ;incstack = 0
  5619                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  5620                           ;___lbdiv@dividend stored from wreg
  5621     11C2  00A3               	movwf	___lbdiv@dividend
  5622     11C3  01A5               	clrf	___lbdiv@quotient
  5623     11C4  0876               	movf	___lbdiv@divisor,w
  5624     11C5  1903               	btfsc	3,2
  5625     11C6  29DF               	goto	l4198
  5626     11C7  3001               	movlw	1
  5627     11C8  00A4               	movwf	___lbdiv@counter
  5628     11C9                     l4186:
  5629     11C9  1BF6               	btfsc	___lbdiv@divisor,7
  5630     11CA  29D0               	goto	l4188
  5631     11CB  1003               	clrc
  5632     11CC  0DF6               	rlf	___lbdiv@divisor,f
  5633     11CD  3001               	movlw	1
  5634     11CE  07A4               	addwf	___lbdiv@counter,f
  5635     11CF  29C9               	goto	l4186
  5636     11D0                     l4188:
  5637     11D0  1003               	clrc
  5638     11D1  0DA5               	rlf	___lbdiv@quotient,f
  5639     11D2  0876               	movf	___lbdiv@divisor,w
  5640     11D3  0223               	subwf	___lbdiv@dividend,w
  5641     11D4  1C03               	skipc
  5642     11D5  29DA               	goto	L9
  5643     11D6  0876               	movf	___lbdiv@divisor,w
  5644     11D7  02A3               	subwf	___lbdiv@dividend,f
  5645     11D8  1425               	bsf	___lbdiv@quotient,0
  5646     11D9  1003               	clrc
  5647     11DA                     L9:
  5648     11DA  0CF6               	rrf	___lbdiv@divisor,f
  5649     11DB  3001               	movlw	1
  5650     11DC  02A4               	subwf	___lbdiv@counter,f
  5651     11DD  1D03               	btfss	3,2
  5652     11DE  29D0               	goto	l4188
  5653     11DF                     l4198:
  5654     11DF  0825               	movf	___lbdiv@quotient,w
  5655     11E0  0008               	return
  5656     11E1                     __end_of___lbdiv:
  5657                           
  5658                           	psect	text13
  5659     1761                     __ptext13:	
  5660 ;; *************** function ___ftmul *****************
  5661 ;; Defined at:
  5662 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c90\common\ftmul.c"
  5663 ;; Parameters:    Size  Location     Type
  5664 ;;  f1              3   13[BANK0 ] float 
  5665 ;;  f2              3   16[BANK0 ] float 
  5666 ;; Auto vars:     Size  Location     Type
  5667 ;;  f3_as_produc    3   23[BANK0 ] unsigned um
  5668 ;;  sign            1   27[BANK0 ] unsigned char 
  5669 ;;  cntr            1   26[BANK0 ] unsigned char 
  5670 ;;  exp             1   22[BANK0 ] unsigned char 
  5671 ;; Return value:  Size  Location     Type
  5672 ;;                  3   13[BANK0 ] float 
  5673 ;; Registers used:
  5674 ;;		wreg, status,2, status,0, pclath, cstack
  5675 ;; Tracked objects:
  5676 ;;		On entry : 300/0
  5677 ;;		On exit  : 300/0
  5678 ;;		Unchanged: 0/0
  5679 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5680 ;;      Params:         0       6       0       0       0
  5681 ;;      Locals:         0       6       0       0       0
  5682 ;;      Temps:          0       3       0       0       0
  5683 ;;      Totals:         0      15       0       0       0
  5684 ;;Total ram usage:       15 bytes
  5685 ;; Hardware stack levels used: 1
  5686 ;; Hardware stack levels required when called: 2
  5687 ;; This function calls:
  5688 ;;		___ftpack
  5689 ;; This function is called by:
  5690 ;;		_ambiental
  5691 ;;		_fround
  5692 ;;		_scale
  5693 ;;		_sprintf
  5694 ;; This function uses a non-reentrant model
  5695 ;;
  5696                           
  5697     1761                     ___ftmul:	
  5698                           ;psect for function ___ftmul
  5699                           
  5700                           
  5701                           ;incstack = 0
  5702                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  5703     1761  082D               	movf	___ftmul@f1,w
  5704     1762  00B3               	movwf	??___ftmul
  5705     1763  082E               	movf	___ftmul@f1+1,w
  5706     1764  00B4               	movwf	??___ftmul+1
  5707     1765  082F               	movf	___ftmul@f1+2,w
  5708     1766  00B5               	movwf	??___ftmul+2
  5709     1767  1003               	clrc
  5710     1768  0D34               	rlf	??___ftmul+1,w
  5711     1769  0D35               	rlf	??___ftmul+2,w
  5712     176A  00B6               	movwf	___ftmul@exp
  5713     176B  0836               	movf	___ftmul@exp,w
  5714     176C  1D03               	btfss	3,2
  5715     176D  2F75               	goto	l4130
  5716     176E  3000               	movlw	0
  5717     176F  00AD               	movwf	?___ftmul
  5718     1770  3000               	movlw	0
  5719     1771  00AE               	movwf	?___ftmul+1
  5720     1772  3000               	movlw	0
  5721     1773  00AF               	movwf	?___ftmul+2
  5722     1774  0008               	return
  5723     1775                     l4130:
  5724     1775  0830               	movf	___ftmul@f2,w
  5725     1776  00B3               	movwf	??___ftmul
  5726     1777  0831               	movf	___ftmul@f2+1,w
  5727     1778  00B4               	movwf	??___ftmul+1
  5728     1779  0832               	movf	___ftmul@f2+2,w
  5729     177A  00B5               	movwf	??___ftmul+2
  5730     177B  1003               	clrc
  5731     177C  0D34               	rlf	??___ftmul+1,w
  5732     177D  0D35               	rlf	??___ftmul+2,w
  5733     177E  00BB               	movwf	___ftmul@sign
  5734     177F  083B               	movf	___ftmul@sign,w
  5735     1780  1D03               	btfss	3,2
  5736     1781  2F89               	goto	l4136
  5737     1782  3000               	movlw	0
  5738     1783  00AD               	movwf	?___ftmul
  5739     1784  3000               	movlw	0
  5740     1785  00AE               	movwf	?___ftmul+1
  5741     1786  3000               	movlw	0
  5742     1787  00AF               	movwf	?___ftmul+2
  5743     1788  0008               	return
  5744     1789                     l4136:
  5745     1789  083B               	movf	___ftmul@sign,w
  5746     178A  3E7B               	addlw	123
  5747     178B  07B6               	addwf	___ftmul@exp,f
  5748     178C  082F               	movf	___ftmul@f1+2,w
  5749     178D  00BB               	movwf	___ftmul@sign
  5750     178E  0832               	movf	___ftmul@f2+2,w
  5751     178F  06BB               	xorwf	___ftmul@sign,f
  5752     1790  3080               	movlw	128
  5753     1791  05BB               	andwf	___ftmul@sign,f
  5754     1792  17AE               	bsf	___ftmul@f1+1,7
  5755     1793  17B1               	bsf	___ftmul@f2+1,7
  5756     1794  30FF               	movlw	255
  5757     1795  05B0               	andwf	___ftmul@f2,f
  5758     1796  30FF               	movlw	255
  5759     1797  05B1               	andwf	___ftmul@f2+1,f
  5760     1798  3000               	movlw	0
  5761     1799  05B2               	andwf	___ftmul@f2+2,f
  5762     179A  3000               	movlw	0
  5763     179B  00B7               	movwf	___ftmul@f3_as_product
  5764     179C  3000               	movlw	0
  5765     179D  00B8               	movwf	___ftmul@f3_as_product+1
  5766     179E  3000               	movlw	0
  5767     179F  00B9               	movwf	___ftmul@f3_as_product+2
  5768     17A0  3007               	movlw	7
  5769     17A1  00BA               	movwf	___ftmul@cntr
  5770     17A2                     l4154:
  5771     17A2  1C2D               	btfss	___ftmul@f1,0
  5772     17A3  2FB2               	goto	l4158
  5773     17A4  0830               	movf	___ftmul@f2,w
  5774     17A5  07B7               	addwf	___ftmul@f3_as_product,f
  5775     17A6  0831               	movf	___ftmul@f2+1,w
  5776     17A7  1103               	clrz
  5777     17A8  1803               	skipnc
  5778     17A9  0A31               	incf	___ftmul@f2+1,w
  5779     17AA  1D03               	btfss	3,2
  5780     17AB  07B8               	addwf	___ftmul@f3_as_product+1,f
  5781     17AC  0832               	movf	___ftmul@f2+2,w
  5782     17AD  1103               	clrz
  5783     17AE  1803               	skipnc
  5784     17AF  0A32               	incf	___ftmul@f2+2,w
  5785     17B0  1D03               	btfss	3,2
  5786     17B1  07B9               	addwf	___ftmul@f3_as_product+2,f
  5787     17B2                     l4158:
  5788     17B2  3001               	movlw	1
  5789     17B3                     u5595:
  5790     17B3  1003               	clrc
  5791     17B4  0CAF               	rrf	___ftmul@f1+2,f
  5792     17B5  0CAE               	rrf	___ftmul@f1+1,f
  5793     17B6  0CAD               	rrf	___ftmul@f1,f
  5794     17B7  3EFF               	addlw	-1
  5795     17B8  1D03               	skipz
  5796     17B9  2FB3               	goto	u5595
  5797     17BA  3001               	movlw	1
  5798     17BB                     u5605:
  5799     17BB  1003               	clrc
  5800     17BC  0DB0               	rlf	___ftmul@f2,f
  5801     17BD  0DB1               	rlf	___ftmul@f2+1,f
  5802     17BE  0DB2               	rlf	___ftmul@f2+2,f
  5803     17BF  3EFF               	addlw	-1
  5804     17C0  1D03               	skipz
  5805     17C1  2FBB               	goto	u5605
  5806     17C2  3001               	movlw	1
  5807     17C3  02BA               	subwf	___ftmul@cntr,f
  5808     17C4  1D03               	btfss	3,2
  5809     17C5  2FA2               	goto	l4154
  5810     17C6  3009               	movlw	9
  5811     17C7  00BA               	movwf	___ftmul@cntr
  5812     17C8                     l891:
  5813     17C8  1C2D               	btfss	___ftmul@f1,0
  5814     17C9  2FD8               	goto	l4166
  5815     17CA  0830               	movf	___ftmul@f2,w
  5816     17CB  07B7               	addwf	___ftmul@f3_as_product,f
  5817     17CC  0831               	movf	___ftmul@f2+1,w
  5818     17CD  1103               	clrz
  5819     17CE  1803               	skipnc
  5820     17CF  0A31               	incf	___ftmul@f2+1,w
  5821     17D0  1D03               	btfss	3,2
  5822     17D1  07B8               	addwf	___ftmul@f3_as_product+1,f
  5823     17D2  0832               	movf	___ftmul@f2+2,w
  5824     17D3  1103               	clrz
  5825     17D4  1803               	skipnc
  5826     17D5  0A32               	incf	___ftmul@f2+2,w
  5827     17D6  1D03               	btfss	3,2
  5828     17D7  07B9               	addwf	___ftmul@f3_as_product+2,f
  5829     17D8                     l4166:
  5830     17D8  3001               	movlw	1
  5831     17D9                     u5645:
  5832     17D9  1003               	clrc
  5833     17DA  0CAF               	rrf	___ftmul@f1+2,f
  5834     17DB  0CAE               	rrf	___ftmul@f1+1,f
  5835     17DC  0CAD               	rrf	___ftmul@f1,f
  5836     17DD  3EFF               	addlw	-1
  5837     17DE  1D03               	skipz
  5838     17DF  2FD9               	goto	u5645
  5839     17E0  3001               	movlw	1
  5840     17E1                     u5655:
  5841     17E1  1003               	clrc
  5842     17E2  0CB9               	rrf	___ftmul@f3_as_product+2,f
  5843     17E3  0CB8               	rrf	___ftmul@f3_as_product+1,f
  5844     17E4  0CB7               	rrf	___ftmul@f3_as_product,f
  5845     17E5  3EFF               	addlw	-1
  5846     17E6  1D03               	skipz
  5847     17E7  2FE1               	goto	u5655
  5848     17E8  3001               	movlw	1
  5849     17E9  02BA               	subwf	___ftmul@cntr,f
  5850     17EA  1D03               	btfss	3,2
  5851     17EB  2FC8               	goto	l891
  5852     17EC  0837               	movf	___ftmul@f3_as_product,w
  5853     17ED  00F3               	movwf	___ftpack@arg
  5854     17EE  0838               	movf	___ftmul@f3_as_product+1,w
  5855     17EF  00F4               	movwf	___ftpack@arg+1
  5856     17F0  0839               	movf	___ftmul@f3_as_product+2,w
  5857     17F1  00F5               	movwf	___ftpack@arg+2
  5858     17F2  0836               	movf	___ftmul@exp,w
  5859     17F3  00F6               	movwf	___ftpack@exp
  5860     17F4  083B               	movf	___ftmul@sign,w
  5861     17F5  00F7               	movwf	___ftpack@sign
  5862     17F6  160A  118A  25E9   	fcall	___ftpack
  5863     17F9  0873               	movf	?___ftpack,w
  5864     17FA  00AD               	movwf	?___ftmul
  5865     17FB  0874               	movf	?___ftpack+1,w
  5866     17FC  00AE               	movwf	?___ftmul+1
  5867     17FD  0875               	movf	?___ftpack+2,w
  5868     17FE  00AF               	movwf	?___ftmul+2
  5869     17FF  0008               	return
  5870     1800                     __end_of___ftmul:
  5871                           
  5872                           	psect	text14
  5873     1F66                     __ptext14:	
  5874 ;; *************** function ___bmul *****************
  5875 ;; Defined at:
  5876 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c90\common\Umul8.c"
  5877 ;; Parameters:    Size  Location     Type
  5878 ;;  multiplier      1    wreg     unsigned char 
  5879 ;;  multiplicand    1   10[BANK0 ] unsigned char 
  5880 ;; Auto vars:     Size  Location     Type
  5881 ;;  multiplier      1   12[BANK0 ] unsigned char 
  5882 ;;  product         1   11[BANK0 ] unsigned char 
  5883 ;; Return value:  Size  Location     Type
  5884 ;;                  1    wreg      unsigned char 
  5885 ;; Registers used:
  5886 ;;		wreg, status,2, status,0
  5887 ;; Tracked objects:
  5888 ;;		On entry : 300/0
  5889 ;;		On exit  : 300/0
  5890 ;;		Unchanged: 0/0
  5891 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5892 ;;      Params:         0       1       0       0       0
  5893 ;;      Locals:         0       2       0       0       0
  5894 ;;      Temps:          0       0       0       0       0
  5895 ;;      Totals:         0       3       0       0       0
  5896 ;;Total ram usage:        3 bytes
  5897 ;; Hardware stack levels used: 1
  5898 ;; Hardware stack levels required when called: 1
  5899 ;; This function calls:
  5900 ;;		Nothing
  5901 ;; This function is called by:
  5902 ;;		_fround
  5903 ;;		_scale
  5904 ;; This function uses a non-reentrant model
  5905 ;;
  5906                           
  5907     1F66                     ___bmul:	
  5908                           ;psect for function ___bmul
  5909                           
  5910                           
  5911                           ;incstack = 0
  5912                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  5913                           ;___bmul@multiplier stored from wreg
  5914     1F66  00AC               	movwf	___bmul@multiplier
  5915     1F67  01AB               	clrf	___bmul@product
  5916     1F68                     l3964:
  5917     1F68  1C2C               	btfss	___bmul@multiplier,0
  5918     1F69  2F6C               	goto	l3968
  5919     1F6A  082A               	movf	___bmul@multiplicand,w
  5920     1F6B  07AB               	addwf	___bmul@product,f
  5921     1F6C                     l3968:
  5922     1F6C  1003               	clrc
  5923     1F6D  0DAA               	rlf	___bmul@multiplicand,f
  5924     1F6E  1003               	clrc
  5925     1F6F  0CAC               	rrf	___bmul@multiplier,f
  5926     1F70  082C               	movf	___bmul@multiplier,w
  5927     1F71  1D03               	btfss	3,2
  5928     1F72  2F68               	goto	l3964
  5929     1F73  082B               	movf	___bmul@product,w
  5930     1F74  0008               	return
  5931     1F75                     __end_of___bmul:
  5932                           
  5933                           	psect	text15
  5934     16C2                     __ptext15:	
  5935 ;; *************** function __tdiv_to_l_ *****************
  5936 ;; Defined at:
  5937 ;;		line 60 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c90\common\ftdivl.c"
  5938 ;; Parameters:    Size  Location     Type
  5939 ;;  f1              3    0[BANK0 ] float 
  5940 ;;  f2              3    3[BANK0 ] float 
  5941 ;; Auto vars:     Size  Location     Type
  5942 ;;  quot            4    6[BANK0 ] unsigned long 
  5943 ;;  exp1            1   11[BANK0 ] unsigned char 
  5944 ;;  cntr            1   10[BANK0 ] unsigned char 
  5945 ;; Return value:  Size  Location     Type
  5946 ;;                  4    0[BANK0 ] unsigned long 
  5947 ;; Registers used:
  5948 ;;		wreg, status,2, status,0
  5949 ;; Tracked objects:
  5950 ;;		On entry : 300/0
  5951 ;;		On exit  : 300/0
  5952 ;;		Unchanged: 0/0
  5953 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5954 ;;      Params:         0       6       0       0       0
  5955 ;;      Locals:         0       6       0       0       0
  5956 ;;      Temps:          3       0       0       0       0
  5957 ;;      Totals:         3      12       0       0       0
  5958 ;;Total ram usage:       15 bytes
  5959 ;; Hardware stack levels used: 1
  5960 ;; Hardware stack levels required when called: 1
  5961 ;; This function calls:
  5962 ;;		Nothing
  5963 ;; This function is called by:
  5964 ;;		_sprintf
  5965 ;; This function uses a non-reentrant model
  5966 ;;
  5967                           
  5968     16C2                     __tdiv_to_l_:	
  5969                           ;psect for function __tdiv_to_l_
  5970                           
  5971                           
  5972                           ;incstack = 0
  5973                           ; Regs used in __tdiv_to_l_: [wreg+status,2+status,0]
  5974     16C2  0820               	movf	__tdiv_to_l_@f1,w
  5975     16C3  00F3               	movwf	??__tdiv_to_l_
  5976     16C4  0821               	movf	__tdiv_to_l_@f1+1,w
  5977     16C5  00F4               	movwf	??__tdiv_to_l_+1
  5978     16C6  0822               	movf	__tdiv_to_l_@f1+2,w
  5979     16C7  00F5               	movwf	??__tdiv_to_l_+2
  5980     16C8  1003               	clrc
  5981     16C9  0D74               	rlf	??__tdiv_to_l_+1,w
  5982     16CA  0D75               	rlf	??__tdiv_to_l_+2,w
  5983     16CB  00AB               	movwf	__tdiv_to_l_@exp1
  5984     16CC  082B               	movf	__tdiv_to_l_@exp1,w
  5985     16CD  1D03               	btfss	3,2
  5986     16CE  2ED8               	goto	l4326
  5987     16CF                     l4322:
  5988     16CF  3000               	movlw	0
  5989     16D0  00A3               	movwf	?__tdiv_to_l_+3
  5990     16D1  3000               	movlw	0
  5991     16D2  00A2               	movwf	?__tdiv_to_l_+2
  5992     16D3  3000               	movlw	0
  5993     16D4  00A1               	movwf	?__tdiv_to_l_+1
  5994     16D5  3000               	movlw	0
  5995     16D6  00A0               	movwf	?__tdiv_to_l_
  5996     16D7  0008               	return
  5997     16D8                     l4326:
  5998     16D8  0823               	movf	__tdiv_to_l_@f2,w
  5999     16D9  00F3               	movwf	??__tdiv_to_l_
  6000     16DA  0824               	movf	__tdiv_to_l_@f2+1,w
  6001     16DB  00F4               	movwf	??__tdiv_to_l_+1
  6002     16DC  0825               	movf	__tdiv_to_l_@f2+2,w
  6003     16DD  00F5               	movwf	??__tdiv_to_l_+2
  6004     16DE  1003               	clrc
  6005     16DF  0D74               	rlf	??__tdiv_to_l_+1,w
  6006     16E0  0D75               	rlf	??__tdiv_to_l_+2,w
  6007     16E1  00AA               	movwf	__tdiv_to_l_@cntr
  6008     16E2  082A               	movf	__tdiv_to_l_@cntr,w
  6009     16E3  1903               	btfsc	3,2
  6010     16E4  2ECF               	goto	l4322
  6011     16E5  17A1               	bsf	__tdiv_to_l_@f1+1,7
  6012     16E6  30FF               	movlw	255
  6013     16E7  05A0               	andwf	__tdiv_to_l_@f1,f
  6014     16E8  30FF               	movlw	255
  6015     16E9  05A1               	andwf	__tdiv_to_l_@f1+1,f
  6016     16EA  3000               	movlw	0
  6017     16EB  05A2               	andwf	__tdiv_to_l_@f1+2,f
  6018     16EC  17A4               	bsf	__tdiv_to_l_@f2+1,7
  6019     16ED  30FF               	movlw	255
  6020     16EE  05A3               	andwf	__tdiv_to_l_@f2,f
  6021     16EF  30FF               	movlw	255
  6022     16F0  05A4               	andwf	__tdiv_to_l_@f2+1,f
  6023     16F1  3000               	movlw	0
  6024     16F2  05A5               	andwf	__tdiv_to_l_@f2+2,f
  6025     16F3  3000               	movlw	0
  6026     16F4  00A9               	movwf	__tdiv_to_l_@quot+3
  6027     16F5  3000               	movlw	0
  6028     16F6  00A8               	movwf	__tdiv_to_l_@quot+2
  6029     16F7  3000               	movlw	0
  6030     16F8  00A7               	movwf	__tdiv_to_l_@quot+1
  6031     16F9  3000               	movlw	0
  6032     16FA  00A6               	movwf	__tdiv_to_l_@quot
  6033     16FB  307F               	movlw	127
  6034     16FC  02AB               	subwf	__tdiv_to_l_@exp1,f
  6035     16FD  3098               	movlw	152
  6036     16FE  072A               	addwf	__tdiv_to_l_@cntr,w
  6037     16FF  00F3               	movwf	??__tdiv_to_l_
  6038     1700  0873               	movf	??__tdiv_to_l_,w
  6039     1701  02AB               	subwf	__tdiv_to_l_@exp1,f
  6040     1702  3018               	movlw	24
  6041     1703  00AA               	movwf	__tdiv_to_l_@cntr
  6042     1704                     l4342:
  6043     1704  3001               	movlw	1
  6044     1705  00F3               	movwf	??__tdiv_to_l_
  6045     1706                     u5875:
  6046     1706  1003               	clrc
  6047     1707  0DA6               	rlf	__tdiv_to_l_@quot,f
  6048     1708  0DA7               	rlf	__tdiv_to_l_@quot+1,f
  6049     1709  0DA8               	rlf	__tdiv_to_l_@quot+2,f
  6050     170A  0DA9               	rlf	__tdiv_to_l_@quot+3,f
  6051     170B  0BF3               	decfsz	??__tdiv_to_l_,f
  6052     170C  2F06               	goto	u5875
  6053     170D  0825               	movf	__tdiv_to_l_@f2+2,w
  6054     170E  0222               	subwf	__tdiv_to_l_@f1+2,w
  6055     170F  1D03               	skipz
  6056     1710  2F17               	goto	u5885
  6057     1711  0824               	movf	__tdiv_to_l_@f2+1,w
  6058     1712  0221               	subwf	__tdiv_to_l_@f1+1,w
  6059     1713  1D03               	skipz
  6060     1714  2F17               	goto	u5885
  6061     1715  0823               	movf	__tdiv_to_l_@f2,w
  6062     1716  0220               	subwf	__tdiv_to_l_@f1,w
  6063     1717                     u5885:
  6064     1717  1C03               	skipc
  6065     1718  2F24               	goto	l4350
  6066     1719  0823               	movf	__tdiv_to_l_@f2,w
  6067     171A  02A0               	subwf	__tdiv_to_l_@f1,f
  6068     171B  0824               	movf	__tdiv_to_l_@f2+1,w
  6069     171C  1C03               	skipc
  6070     171D  0F24               	incfsz	__tdiv_to_l_@f2+1,w
  6071     171E  02A1               	subwf	__tdiv_to_l_@f1+1,f
  6072     171F  0825               	movf	__tdiv_to_l_@f2+2,w
  6073     1720  1C03               	skipc
  6074     1721  0A25               	incf	__tdiv_to_l_@f2+2,w
  6075     1722  02A2               	subwf	__tdiv_to_l_@f1+2,f
  6076     1723  1426               	bsf	__tdiv_to_l_@quot,0
  6077     1724                     l4350:
  6078     1724  3001               	movlw	1
  6079     1725                     u5895:
  6080     1725  1003               	clrc
  6081     1726  0DA0               	rlf	__tdiv_to_l_@f1,f
  6082     1727  0DA1               	rlf	__tdiv_to_l_@f1+1,f
  6083     1728  0DA2               	rlf	__tdiv_to_l_@f1+2,f
  6084     1729  3EFF               	addlw	-1
  6085     172A  1D03               	skipz
  6086     172B  2F25               	goto	u5895
  6087     172C  3001               	movlw	1
  6088     172D  02AA               	subwf	__tdiv_to_l_@cntr,f
  6089     172E  1D03               	btfss	3,2
  6090     172F  2F04               	goto	l4342
  6091     1730  1FAB               	btfss	__tdiv_to_l_@exp1,7
  6092     1731  2F45               	goto	l4362
  6093     1732  082B               	movf	__tdiv_to_l_@exp1,w
  6094     1733  3A80               	xorlw	128
  6095     1734  3E97               	addlw	151
  6096     1735  1C03               	btfss	3,0
  6097     1736  2ECF               	goto	l4322
  6098     1737                     l4360:
  6099     1737  3001               	movlw	1
  6100     1738                     u5935:
  6101     1738  1003               	clrc
  6102     1739  0CA9               	rrf	__tdiv_to_l_@quot+3,f
  6103     173A  0CA8               	rrf	__tdiv_to_l_@quot+2,f
  6104     173B  0CA7               	rrf	__tdiv_to_l_@quot+1,f
  6105     173C  0CA6               	rrf	__tdiv_to_l_@quot,f
  6106     173D  3EFF               	addlw	-1
  6107     173E  1D03               	skipz
  6108     173F  2F38               	goto	u5935
  6109     1740  3001               	movlw	1
  6110     1741  07AB               	addwf	__tdiv_to_l_@exp1,f
  6111     1742  1903               	btfsc	3,2
  6112     1743  2F58               	goto	l4370
  6113     1744  2F37               	goto	l4360
  6114     1745                     l4362:
  6115     1745  3018               	movlw	24
  6116     1746  022B               	subwf	__tdiv_to_l_@exp1,w
  6117     1747  1803               	btfsc	3,0
  6118     1748  2ECF               	goto	l4322
  6119     1749                     l873:
  6120     1749  082B               	movf	__tdiv_to_l_@exp1,w
  6121     174A  1903               	btfsc	3,2
  6122     174B  2F58               	goto	l4370
  6123     174C  3001               	movlw	1
  6124     174D  00F3               	movwf	??__tdiv_to_l_
  6125     174E                     u5965:
  6126     174E  1003               	clrc
  6127     174F  0DA6               	rlf	__tdiv_to_l_@quot,f
  6128     1750  0DA7               	rlf	__tdiv_to_l_@quot+1,f
  6129     1751  0DA8               	rlf	__tdiv_to_l_@quot+2,f
  6130     1752  0DA9               	rlf	__tdiv_to_l_@quot+3,f
  6131     1753  0BF3               	decfsz	??__tdiv_to_l_,f
  6132     1754  2F4E               	goto	u5965
  6133     1755  3001               	movlw	1
  6134     1756  02AB               	subwf	__tdiv_to_l_@exp1,f
  6135     1757  2F49               	goto	l873
  6136     1758                     l4370:
  6137     1758  0829               	movf	__tdiv_to_l_@quot+3,w
  6138     1759  00A3               	movwf	?__tdiv_to_l_+3
  6139     175A  0828               	movf	__tdiv_to_l_@quot+2,w
  6140     175B  00A2               	movwf	?__tdiv_to_l_+2
  6141     175C  0827               	movf	__tdiv_to_l_@quot+1,w
  6142     175D  00A1               	movwf	?__tdiv_to_l_+1
  6143     175E  0826               	movf	__tdiv_to_l_@quot,w
  6144     175F  00A0               	movwf	?__tdiv_to_l_
  6145     1760  0008               	return
  6146     1761                     __end_of__tdiv_to_l_:
  6147                           
  6148                           	psect	text16
  6149     0B09                     __ptext16:	
  6150 ;; *************** function __div_to_l_ *****************
  6151 ;; Defined at:
  6152 ;;		line 60 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c90\common\fldivl.c"
  6153 ;; Parameters:    Size  Location     Type
  6154 ;;  f1              3    0[BANK0 ] unsigned long 
  6155 ;;  f2              3    3[BANK0 ] unsigned long 
  6156 ;; Auto vars:     Size  Location     Type
  6157 ;;  quot            4   14[BANK0 ] unsigned long 
  6158 ;;  exp1            1   19[BANK0 ] unsigned char 
  6159 ;;  cntr            1   18[BANK0 ] unsigned char 
  6160 ;; Return value:  Size  Location     Type
  6161 ;;                  4    0[BANK0 ] unsigned long 
  6162 ;; Registers used:
  6163 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6164 ;; Tracked objects:
  6165 ;;		On entry : 0/0
  6166 ;;		On exit  : 300/0
  6167 ;;		Unchanged: 0/0
  6168 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6169 ;;      Params:         0       6       0       0       0
  6170 ;;      Locals:         0       6       0       0       0
  6171 ;;      Temps:          0       8       0       0       0
  6172 ;;      Totals:         0      20       0       0       0
  6173 ;;Total ram usage:       20 bytes
  6174 ;; Hardware stack levels used: 1
  6175 ;; Hardware stack levels required when called: 1
  6176 ;; This function calls:
  6177 ;;		Nothing
  6178 ;; This function is called by:
  6179 ;;		_sprintf
  6180 ;; This function uses a non-reentrant model
  6181 ;;
  6182                           
  6183     0B09                     __div_to_l_:	
  6184                           ;psect for function __div_to_l_
  6185                           
  6186                           
  6187                           ;incstack = 0
  6188                           ; Regs used in __div_to_l_: [wreg-fsr0h+status,2+status,0]
  6189     0B09  3020               	movlw	low (__div_to_l_@f1| 0)
  6190     0B0A  0084               	movwf	4
  6191     0B0B  1383               	bcf	3,7	;select IRP bank0
  6192     0B0C  0800               	movf	0,w
  6193     0B0D  1283               	bcf	3,5	;RP0=0, select bank0
  6194     0B0E  1303               	bcf	3,6	;RP1=0, select bank0
  6195     0B0F  00A6               	movwf	??__div_to_l_
  6196     0B10  0A84               	incf	4,f
  6197     0B11  0800               	movf	0,w
  6198     0B12  00A7               	movwf	??__div_to_l_+1
  6199     0B13  0A84               	incf	4,f
  6200     0B14  0800               	movf	0,w
  6201     0B15  00A8               	movwf	??__div_to_l_+2
  6202     0B16  0A84               	incf	4,f
  6203     0B17  0800               	movf	0,w
  6204     0B18  00A9               	movwf	??__div_to_l_+3
  6205     0B19  1003               	clrc
  6206     0B1A  0D28               	rlf	??__div_to_l_+2,w
  6207     0B1B  0D29               	rlf	??__div_to_l_+3,w
  6208     0B1C  00B3               	movwf	__div_to_l_@exp1
  6209     0B1D  0833               	movf	__div_to_l_@exp1,w
  6210     0B1E  1D03               	btfss	3,2
  6211     0B1F  2B29               	goto	l4380
  6212     0B20                     l4376:
  6213     0B20  3000               	movlw	0
  6214     0B21  00A3               	movwf	?__div_to_l_+3
  6215     0B22  3000               	movlw	0
  6216     0B23  00A2               	movwf	?__div_to_l_+2
  6217     0B24  3000               	movlw	0
  6218     0B25  00A1               	movwf	?__div_to_l_+1
  6219     0B26  3000               	movlw	0
  6220     0B27  00A0               	movwf	?__div_to_l_
  6221     0B28  0008               	return
  6222     0B29                     l4380:
  6223     0B29  3023               	movlw	low (__div_to_l_@f2| 0)
  6224     0B2A  0084               	movwf	4
  6225     0B2B  0800               	movf	0,w
  6226     0B2C  00A6               	movwf	??__div_to_l_
  6227     0B2D  0A84               	incf	4,f
  6228     0B2E  0800               	movf	0,w
  6229     0B2F  00A7               	movwf	??__div_to_l_+1
  6230     0B30  0A84               	incf	4,f
  6231     0B31  0800               	movf	0,w
  6232     0B32  00A8               	movwf	??__div_to_l_+2
  6233     0B33  0A84               	incf	4,f
  6234     0B34  0800               	movf	0,w
  6235     0B35  00A9               	movwf	??__div_to_l_+3
  6236     0B36  1003               	clrc
  6237     0B37  0D28               	rlf	??__div_to_l_+2,w
  6238     0B38  0D29               	rlf	??__div_to_l_+3,w
  6239     0B39  00B2               	movwf	__div_to_l_@cntr
  6240     0B3A  0832               	movf	__div_to_l_@cntr,w
  6241     0B3B  1903               	btfsc	3,2
  6242     0B3C  2B20               	goto	l4376
  6243     0B3D  3020               	movlw	low (__div_to_l_@f1| 0)
  6244     0B3E  0084               	movwf	4
  6245     0B3F  3000               	movlw	0
  6246     0B40  0480               	iorwf	0,f
  6247     0B41  0A84               	incf	4,f
  6248     0B42  3000               	movlw	0
  6249     0B43  0480               	iorwf	0,f
  6250     0B44  0A84               	incf	4,f
  6251     0B45  3080               	movlw	128
  6252     0B46  0480               	iorwf	0,f
  6253     0B47  0A84               	incf	4,f
  6254     0B48  3000               	movlw	0
  6255     0B49  0480               	iorwf	0,f
  6256     0B4A  3020               	movlw	low (__div_to_l_@f1| 0)
  6257     0B4B  0084               	movwf	4
  6258     0B4C  30FF               	movlw	255
  6259     0B4D  0580               	andwf	0,f
  6260     0B4E  0A84               	incf	4,f
  6261     0B4F  30FF               	movlw	255
  6262     0B50  0580               	andwf	0,f
  6263     0B51  0A84               	incf	4,f
  6264     0B52  30FF               	movlw	255
  6265     0B53  0580               	andwf	0,f
  6266     0B54  0A84               	incf	4,f
  6267     0B55  3000               	movlw	0
  6268     0B56  0580               	andwf	0,f
  6269     0B57  3023               	movlw	low (__div_to_l_@f2| 0)
  6270     0B58  0084               	movwf	4
  6271     0B59  3000               	movlw	0
  6272     0B5A  0480               	iorwf	0,f
  6273     0B5B  0A84               	incf	4,f
  6274     0B5C  3000               	movlw	0
  6275     0B5D  0480               	iorwf	0,f
  6276     0B5E  0A84               	incf	4,f
  6277     0B5F  3080               	movlw	128
  6278     0B60  0480               	iorwf	0,f
  6279     0B61  0A84               	incf	4,f
  6280     0B62  3000               	movlw	0
  6281     0B63  0480               	iorwf	0,f
  6282     0B64  3023               	movlw	low (__div_to_l_@f2| 0)
  6283     0B65  0084               	movwf	4
  6284     0B66  30FF               	movlw	255
  6285     0B67  0580               	andwf	0,f
  6286     0B68  0A84               	incf	4,f
  6287     0B69  30FF               	movlw	255
  6288     0B6A  0580               	andwf	0,f
  6289     0B6B  0A84               	incf	4,f
  6290     0B6C  30FF               	movlw	255
  6291     0B6D  0580               	andwf	0,f
  6292     0B6E  0A84               	incf	4,f
  6293     0B6F  3000               	movlw	0
  6294     0B70  0580               	andwf	0,f
  6295     0B71  3000               	movlw	0
  6296     0B72  00B1               	movwf	__div_to_l_@quot+3
  6297     0B73  3000               	movlw	0
  6298     0B74  00B0               	movwf	__div_to_l_@quot+2
  6299     0B75  3000               	movlw	0
  6300     0B76  00AF               	movwf	__div_to_l_@quot+1
  6301     0B77  3000               	movlw	0
  6302     0B78  00AE               	movwf	__div_to_l_@quot
  6303     0B79  307F               	movlw	127
  6304     0B7A  02B3               	subwf	__div_to_l_@exp1,f
  6305     0B7B  30A0               	movlw	160
  6306     0B7C  0732               	addwf	__div_to_l_@cntr,w
  6307     0B7D  00A6               	movwf	??__div_to_l_
  6308     0B7E  0826               	movf	??__div_to_l_,w
  6309     0B7F  02B3               	subwf	__div_to_l_@exp1,f
  6310     0B80  3020               	movlw	32
  6311     0B81  00B2               	movwf	__div_to_l_@cntr
  6312     0B82                     l4396:
  6313     0B82  3001               	movlw	1
  6314     0B83  00A6               	movwf	??__div_to_l_
  6315     0B84                     u6005:
  6316     0B84  1003               	clrc
  6317     0B85  0DAE               	rlf	__div_to_l_@quot,f
  6318     0B86  0DAF               	rlf	__div_to_l_@quot+1,f
  6319     0B87  0DB0               	rlf	__div_to_l_@quot+2,f
  6320     0B88  0DB1               	rlf	__div_to_l_@quot+3,f
  6321     0B89  0BA6               	decfsz	??__div_to_l_,f
  6322     0B8A  2B84               	goto	u6005
  6323     0B8B  3023               	movlw	low (__div_to_l_@f2| 0)
  6324     0B8C  0084               	movwf	4
  6325     0B8D  0800               	movf	0,w
  6326     0B8E  00A6               	movwf	??__div_to_l_
  6327     0B8F  0A84               	incf	4,f
  6328     0B90  0800               	movf	0,w
  6329     0B91  00A7               	movwf	??__div_to_l_+1
  6330     0B92  0A84               	incf	4,f
  6331     0B93  0800               	movf	0,w
  6332     0B94  00A8               	movwf	??__div_to_l_+2
  6333     0B95  0A84               	incf	4,f
  6334     0B96  0800               	movf	0,w
  6335     0B97  00A9               	movwf	??__div_to_l_+3
  6336     0B98  3020               	movlw	low (__div_to_l_@f1| 0)
  6337     0B99  0084               	movwf	4
  6338     0B9A  0800               	movf	0,w
  6339     0B9B  00AA               	movwf	??__div_to_l_+4
  6340     0B9C  0A84               	incf	4,f
  6341     0B9D  0800               	movf	0,w
  6342     0B9E  00AB               	movwf	??__div_to_l_+5
  6343     0B9F  0A84               	incf	4,f
  6344     0BA0  0800               	movf	0,w
  6345     0BA1  00AC               	movwf	??__div_to_l_+6
  6346     0BA2  0A84               	incf	4,f
  6347     0BA3  0800               	movf	0,w
  6348     0BA4  00AD               	movwf	??__div_to_l_+7
  6349     0BA5  0829               	movf	??__div_to_l_+3,w
  6350     0BA6  022D               	subwf	??__div_to_l_+7,w
  6351     0BA7  1D03               	skipz
  6352     0BA8  2BB3               	goto	u6015
  6353     0BA9  0828               	movf	??__div_to_l_+2,w
  6354     0BAA  022C               	subwf	??__div_to_l_+6,w
  6355     0BAB  1D03               	skipz
  6356     0BAC  2BB3               	goto	u6015
  6357     0BAD  0827               	movf	??__div_to_l_+1,w
  6358     0BAE  022B               	subwf	??__div_to_l_+5,w
  6359     0BAF  1D03               	skipz
  6360     0BB0  2BB3               	goto	u6015
  6361     0BB1  0826               	movf	??__div_to_l_,w
  6362     0BB2  022A               	subwf	??__div_to_l_+4,w
  6363     0BB3                     u6015:
  6364     0BB3  1C03               	skipc
  6365     0BB4  2BD8               	goto	l786
  6366     0BB5  3023               	movlw	low (__div_to_l_@f2| 0)
  6367     0BB6  0084               	movwf	4
  6368     0BB7  0800               	movf	0,w
  6369     0BB8  00A6               	movwf	??__div_to_l_
  6370     0BB9  0A84               	incf	4,f
  6371     0BBA  0800               	movf	0,w
  6372     0BBB  00A7               	movwf	??__div_to_l_+1
  6373     0BBC  0A84               	incf	4,f
  6374     0BBD  0800               	movf	0,w
  6375     0BBE  00A8               	movwf	??__div_to_l_+2
  6376     0BBF  0A84               	incf	4,f
  6377     0BC0  0800               	movf	0,w
  6378     0BC1  00A9               	movwf	??__div_to_l_+3
  6379     0BC2  3020               	movlw	low (__div_to_l_@f1| 0)
  6380     0BC3  0084               	movwf	4
  6381     0BC4  0826               	movf	??__div_to_l_,w
  6382     0BC5  0280               	subwf	0,f
  6383     0BC6  0A84               	incf	4,f
  6384     0BC7  0827               	movf	??__div_to_l_+1,w
  6385     0BC8  1C03               	skipc
  6386     0BC9  0F27               	incfsz	??__div_to_l_+1,w
  6387     0BCA  0280               	subwf	0,f
  6388     0BCB  0A84               	incf	4,f
  6389     0BCC  0828               	movf	??__div_to_l_+2,w
  6390     0BCD  1C03               	skipc
  6391     0BCE  0F28               	incfsz	??__div_to_l_+2,w
  6392     0BCF  0280               	subwf	0,f
  6393     0BD0  0A84               	incf	4,f
  6394     0BD1  0829               	movf	??__div_to_l_+3,w
  6395     0BD2  1C03               	skipc
  6396     0BD3  0A29               	incf	??__div_to_l_+3,w
  6397     0BD4  0280               	subwf	0,f
  6398     0BD5  3003               	movlw	3
  6399     0BD6  0284               	subwf	4,f
  6400     0BD7  142E               	bsf	__div_to_l_@quot,0
  6401     0BD8                     l786:
  6402     0BD8  3020               	movlw	low (__div_to_l_@f1| 0)
  6403     0BD9  0084               	movwf	4
  6404     0BDA  1003               	clrc
  6405     0BDB  0D80               	rlf	0,f
  6406     0BDC  0A84               	incf	4,f
  6407     0BDD  0D80               	rlf	0,f
  6408     0BDE  0A84               	incf	4,f
  6409     0BDF  0D80               	rlf	0,f
  6410     0BE0  0A84               	incf	4,f
  6411     0BE1  0D80               	rlf	0,f
  6412     0BE2  0384               	decf	4,f
  6413     0BE3  0384               	decf	4,f
  6414     0BE4  0384               	decf	4,f
  6415     0BE5  3001               	movlw	1
  6416     0BE6  02B2               	subwf	__div_to_l_@cntr,f
  6417     0BE7  1D03               	btfss	3,2
  6418     0BE8  2B82               	goto	l4396
  6419     0BE9  1FB3               	btfss	__div_to_l_@exp1,7
  6420     0BEA  2BFE               	goto	l4414
  6421     0BEB  0833               	movf	__div_to_l_@exp1,w
  6422     0BEC  3A80               	xorlw	128
  6423     0BED  3E9F               	addlw	159
  6424     0BEE  1C03               	btfss	3,0
  6425     0BEF  2B20               	goto	l4376
  6426     0BF0                     l4412:
  6427     0BF0  3001               	movlw	1
  6428     0BF1                     u6055:
  6429     0BF1  1003               	clrc
  6430     0BF2  0CB1               	rrf	__div_to_l_@quot+3,f
  6431     0BF3  0CB0               	rrf	__div_to_l_@quot+2,f
  6432     0BF4  0CAF               	rrf	__div_to_l_@quot+1,f
  6433     0BF5  0CAE               	rrf	__div_to_l_@quot,f
  6434     0BF6  3EFF               	addlw	-1
  6435     0BF7  1D03               	skipz
  6436     0BF8  2BF1               	goto	u6055
  6437     0BF9  3001               	movlw	1
  6438     0BFA  07B3               	addwf	__div_to_l_@exp1,f
  6439     0BFB  1903               	btfsc	3,2
  6440     0BFC  2C11               	goto	l4422
  6441     0BFD  2BF0               	goto	l4412
  6442     0BFE                     l4414:
  6443     0BFE  3020               	movlw	32
  6444     0BFF  0233               	subwf	__div_to_l_@exp1,w
  6445     0C00  1803               	btfsc	3,0
  6446     0C01  2B20               	goto	l4376
  6447     0C02                     l794:
  6448     0C02  0833               	movf	__div_to_l_@exp1,w
  6449     0C03  1903               	btfsc	3,2
  6450     0C04  2C11               	goto	l4422
  6451     0C05  3001               	movlw	1
  6452     0C06  00A6               	movwf	??__div_to_l_
  6453     0C07                     u6085:
  6454     0C07  1003               	clrc
  6455     0C08  0DAE               	rlf	__div_to_l_@quot,f
  6456     0C09  0DAF               	rlf	__div_to_l_@quot+1,f
  6457     0C0A  0DB0               	rlf	__div_to_l_@quot+2,f
  6458     0C0B  0DB1               	rlf	__div_to_l_@quot+3,f
  6459     0C0C  0BA6               	decfsz	??__div_to_l_,f
  6460     0C0D  2C07               	goto	u6085
  6461     0C0E  3001               	movlw	1
  6462     0C0F  02B3               	subwf	__div_to_l_@exp1,f
  6463     0C10  2C02               	goto	l794
  6464     0C11                     l4422:
  6465     0C11  0831               	movf	__div_to_l_@quot+3,w
  6466     0C12  00A3               	movwf	?__div_to_l_+3
  6467     0C13  0830               	movf	__div_to_l_@quot+2,w
  6468     0C14  00A2               	movwf	?__div_to_l_+2
  6469     0C15  082F               	movf	__div_to_l_@quot+1,w
  6470     0C16  00A1               	movwf	?__div_to_l_+1
  6471     0C17  082E               	movf	__div_to_l_@quot,w
  6472     0C18  00A0               	movwf	?__div_to_l_
  6473     0C19  0008               	return
  6474     0C1A                     __end_of__div_to_l_:
  6475                           
  6476                           	psect	text17
  6477     1223                     __ptext17:	
  6478 ;; *************** function ___wmul *****************
  6479 ;; Defined at:
  6480 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c90\common\Umul16.c"
  6481 ;; Parameters:    Size  Location     Type
  6482 ;;  multiplier      2    3[COMMON] unsigned int 
  6483 ;;  multiplicand    2    5[COMMON] unsigned int 
  6484 ;; Auto vars:     Size  Location     Type
  6485 ;;  product         2    0[BANK0 ] unsigned int 
  6486 ;; Return value:  Size  Location     Type
  6487 ;;                  2    3[COMMON] unsigned int 
  6488 ;; Registers used:
  6489 ;;		wreg, status,2, status,0
  6490 ;; Tracked objects:
  6491 ;;		On entry : 300/100
  6492 ;;		On exit  : 300/0
  6493 ;;		Unchanged: 0/0
  6494 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6495 ;;      Params:         4       0       0       0       0
  6496 ;;      Locals:         0       2       0       0       0
  6497 ;;      Temps:          0       0       0       0       0
  6498 ;;      Totals:         4       2       0       0       0
  6499 ;;Total ram usage:        6 bytes
  6500 ;; Hardware stack levels used: 1
  6501 ;; Hardware stack levels required when called: 1
  6502 ;; This function calls:
  6503 ;;		Nothing
  6504 ;; This function is called by:
  6505 ;;		_sprintf
  6506 ;; This function uses a non-reentrant model
  6507 ;;
  6508                           
  6509     1223                     ___wmul:	
  6510                           ;psect for function ___wmul
  6511                           
  6512                           
  6513                           ;incstack = 0
  6514                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  6515     1223  1283               	bcf	3,5	;RP0=0, select bank0
  6516     1224  01A0               	clrf	___wmul@product
  6517     1225  01A1               	clrf	___wmul@product+1
  6518     1226                     l4428:
  6519     1226  1C73               	btfss	___wmul@multiplier,0
  6520     1227  2A2F               	goto	l577
  6521     1228  0875               	movf	___wmul@multiplicand,w
  6522     1229  1283               	bcf	3,5	;RP0=0, select bank0
  6523     122A  07A0               	addwf	___wmul@product,f
  6524     122B  1803               	skipnc
  6525     122C  0AA1               	incf	___wmul@product+1,f
  6526     122D  0876               	movf	___wmul@multiplicand+1,w
  6527     122E  07A1               	addwf	___wmul@product+1,f
  6528     122F                     l577:
  6529     122F  3001               	movlw	1
  6530     1230                     u6115:
  6531     1230  1003               	clrc
  6532     1231  0DF5               	rlf	___wmul@multiplicand,f
  6533     1232  0DF6               	rlf	___wmul@multiplicand+1,f
  6534     1233  3EFF               	addlw	-1
  6535     1234  1D03               	skipz
  6536     1235  2A30               	goto	u6115
  6537     1236  3001               	movlw	1
  6538     1237                     u6125:
  6539     1237  1003               	clrc
  6540     1238  0CF4               	rrf	___wmul@multiplier+1,f
  6541     1239  0CF3               	rrf	___wmul@multiplier,f
  6542     123A  3EFF               	addlw	-1
  6543     123B  1D03               	skipz
  6544     123C  2A37               	goto	u6125
  6545     123D  0873               	movf	___wmul@multiplier,w
  6546     123E  0474               	iorwf	___wmul@multiplier+1,w
  6547     123F  1D03               	btfss	3,2
  6548     1240  2A26               	goto	l4428
  6549     1241  1283               	bcf	3,5	;RP0=0, select bank0
  6550     1242  0821               	movf	___wmul@product+1,w
  6551     1243  00F4               	movwf	?___wmul+1
  6552     1244  0820               	movf	___wmul@product,w
  6553     1245  00F3               	movwf	?___wmul
  6554     1246  0008               	return
  6555     1247                     __end_of___wmul:
  6556                           
  6557                           	psect	text18
  6558     1247                     __ptext18:	
  6559 ;; *************** function ___lltoft *****************
  6560 ;; Defined at:
  6561 ;;		line 35 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c90\common\lltoft.c"
  6562 ;; Parameters:    Size  Location     Type
  6563 ;;  c               4    3[BANK0 ] unsigned long 
  6564 ;; Auto vars:     Size  Location     Type
  6565 ;;  exp             1    7[BANK0 ] unsigned char 
  6566 ;; Return value:  Size  Location     Type
  6567 ;;                  3    3[BANK0 ] float 
  6568 ;; Registers used:
  6569 ;;		wreg, status,2, status,0, pclath, cstack
  6570 ;; Tracked objects:
  6571 ;;		On entry : 300/0
  6572 ;;		On exit  : 300/0
  6573 ;;		Unchanged: 0/0
  6574 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6575 ;;      Params:         0       4       0       0       0
  6576 ;;      Locals:         0       1       0       0       0
  6577 ;;      Temps:          0       0       0       0       0
  6578 ;;      Totals:         0       5       0       0       0
  6579 ;;Total ram usage:        5 bytes
  6580 ;; Hardware stack levels used: 1
  6581 ;; Hardware stack levels required when called: 2
  6582 ;; This function calls:
  6583 ;;		___ftpack
  6584 ;; This function is called by:
  6585 ;;		_sprintf
  6586 ;; This function uses a non-reentrant model
  6587 ;;
  6588                           
  6589     1247                     ___lltoft:	
  6590                           ;psect for function ___lltoft
  6591                           
  6592                           
  6593                           ;incstack = 0
  6594                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
  6595     1247  308E               	movlw	142
  6596     1248  00A7               	movwf	___lltoft@exp
  6597     1249                     l4566:
  6598     1249  30FF               	movlw	255
  6599     124A  0526               	andwf	___lltoft@c+3,w
  6600     124B  1903               	btfsc	3,2
  6601     124C  2A59               	goto	l4568
  6602     124D  3001               	movlw	1
  6603     124E                     u6425:
  6604     124E  1003               	clrc
  6605     124F  0CA6               	rrf	___lltoft@c+3,f
  6606     1250  0CA5               	rrf	___lltoft@c+2,f
  6607     1251  0CA4               	rrf	___lltoft@c+1,f
  6608     1252  0CA3               	rrf	___lltoft@c,f
  6609     1253  3EFF               	addlw	-1
  6610     1254  1D03               	skipz
  6611     1255  2A4E               	goto	u6425
  6612     1256  3001               	movlw	1
  6613     1257  07A7               	addwf	___lltoft@exp,f
  6614     1258  2A49               	goto	l4566
  6615     1259                     l4568:
  6616     1259  0823               	movf	___lltoft@c,w
  6617     125A  00F3               	movwf	___ftpack@arg
  6618     125B  0824               	movf	___lltoft@c+1,w
  6619     125C  00F4               	movwf	___ftpack@arg+1
  6620     125D  0825               	movf	___lltoft@c+2,w
  6621     125E  00F5               	movwf	___ftpack@arg+2
  6622     125F  0827               	movf	___lltoft@exp,w
  6623     1260  00F6               	movwf	___ftpack@exp
  6624     1261  01F7               	clrf	___ftpack@sign
  6625     1262  160A  118A  25E9   	fcall	___ftpack
  6626     1265  0873               	movf	?___ftpack,w
  6627     1266  00A3               	movwf	?___lltoft
  6628     1267  0874               	movf	?___ftpack+1,w
  6629     1268  00A4               	movwf	?___lltoft+1
  6630     1269  0875               	movf	?___ftpack+2,w
  6631     126A  00A5               	movwf	?___lltoft+2
  6632     126B  0008               	return
  6633     126C                     __end_of___lltoft:
  6634                           
  6635                           	psect	text19
  6636     1441                     __ptext19:	
  6637 ;; *************** function ___llmod *****************
  6638 ;; Defined at:
  6639 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c90\common\llmod.c"
  6640 ;; Parameters:    Size  Location     Type
  6641 ;;  divisor         4   13[BANK0 ] unsigned long 
  6642 ;;  dividend        4   17[BANK0 ] unsigned long 
  6643 ;; Auto vars:     Size  Location     Type
  6644 ;;  counter         1    5[COMMON] unsigned char 
  6645 ;; Return value:  Size  Location     Type
  6646 ;;                  4   13[BANK0 ] unsigned long 
  6647 ;; Registers used:
  6648 ;;		wreg, status,2, status,0
  6649 ;; Tracked objects:
  6650 ;;		On entry : 300/0
  6651 ;;		On exit  : 300/0
  6652 ;;		Unchanged: 0/0
  6653 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6654 ;;      Params:         0       8       0       0       0
  6655 ;;      Locals:         1       0       0       0       0
  6656 ;;      Temps:          1       0       0       0       0
  6657 ;;      Totals:         2       8       0       0       0
  6658 ;;Total ram usage:       10 bytes
  6659 ;; Hardware stack levels used: 1
  6660 ;; Hardware stack levels required when called: 1
  6661 ;; This function calls:
  6662 ;;		Nothing
  6663 ;; This function is called by:
  6664 ;;		_sprintf
  6665 ;; This function uses a non-reentrant model
  6666 ;;
  6667                           
  6668     1441                     ___llmod:	
  6669                           ;psect for function ___llmod
  6670                           
  6671                           
  6672                           ;incstack = 0
  6673                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  6674     1441  0830               	movf	___llmod@divisor+3,w
  6675     1442  042F               	iorwf	___llmod@divisor+2,w
  6676     1443  042E               	iorwf	___llmod@divisor+1,w
  6677     1444  042D               	iorwf	___llmod@divisor,w
  6678     1445  1903               	skipnz
  6679     1446  2C82               	goto	l4558
  6680     1447  3001               	movlw	1
  6681     1448  00F5               	movwf	___llmod@counter
  6682     1449                     l4548:
  6683     1449  1BB0               	btfsc	___llmod@divisor+3,7
  6684     144A  2C57               	goto	l4550
  6685     144B  3001               	movlw	1
  6686     144C  00F4               	movwf	??___llmod
  6687     144D                     u6375:
  6688     144D  1003               	clrc
  6689     144E  0DAD               	rlf	___llmod@divisor,f
  6690     144F  0DAE               	rlf	___llmod@divisor+1,f
  6691     1450  0DAF               	rlf	___llmod@divisor+2,f
  6692     1451  0DB0               	rlf	___llmod@divisor+3,f
  6693     1452  0BF4               	decfsz	??___llmod,f
  6694     1453  2C4D               	goto	u6375
  6695     1454  3001               	movlw	1
  6696     1455  07F5               	addwf	___llmod@counter,f
  6697     1456  2C49               	goto	l4548
  6698     1457                     l4550:
  6699     1457  0830               	movf	___llmod@divisor+3,w
  6700     1458  0234               	subwf	___llmod@dividend+3,w
  6701     1459  1D03               	skipz
  6702     145A  2C65               	goto	u6395
  6703     145B  082F               	movf	___llmod@divisor+2,w
  6704     145C  0233               	subwf	___llmod@dividend+2,w
  6705     145D  1D03               	skipz
  6706     145E  2C65               	goto	u6395
  6707     145F  082E               	movf	___llmod@divisor+1,w
  6708     1460  0232               	subwf	___llmod@dividend+1,w
  6709     1461  1D03               	skipz
  6710     1462  2C65               	goto	u6395
  6711     1463  082D               	movf	___llmod@divisor,w
  6712     1464  0231               	subwf	___llmod@dividend,w
  6713     1465                     u6395:
  6714     1465  1C03               	skipc
  6715     1466  2C75               	goto	l4554
  6716     1467  082D               	movf	___llmod@divisor,w
  6717     1468  02B1               	subwf	___llmod@dividend,f
  6718     1469  082E               	movf	___llmod@divisor+1,w
  6719     146A  1C03               	skipc
  6720     146B  0F2E               	incfsz	___llmod@divisor+1,w
  6721     146C  02B2               	subwf	___llmod@dividend+1,f
  6722     146D  082F               	movf	___llmod@divisor+2,w
  6723     146E  1C03               	skipc
  6724     146F  0F2F               	incfsz	___llmod@divisor+2,w
  6725     1470  02B3               	subwf	___llmod@dividend+2,f
  6726     1471  0830               	movf	___llmod@divisor+3,w
  6727     1472  1C03               	skipc
  6728     1473  0F30               	incfsz	___llmod@divisor+3,w
  6729     1474  02B4               	subwf	___llmod@dividend+3,f
  6730     1475                     l4554:
  6731     1475  3001               	movlw	1
  6732     1476                     u6405:
  6733     1476  1003               	clrc
  6734     1477  0CB0               	rrf	___llmod@divisor+3,f
  6735     1478  0CAF               	rrf	___llmod@divisor+2,f
  6736     1479  0CAE               	rrf	___llmod@divisor+1,f
  6737     147A  0CAD               	rrf	___llmod@divisor,f
  6738     147B  3EFF               	addlw	-1
  6739     147C  1D03               	skipz
  6740     147D  2C76               	goto	u6405
  6741     147E  3001               	movlw	1
  6742     147F  02F5               	subwf	___llmod@counter,f
  6743     1480  1D03               	btfss	3,2
  6744     1481  2C57               	goto	l4550
  6745     1482                     l4558:
  6746     1482  0834               	movf	___llmod@dividend+3,w
  6747     1483  00B0               	movwf	?___llmod+3
  6748     1484  0833               	movf	___llmod@dividend+2,w
  6749     1485  00AF               	movwf	?___llmod+2
  6750     1486  0832               	movf	___llmod@dividend+1,w
  6751     1487  00AE               	movwf	?___llmod+1
  6752     1488  0831               	movf	___llmod@dividend,w
  6753     1489  00AD               	movwf	?___llmod
  6754     148A  0008               	return
  6755     148B                     __end_of___llmod:
  6756                           
  6757                           	psect	text20
  6758     1530                     __ptext20:	
  6759 ;; *************** function ___lldiv *****************
  6760 ;; Defined at:
  6761 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c90\common\__lldiv.c"
  6762 ;; Parameters:    Size  Location     Type
  6763 ;;  divisor         4    0[BANK0 ] unsigned long 
  6764 ;;  dividend        4    4[BANK0 ] unsigned long 
  6765 ;; Auto vars:     Size  Location     Type
  6766 ;;  quotient        4    8[BANK0 ] unsigned long 
  6767 ;;  counter         1   12[BANK0 ] unsigned char 
  6768 ;; Return value:  Size  Location     Type
  6769 ;;                  4    0[BANK0 ] unsigned long 
  6770 ;; Registers used:
  6771 ;;		wreg, status,2, status,0
  6772 ;; Tracked objects:
  6773 ;;		On entry : 300/0
  6774 ;;		On exit  : 300/0
  6775 ;;		Unchanged: 0/0
  6776 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6777 ;;      Params:         0       8       0       0       0
  6778 ;;      Locals:         0       5       0       0       0
  6779 ;;      Temps:          1       0       0       0       0
  6780 ;;      Totals:         1      13       0       0       0
  6781 ;;Total ram usage:       14 bytes
  6782 ;; Hardware stack levels used: 1
  6783 ;; Hardware stack levels required when called: 1
  6784 ;; This function calls:
  6785 ;;		Nothing
  6786 ;; This function is called by:
  6787 ;;		_sprintf
  6788 ;; This function uses a non-reentrant model
  6789 ;;
  6790                           
  6791     1530                     ___lldiv:	
  6792                           ;psect for function ___lldiv
  6793                           
  6794                           
  6795                           ;incstack = 0
  6796                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  6797     1530  3000               	movlw	0
  6798     1531  00AB               	movwf	___lldiv@quotient+3
  6799     1532  3000               	movlw	0
  6800     1533  00AA               	movwf	___lldiv@quotient+2
  6801     1534  3000               	movlw	0
  6802     1535  00A9               	movwf	___lldiv@quotient+1
  6803     1536  3000               	movlw	0
  6804     1537  00A8               	movwf	___lldiv@quotient
  6805     1538  0823               	movf	___lldiv@divisor+3,w
  6806     1539  0422               	iorwf	___lldiv@divisor+2,w
  6807     153A  0421               	iorwf	___lldiv@divisor+1,w
  6808     153B  0420               	iorwf	___lldiv@divisor,w
  6809     153C  1903               	skipnz
  6810     153D  2D83               	goto	l4460
  6811     153E  3001               	movlw	1
  6812     153F  00AC               	movwf	___lldiv@counter
  6813     1540                     l4446:
  6814     1540  1BA3               	btfsc	___lldiv@divisor+3,7
  6815     1541  2D4E               	goto	l4448
  6816     1542  3001               	movlw	1
  6817     1543  00F3               	movwf	??___lldiv
  6818     1544                     u6155:
  6819     1544  1003               	clrc
  6820     1545  0DA0               	rlf	___lldiv@divisor,f
  6821     1546  0DA1               	rlf	___lldiv@divisor+1,f
  6822     1547  0DA2               	rlf	___lldiv@divisor+2,f
  6823     1548  0DA3               	rlf	___lldiv@divisor+3,f
  6824     1549  0BF3               	decfsz	??___lldiv,f
  6825     154A  2D44               	goto	u6155
  6826     154B  3001               	movlw	1
  6827     154C  07AC               	addwf	___lldiv@counter,f
  6828     154D  2D40               	goto	l4446
  6829     154E                     l4448:
  6830     154E  3001               	movlw	1
  6831     154F  00F3               	movwf	??___lldiv
  6832     1550                     u6175:
  6833     1550  1003               	clrc
  6834     1551  0DA8               	rlf	___lldiv@quotient,f
  6835     1552  0DA9               	rlf	___lldiv@quotient+1,f
  6836     1553  0DAA               	rlf	___lldiv@quotient+2,f
  6837     1554  0DAB               	rlf	___lldiv@quotient+3,f
  6838     1555  0BF3               	decfsz	??___lldiv,f
  6839     1556  2D50               	goto	u6175
  6840     1557  0823               	movf	___lldiv@divisor+3,w
  6841     1558  0227               	subwf	___lldiv@dividend+3,w
  6842     1559  1D03               	skipz
  6843     155A  2D65               	goto	u6185
  6844     155B  0822               	movf	___lldiv@divisor+2,w
  6845     155C  0226               	subwf	___lldiv@dividend+2,w
  6846     155D  1D03               	skipz
  6847     155E  2D65               	goto	u6185
  6848     155F  0821               	movf	___lldiv@divisor+1,w
  6849     1560  0225               	subwf	___lldiv@dividend+1,w
  6850     1561  1D03               	skipz
  6851     1562  2D65               	goto	u6185
  6852     1563  0820               	movf	___lldiv@divisor,w
  6853     1564  0224               	subwf	___lldiv@dividend,w
  6854     1565                     u6185:
  6855     1565  1C03               	skipc
  6856     1566  2D76               	goto	l4456
  6857     1567  0820               	movf	___lldiv@divisor,w
  6858     1568  02A4               	subwf	___lldiv@dividend,f
  6859     1569  0821               	movf	___lldiv@divisor+1,w
  6860     156A  1C03               	skipc
  6861     156B  0F21               	incfsz	___lldiv@divisor+1,w
  6862     156C  02A5               	subwf	___lldiv@dividend+1,f
  6863     156D  0822               	movf	___lldiv@divisor+2,w
  6864     156E  1C03               	skipc
  6865     156F  0F22               	incfsz	___lldiv@divisor+2,w
  6866     1570  02A6               	subwf	___lldiv@dividend+2,f
  6867     1571  0823               	movf	___lldiv@divisor+3,w
  6868     1572  1C03               	skipc
  6869     1573  0F23               	incfsz	___lldiv@divisor+3,w
  6870     1574  02A7               	subwf	___lldiv@dividend+3,f
  6871     1575  1428               	bsf	___lldiv@quotient,0
  6872     1576                     l4456:
  6873     1576  3001               	movlw	1
  6874     1577                     u6195:
  6875     1577  1003               	clrc
  6876     1578  0CA3               	rrf	___lldiv@divisor+3,f
  6877     1579  0CA2               	rrf	___lldiv@divisor+2,f
  6878     157A  0CA1               	rrf	___lldiv@divisor+1,f
  6879     157B  0CA0               	rrf	___lldiv@divisor,f
  6880     157C  3EFF               	addlw	-1
  6881     157D  1D03               	skipz
  6882     157E  2D77               	goto	u6195
  6883     157F  3001               	movlw	1
  6884     1580  02AC               	subwf	___lldiv@counter,f
  6885     1581  1D03               	btfss	3,2
  6886     1582  2D4E               	goto	l4448
  6887     1583                     l4460:
  6888     1583  082B               	movf	___lldiv@quotient+3,w
  6889     1584  00A3               	movwf	?___lldiv+3
  6890     1585  082A               	movf	___lldiv@quotient+2,w
  6891     1586  00A2               	movwf	?___lldiv+2
  6892     1587  0829               	movf	___lldiv@quotient+1,w
  6893     1588  00A1               	movwf	?___lldiv+1
  6894     1589  0828               	movf	___lldiv@quotient,w
  6895     158A  00A0               	movwf	?___lldiv
  6896     158B  0008               	return
  6897     158C                     __end_of___lldiv:
  6898                           
  6899                           	psect	text21
  6900     080D                     __ptext21:	
  6901 ;; *************** function ___fttol *****************
  6902 ;; Defined at:
  6903 ;;		line 44 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c90\common\fttol.c"
  6904 ;; Parameters:    Size  Location     Type
  6905 ;;  f1              3   35[BANK0 ] float 
  6906 ;; Auto vars:     Size  Location     Type
  6907 ;;  lval            4   43[BANK0 ] unsigned long 
  6908 ;;  exp1            1   47[BANK0 ] unsigned char 
  6909 ;;  sign1           1   42[BANK0 ] unsigned char 
  6910 ;; Return value:  Size  Location     Type
  6911 ;;                  4   35[BANK0 ] long 
  6912 ;; Registers used:
  6913 ;;		wreg, status,2, status,0
  6914 ;; Tracked objects:
  6915 ;;		On entry : 300/0
  6916 ;;		On exit  : 300/0
  6917 ;;		Unchanged: 0/0
  6918 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6919 ;;      Params:         0       4       0       0       0
  6920 ;;      Locals:         0       6       0       0       0
  6921 ;;      Temps:          0       3       0       0       0
  6922 ;;      Totals:         0      13       0       0       0
  6923 ;;Total ram usage:       13 bytes
  6924 ;; Hardware stack levels used: 1
  6925 ;; Hardware stack levels required when called: 1
  6926 ;; This function calls:
  6927 ;;		Nothing
  6928 ;; This function is called by:
  6929 ;;		_sprintf
  6930 ;; This function uses a non-reentrant model
  6931 ;;
  6932                           
  6933     080D                     ___fttol:	
  6934                           ;psect for function ___fttol
  6935                           
  6936                           
  6937                           ;incstack = 0
  6938                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  6939     080D  0843               	movf	___fttol@f1,w
  6940     080E  00C7               	movwf	??___fttol
  6941     080F  0844               	movf	___fttol@f1+1,w
  6942     0810  00C8               	movwf	??___fttol+1
  6943     0811  0845               	movf	___fttol@f1+2,w
  6944     0812  00C9               	movwf	??___fttol+2
  6945     0813  1003               	clrc
  6946     0814  0D48               	rlf	??___fttol+1,w
  6947     0815  0D49               	rlf	??___fttol+2,w
  6948     0816  00CF               	movwf	___fttol@exp1
  6949     0817  084F               	movf	___fttol@exp1,w
  6950     0818  1D03               	btfss	3,2
  6951     0819  2823               	goto	l4506
  6952     081A                     l4502:
  6953     081A  3000               	movlw	0
  6954     081B  00C6               	movwf	?___fttol+3
  6955     081C  3000               	movlw	0
  6956     081D  00C5               	movwf	?___fttol+2
  6957     081E  3000               	movlw	0
  6958     081F  00C4               	movwf	?___fttol+1
  6959     0820  3000               	movlw	0
  6960     0821  00C3               	movwf	?___fttol
  6961     0822  0008               	return
  6962     0823                     l4506:
  6963     0823  0843               	movf	___fttol@f1,w
  6964     0824  00C7               	movwf	??___fttol
  6965     0825  0844               	movf	___fttol@f1+1,w
  6966     0826  00C8               	movwf	??___fttol+1
  6967     0827  0845               	movf	___fttol@f1+2,w
  6968     0828  00C9               	movwf	??___fttol+2
  6969     0829  3017               	movlw	23
  6970     082A                     u6275:
  6971     082A  1003               	clrc
  6972     082B  0CC9               	rrf	??___fttol+2,f
  6973     082C  0CC8               	rrf	??___fttol+1,f
  6974     082D  0CC7               	rrf	??___fttol,f
  6975     082E  3EFF               	addlw	-1
  6976     082F  1D03               	skipz
  6977     0830  282A               	goto	u6275
  6978     0831  0847               	movf	??___fttol,w
  6979     0832  00CA               	movwf	___fttol@sign1
  6980     0833  17C4               	bsf	___fttol@f1+1,7
  6981     0834  30FF               	movlw	255
  6982     0835  05C3               	andwf	___fttol@f1,f
  6983     0836  30FF               	movlw	255
  6984     0837  05C4               	andwf	___fttol@f1+1,f
  6985     0838  3000               	movlw	0
  6986     0839  05C5               	andwf	___fttol@f1+2,f
  6987     083A  0843               	movf	___fttol@f1,w
  6988     083B  00CB               	movwf	___fttol@lval
  6989     083C  0844               	movf	___fttol@f1+1,w
  6990     083D  00CC               	movwf	___fttol@lval+1
  6991     083E  0845               	movf	___fttol@f1+2,w
  6992     083F  00CD               	movwf	___fttol@lval+2
  6993     0840  01CE               	clrf	___fttol@lval+3
  6994     0841  308E               	movlw	142
  6995     0842  02CF               	subwf	___fttol@exp1,f
  6996     0843  1FCF               	btfss	___fttol@exp1,7
  6997     0844  2858               	goto	l4526
  6998     0845  084F               	movf	___fttol@exp1,w
  6999     0846  3A80               	xorlw	128
  7000     0847  3E8F               	addlw	143
  7001     0848  1C03               	btfss	3,0
  7002     0849  281A               	goto	l4502
  7003     084A                     l4524:
  7004     084A  3001               	movlw	1
  7005     084B                     u6305:
  7006     084B  1003               	clrc
  7007     084C  0CCE               	rrf	___fttol@lval+3,f
  7008     084D  0CCD               	rrf	___fttol@lval+2,f
  7009     084E  0CCC               	rrf	___fttol@lval+1,f
  7010     084F  0CCB               	rrf	___fttol@lval,f
  7011     0850  3EFF               	addlw	-1
  7012     0851  1D03               	skipz
  7013     0852  284B               	goto	u6305
  7014     0853  3001               	movlw	1
  7015     0854  07CF               	addwf	___fttol@exp1,f
  7016     0855  1903               	btfsc	3,2
  7017     0856  286B               	goto	l4534
  7018     0857  284A               	goto	l4524
  7019     0858                     l4526:
  7020     0858  3018               	movlw	24
  7021     0859  024F               	subwf	___fttol@exp1,w
  7022     085A  1803               	btfsc	3,0
  7023     085B  281A               	goto	l4502
  7024     085C                     l914:
  7025     085C  084F               	movf	___fttol@exp1,w
  7026     085D  1903               	btfsc	3,2
  7027     085E  286B               	goto	l4534
  7028     085F  3001               	movlw	1
  7029     0860  00C7               	movwf	??___fttol
  7030     0861                     u6335:
  7031     0861  1003               	clrc
  7032     0862  0DCB               	rlf	___fttol@lval,f
  7033     0863  0DCC               	rlf	___fttol@lval+1,f
  7034     0864  0DCD               	rlf	___fttol@lval+2,f
  7035     0865  0DCE               	rlf	___fttol@lval+3,f
  7036     0866  0BC7               	decfsz	??___fttol,f
  7037     0867  2861               	goto	u6335
  7038     0868  3001               	movlw	1
  7039     0869  02CF               	subwf	___fttol@exp1,f
  7040     086A  285C               	goto	l914
  7041     086B                     l4534:
  7042     086B  084A               	movf	___fttol@sign1,w
  7043     086C  1903               	btfsc	3,2
  7044     086D  2879               	goto	l4538
  7045     086E  09CB               	comf	___fttol@lval,f
  7046     086F  09CC               	comf	___fttol@lval+1,f
  7047     0870  09CD               	comf	___fttol@lval+2,f
  7048     0871  09CE               	comf	___fttol@lval+3,f
  7049     0872  0ACB               	incf	___fttol@lval,f
  7050     0873  1903               	skipnz
  7051     0874  0ACC               	incf	___fttol@lval+1,f
  7052     0875  1903               	skipnz
  7053     0876  0ACD               	incf	___fttol@lval+2,f
  7054     0877  1903               	skipnz
  7055     0878  0ACE               	incf	___fttol@lval+3,f
  7056     0879                     l4538:
  7057     0879  084E               	movf	___fttol@lval+3,w
  7058     087A  00C6               	movwf	?___fttol+3
  7059     087B  084D               	movf	___fttol@lval+2,w
  7060     087C  00C5               	movwf	?___fttol+2
  7061     087D  084C               	movf	___fttol@lval+1,w
  7062     087E  00C4               	movwf	?___fttol+1
  7063     087F  084B               	movf	___fttol@lval,w
  7064     0880  00C3               	movwf	?___fttol
  7065     0881  0008               	return
  7066     0882                     __end_of___fttol:
  7067                           
  7068                           	psect	text22
  7069     1187                     __ptext22:	
  7070 ;; *************** function ___ftsub *****************
  7071 ;; Defined at:
  7072 ;;		line 17 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c90\common\ftsub.c"
  7073 ;; Parameters:    Size  Location     Type
  7074 ;;  f2              3   50[BANK0 ] float 
  7075 ;;  f1              3   53[BANK0 ] float 
  7076 ;; Auto vars:     Size  Location     Type
  7077 ;;		None
  7078 ;; Return value:  Size  Location     Type
  7079 ;;                  3   50[BANK0 ] float 
  7080 ;; Registers used:
  7081 ;;		wreg, status,2, status,0, pclath, cstack
  7082 ;; Tracked objects:
  7083 ;;		On entry : 300/0
  7084 ;;		On exit  : 300/0
  7085 ;;		Unchanged: 0/0
  7086 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7087 ;;      Params:         0       6       0       0       0
  7088 ;;      Locals:         0       0       0       0       0
  7089 ;;      Temps:          0       0       0       0       0
  7090 ;;      Totals:         0       6       0       0       0
  7091 ;;Total ram usage:        6 bytes
  7092 ;; Hardware stack levels used: 1
  7093 ;; Hardware stack levels required when called: 3
  7094 ;; This function calls:
  7095 ;;		___ftadd
  7096 ;; This function is called by:
  7097 ;;		_sprintf
  7098 ;; This function uses a non-reentrant model
  7099 ;;
  7100                           
  7101     1187                     ___ftsub:	
  7102                           ;psect for function ___ftsub
  7103                           
  7104                           
  7105                           ;incstack = 0
  7106                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  7107     1187  0854               	movf	___ftsub@f2+2,w
  7108     1188  0453               	iorwf	___ftsub@f2+1,w
  7109     1189  0452               	iorwf	___ftsub@f2,w
  7110     118A  1903               	skipnz
  7111     118B  298E               	goto	l4496
  7112     118C  3080               	movlw	128
  7113     118D  06D4               	xorwf	___ftsub@f2+2,f
  7114     118E                     l4496:
  7115     118E  0855               	movf	___ftsub@f1,w
  7116     118F  00C6               	movwf	___ftadd@f1
  7117     1190  0856               	movf	___ftsub@f1+1,w
  7118     1191  00C7               	movwf	___ftadd@f1+1
  7119     1192  0857               	movf	___ftsub@f1+2,w
  7120     1193  00C8               	movwf	___ftadd@f1+2
  7121     1194  0852               	movf	___ftsub@f2,w
  7122     1195  00C9               	movwf	___ftadd@f2
  7123     1196  0853               	movf	___ftsub@f2+1,w
  7124     1197  00CA               	movwf	___ftadd@f2+1
  7125     1198  0854               	movf	___ftsub@f2+2,w
  7126     1199  00CB               	movwf	___ftadd@f2+2
  7127     119A  120A  158A  2212   	fcall	___ftadd
  7128     119D  0846               	movf	?___ftadd,w
  7129     119E  00D2               	movwf	?___ftsub
  7130     119F  0847               	movf	?___ftadd+1,w
  7131     11A0  00D3               	movwf	?___ftsub+1
  7132     11A1  0848               	movf	?___ftadd+2,w
  7133     11A2  00D4               	movwf	?___ftsub+2
  7134     11A3  0008               	return
  7135     11A4                     __end_of___ftsub:
  7136                           
  7137                           	psect	text23
  7138     0A12                     __ptext23:	
  7139 ;; *************** function ___ftadd *****************
  7140 ;; Defined at:
  7141 ;;		line 86 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c90\common\ftadd.c"
  7142 ;; Parameters:    Size  Location     Type
  7143 ;;  f1              3   38[BANK0 ] float 
  7144 ;;  f2              3   41[BANK0 ] float 
  7145 ;; Auto vars:     Size  Location     Type
  7146 ;;  exp1            1   49[BANK0 ] unsigned char 
  7147 ;;  exp2            1   48[BANK0 ] unsigned char 
  7148 ;;  sign            1   47[BANK0 ] unsigned char 
  7149 ;; Return value:  Size  Location     Type
  7150 ;;                  3   38[BANK0 ] float 
  7151 ;; Registers used:
  7152 ;;		wreg, status,2, status,0, pclath, cstack
  7153 ;; Tracked objects:
  7154 ;;		On entry : 300/0
  7155 ;;		On exit  : 300/0
  7156 ;;		Unchanged: 0/0
  7157 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7158 ;;      Params:         0       6       0       0       0
  7159 ;;      Locals:         0       3       0       0       0
  7160 ;;      Temps:          0       3       0       0       0
  7161 ;;      Totals:         0      12       0       0       0
  7162 ;;Total ram usage:       12 bytes
  7163 ;; Hardware stack levels used: 1
  7164 ;; Hardware stack levels required when called: 2
  7165 ;; This function calls:
  7166 ;;		___ftpack
  7167 ;; This function is called by:
  7168 ;;		_sprintf
  7169 ;;		___ftsub
  7170 ;; This function uses a non-reentrant model
  7171 ;;
  7172                           
  7173     0A12                     ___ftadd:	
  7174                           ;psect for function ___ftadd
  7175                           
  7176                           
  7177                           ;incstack = 0
  7178                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  7179     0A12  0846               	movf	___ftadd@f1,w
  7180     0A13  00CC               	movwf	??___ftadd
  7181     0A14  0847               	movf	___ftadd@f1+1,w
  7182     0A15  00CD               	movwf	??___ftadd+1
  7183     0A16  0848               	movf	___ftadd@f1+2,w
  7184     0A17  00CE               	movwf	??___ftadd+2
  7185     0A18  1003               	clrc
  7186     0A19  0D4D               	rlf	??___ftadd+1,w
  7187     0A1A  0D4E               	rlf	??___ftadd+2,w
  7188     0A1B  00D1               	movwf	___ftadd@exp1
  7189     0A1C  0849               	movf	___ftadd@f2,w
  7190     0A1D  00CC               	movwf	??___ftadd
  7191     0A1E  084A               	movf	___ftadd@f2+1,w
  7192     0A1F  00CD               	movwf	??___ftadd+1
  7193     0A20  084B               	movf	___ftadd@f2+2,w
  7194     0A21  00CE               	movwf	??___ftadd+2
  7195     0A22  1003               	clrc
  7196     0A23  0D4D               	rlf	??___ftadd+1,w
  7197     0A24  0D4E               	rlf	??___ftadd+2,w
  7198     0A25  00D0               	movwf	___ftadd@exp2
  7199     0A26  0851               	movf	___ftadd@exp1,w
  7200     0A27  1903               	btfsc	3,2
  7201     0A28  2A35               	goto	l4064
  7202     0A29  0850               	movf	___ftadd@exp2,w
  7203     0A2A  0251               	subwf	___ftadd@exp1,w
  7204     0A2B  1803               	skipnc
  7205     0A2C  2A3C               	goto	l4068
  7206     0A2D  0850               	movf	___ftadd@exp2,w
  7207     0A2E  00CC               	movwf	??___ftadd
  7208     0A2F  0851               	movf	___ftadd@exp1,w
  7209     0A30  02CC               	subwf	??___ftadd,f
  7210     0A31  3019               	movlw	25
  7211     0A32  024C               	subwf	??___ftadd,w
  7212     0A33  1C03               	skipc
  7213     0A34  2A3C               	goto	l4068
  7214     0A35                     l4064:
  7215     0A35  0849               	movf	___ftadd@f2,w
  7216     0A36  00C6               	movwf	?___ftadd
  7217     0A37  084A               	movf	___ftadd@f2+1,w
  7218     0A38  00C7               	movwf	?___ftadd+1
  7219     0A39  084B               	movf	___ftadd@f2+2,w
  7220     0A3A  00C8               	movwf	?___ftadd+2
  7221     0A3B  0008               	return
  7222     0A3C                     l4068:
  7223     0A3C  0850               	movf	___ftadd@exp2,w
  7224     0A3D  1903               	btfsc	3,2
  7225     0A3E  0008               	return
  7226     0A3F  0851               	movf	___ftadd@exp1,w
  7227     0A40  0250               	subwf	___ftadd@exp2,w
  7228     0A41  1803               	skipnc
  7229     0A42  2A4B               	goto	l824
  7230     0A43  0851               	movf	___ftadd@exp1,w
  7231     0A44  00CC               	movwf	??___ftadd
  7232     0A45  0850               	movf	___ftadd@exp2,w
  7233     0A46  02CC               	subwf	??___ftadd,f
  7234     0A47  3019               	movlw	25
  7235     0A48  024C               	subwf	??___ftadd,w
  7236     0A49  1803               	btfsc	3,0
  7237     0A4A  0008               	return
  7238     0A4B                     l824:
  7239     0A4B  3006               	movlw	6
  7240     0A4C  00CF               	movwf	___ftadd@sign
  7241     0A4D  1BC8               	btfsc	___ftadd@f1+2,7
  7242     0A4E  17CF               	bsf	___ftadd@sign,7
  7243     0A4F  1BCB               	btfsc	___ftadd@f2+2,7
  7244     0A50  174F               	bsf	___ftadd@sign,6
  7245     0A51  17C7               	bsf	___ftadd@f1+1,7
  7246     0A52  30FF               	movlw	255
  7247     0A53  05C6               	andwf	___ftadd@f1,f
  7248     0A54  30FF               	movlw	255
  7249     0A55  05C7               	andwf	___ftadd@f1+1,f
  7250     0A56  3000               	movlw	0
  7251     0A57  05C8               	andwf	___ftadd@f1+2,f
  7252     0A58  17CA               	bsf	___ftadd@f2+1,7
  7253     0A59  30FF               	movlw	255
  7254     0A5A  05C9               	andwf	___ftadd@f2,f
  7255     0A5B  30FF               	movlw	255
  7256     0A5C  05CA               	andwf	___ftadd@f2+1,f
  7257     0A5D  3000               	movlw	0
  7258     0A5E  05CB               	andwf	___ftadd@f2+2,f
  7259     0A5F  0850               	movf	___ftadd@exp2,w
  7260     0A60  0251               	subwf	___ftadd@exp1,w
  7261     0A61  1803               	skipnc
  7262     0A62  2A87               	goto	l4092
  7263     0A63                     l4082:
  7264     0A63  3001               	movlw	1
  7265     0A64                     u5405:
  7266     0A64  1003               	clrc
  7267     0A65  0DC9               	rlf	___ftadd@f2,f
  7268     0A66  0DCA               	rlf	___ftadd@f2+1,f
  7269     0A67  0DCB               	rlf	___ftadd@f2+2,f
  7270     0A68  3EFF               	addlw	-1
  7271     0A69  1D03               	skipz
  7272     0A6A  2A64               	goto	u5405
  7273     0A6B  3001               	movlw	1
  7274     0A6C  02D0               	subwf	___ftadd@exp2,f
  7275     0A6D  0850               	movf	___ftadd@exp2,w
  7276     0A6E  0651               	xorwf	___ftadd@exp1,w
  7277     0A6F  1903               	skipnz
  7278     0A70  2A82               	goto	l4090
  7279     0A71  3001               	movlw	1
  7280     0A72  02CF               	subwf	___ftadd@sign,f
  7281     0A73  084F               	movf	___ftadd@sign,w
  7282     0A74  3907               	andlw	7
  7283     0A75  1903               	btfsc	3,2
  7284     0A76  2A82               	goto	l4090
  7285     0A77  2A63               	goto	l4082
  7286     0A78                     l4088:
  7287     0A78  3001               	movlw	1
  7288     0A79                     u5435:
  7289     0A79  1003               	clrc
  7290     0A7A  0CC8               	rrf	___ftadd@f1+2,f
  7291     0A7B  0CC7               	rrf	___ftadd@f1+1,f
  7292     0A7C  0CC6               	rrf	___ftadd@f1,f
  7293     0A7D  3EFF               	addlw	-1
  7294     0A7E  1D03               	skipz
  7295     0A7F  2A79               	goto	u5435
  7296     0A80  3001               	movlw	1
  7297     0A81  07D1               	addwf	___ftadd@exp1,f
  7298     0A82                     l4090:
  7299     0A82  0851               	movf	___ftadd@exp1,w
  7300     0A83  0650               	xorwf	___ftadd@exp2,w
  7301     0A84  1903               	btfsc	3,2
  7302     0A85  2AAE               	goto	l837
  7303     0A86  2A78               	goto	l4088
  7304     0A87                     l4092:
  7305     0A87  0851               	movf	___ftadd@exp1,w
  7306     0A88  0250               	subwf	___ftadd@exp2,w
  7307     0A89  1803               	skipnc
  7308     0A8A  2AAE               	goto	l837
  7309     0A8B                     l4094:
  7310     0A8B  3001               	movlw	1
  7311     0A8C                     u5465:
  7312     0A8C  1003               	clrc
  7313     0A8D  0DC6               	rlf	___ftadd@f1,f
  7314     0A8E  0DC7               	rlf	___ftadd@f1+1,f
  7315     0A8F  0DC8               	rlf	___ftadd@f1+2,f
  7316     0A90  3EFF               	addlw	-1
  7317     0A91  1D03               	skipz
  7318     0A92  2A8C               	goto	u5465
  7319     0A93  3001               	movlw	1
  7320     0A94  02D1               	subwf	___ftadd@exp1,f
  7321     0A95  0850               	movf	___ftadd@exp2,w
  7322     0A96  0651               	xorwf	___ftadd@exp1,w
  7323     0A97  1903               	skipnz
  7324     0A98  2AAA               	goto	l4102
  7325     0A99  3001               	movlw	1
  7326     0A9A  02CF               	subwf	___ftadd@sign,f
  7327     0A9B  084F               	movf	___ftadd@sign,w
  7328     0A9C  3907               	andlw	7
  7329     0A9D  1903               	btfsc	3,2
  7330     0A9E  2AAA               	goto	l4102
  7331     0A9F  2A8B               	goto	l4094
  7332     0AA0                     l4100:
  7333     0AA0  3001               	movlw	1
  7334     0AA1                     u5495:
  7335     0AA1  1003               	clrc
  7336     0AA2  0CCB               	rrf	___ftadd@f2+2,f
  7337     0AA3  0CCA               	rrf	___ftadd@f2+1,f
  7338     0AA4  0CC9               	rrf	___ftadd@f2,f
  7339     0AA5  3EFF               	addlw	-1
  7340     0AA6  1D03               	skipz
  7341     0AA7  2AA1               	goto	u5495
  7342     0AA8  3001               	movlw	1
  7343     0AA9  07D0               	addwf	___ftadd@exp2,f
  7344     0AAA                     l4102:
  7345     0AAA  0851               	movf	___ftadd@exp1,w
  7346     0AAB  0650               	xorwf	___ftadd@exp2,w
  7347     0AAC  1D03               	skipz
  7348     0AAD  2AA0               	goto	l4100
  7349     0AAE                     l837:
  7350     0AAE  1FCF               	btfss	___ftadd@sign,7
  7351     0AAF  2AC0               	goto	l4106
  7352     0AB0  30FF               	movlw	255
  7353     0AB1  06C6               	xorwf	___ftadd@f1,f
  7354     0AB2  30FF               	movlw	255
  7355     0AB3  06C7               	xorwf	___ftadd@f1+1,f
  7356     0AB4  30FF               	movlw	255
  7357     0AB5  06C8               	xorwf	___ftadd@f1+2,f
  7358     0AB6  3001               	movlw	1
  7359     0AB7  07C6               	addwf	___ftadd@f1,f
  7360     0AB8  3000               	movlw	0
  7361     0AB9  1803               	skipnc
  7362     0ABA  3001               	movlw	1
  7363     0ABB  07C7               	addwf	___ftadd@f1+1,f
  7364     0ABC  3000               	movlw	0
  7365     0ABD  1803               	skipnc
  7366     0ABE  3001               	movlw	1
  7367     0ABF  07C8               	addwf	___ftadd@f1+2,f
  7368     0AC0                     l4106:
  7369     0AC0  1F4F               	btfss	___ftadd@sign,6
  7370     0AC1  2AD2               	goto	l4110
  7371     0AC2  30FF               	movlw	255
  7372     0AC3  06C9               	xorwf	___ftadd@f2,f
  7373     0AC4  30FF               	movlw	255
  7374     0AC5  06CA               	xorwf	___ftadd@f2+1,f
  7375     0AC6  30FF               	movlw	255
  7376     0AC7  06CB               	xorwf	___ftadd@f2+2,f
  7377     0AC8  3001               	movlw	1
  7378     0AC9  07C9               	addwf	___ftadd@f2,f
  7379     0ACA  3000               	movlw	0
  7380     0ACB  1803               	skipnc
  7381     0ACC  3001               	movlw	1
  7382     0ACD  07CA               	addwf	___ftadd@f2+1,f
  7383     0ACE  3000               	movlw	0
  7384     0ACF  1803               	skipnc
  7385     0AD0  3001               	movlw	1
  7386     0AD1  07CB               	addwf	___ftadd@f2+2,f
  7387     0AD2                     l4110:
  7388     0AD2  01CF               	clrf	___ftadd@sign
  7389     0AD3  0846               	movf	___ftadd@f1,w
  7390     0AD4  07C9               	addwf	___ftadd@f2,f
  7391     0AD5  0847               	movf	___ftadd@f1+1,w
  7392     0AD6  1103               	clrz
  7393     0AD7  1803               	skipnc
  7394     0AD8  0A47               	incf	___ftadd@f1+1,w
  7395     0AD9  1D03               	btfss	3,2
  7396     0ADA  07CA               	addwf	___ftadd@f2+1,f
  7397     0ADB  0848               	movf	___ftadd@f1+2,w
  7398     0ADC  1103               	clrz
  7399     0ADD  1803               	skipnc
  7400     0ADE  0A48               	incf	___ftadd@f1+2,w
  7401     0ADF  1D03               	btfss	3,2
  7402     0AE0  07CB               	addwf	___ftadd@f2+2,f
  7403     0AE1  1FCB               	btfss	___ftadd@f2+2,7
  7404     0AE2  2AF5               	goto	l4120
  7405     0AE3  30FF               	movlw	255
  7406     0AE4  06C9               	xorwf	___ftadd@f2,f
  7407     0AE5  30FF               	movlw	255
  7408     0AE6  06CA               	xorwf	___ftadd@f2+1,f
  7409     0AE7  30FF               	movlw	255
  7410     0AE8  06CB               	xorwf	___ftadd@f2+2,f
  7411     0AE9  3001               	movlw	1
  7412     0AEA  07C9               	addwf	___ftadd@f2,f
  7413     0AEB  3000               	movlw	0
  7414     0AEC  1803               	skipnc
  7415     0AED  3001               	movlw	1
  7416     0AEE  07CA               	addwf	___ftadd@f2+1,f
  7417     0AEF  3000               	movlw	0
  7418     0AF0  1803               	skipnc
  7419     0AF1  3001               	movlw	1
  7420     0AF2  07CB               	addwf	___ftadd@f2+2,f
  7421     0AF3  3001               	movlw	1
  7422     0AF4  00CF               	movwf	___ftadd@sign
  7423     0AF5                     l4120:
  7424     0AF5  0849               	movf	___ftadd@f2,w
  7425     0AF6  00F3               	movwf	___ftpack@arg
  7426     0AF7  084A               	movf	___ftadd@f2+1,w
  7427     0AF8  00F4               	movwf	___ftpack@arg+1
  7428     0AF9  084B               	movf	___ftadd@f2+2,w
  7429     0AFA  00F5               	movwf	___ftpack@arg+2
  7430     0AFB  0851               	movf	___ftadd@exp1,w
  7431     0AFC  00F6               	movwf	___ftpack@exp
  7432     0AFD  084F               	movf	___ftadd@sign,w
  7433     0AFE  00F7               	movwf	___ftpack@sign
  7434     0AFF  160A  118A  25E9   	fcall	___ftpack
  7435     0B02  0873               	movf	?___ftpack,w
  7436     0B03  00C6               	movwf	?___ftadd
  7437     0B04  0874               	movf	?___ftpack+1,w
  7438     0B05  00C7               	movwf	?___ftadd+1
  7439     0B06  0875               	movf	?___ftpack+2,w
  7440     0B07  00C8               	movwf	?___ftadd+2
  7441     0B08  0008               	return
  7442     0B09                     __end_of___ftadd:
  7443                           
  7444                           	psect	text24
  7445     1F0C                     __ptext24:	
  7446 ;; *************** function ___ftneg *****************
  7447 ;; Defined at:
  7448 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c90\common\ftneg.c"
  7449 ;; Parameters:    Size  Location     Type
  7450 ;;  f1              3    3[COMMON] float 
  7451 ;; Auto vars:     Size  Location     Type
  7452 ;;		None
  7453 ;; Return value:  Size  Location     Type
  7454 ;;                  3    3[COMMON] float 
  7455 ;; Registers used:
  7456 ;;		wreg
  7457 ;; Tracked objects:
  7458 ;;		On entry : 300/100
  7459 ;;		On exit  : 300/100
  7460 ;;		Unchanged: 300/0
  7461 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7462 ;;      Params:         3       0       0       0       0
  7463 ;;      Locals:         0       0       0       0       0
  7464 ;;      Temps:          0       0       0       0       0
  7465 ;;      Totals:         3       0       0       0       0
  7466 ;;Total ram usage:        3 bytes
  7467 ;; Hardware stack levels used: 1
  7468 ;; Hardware stack levels required when called: 1
  7469 ;; This function calls:
  7470 ;;		Nothing
  7471 ;; This function is called by:
  7472 ;;		_sprintf
  7473 ;; This function uses a non-reentrant model
  7474 ;;
  7475                           
  7476     1F0C                     ___ftneg:	
  7477                           ;psect for function ___ftneg
  7478                           
  7479                           
  7480                           ;incstack = 0
  7481                           ; Regs used in ___ftneg: [wreg]
  7482     1F0C  0875               	movf	___ftneg@f1+2,w
  7483     1F0D  0474               	iorwf	___ftneg@f1+1,w
  7484     1F0E  0473               	iorwf	___ftneg@f1,w
  7485     1F0F  1903               	skipnz
  7486     1F10  0008               	return
  7487     1F11  3080               	movlw	128
  7488     1F12  06F5               	xorwf	___ftneg@f1+2,f
  7489     1F13  0008               	return
  7490     1F14                     __end_of___ftneg:
  7491                           
  7492                           	psect	text25
  7493     126C                     __ptext25:	
  7494 ;; *************** function ___ftge *****************
  7495 ;; Defined at:
  7496 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c90\common\ftge.c"
  7497 ;; Parameters:    Size  Location     Type
  7498 ;;  ff1             3    0[BANK0 ] float 
  7499 ;;  ff2             3    3[BANK0 ] float 
  7500 ;; Auto vars:     Size  Location     Type
  7501 ;;		None
  7502 ;; Return value:  Size  Location     Type
  7503 ;;		None               void
  7504 ;; Registers used:
  7505 ;;		wreg, status,2, status,0
  7506 ;; Tracked objects:
  7507 ;;		On entry : 300/0
  7508 ;;		On exit  : 300/0
  7509 ;;		Unchanged: 0/0
  7510 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7511 ;;      Params:         0       6       0       0       0
  7512 ;;      Locals:         0       0       0       0       0
  7513 ;;      Temps:          0       0       0       0       0
  7514 ;;      Totals:         0       6       0       0       0
  7515 ;;Total ram usage:        6 bytes
  7516 ;; Hardware stack levels used: 1
  7517 ;; Hardware stack levels required when called: 1
  7518 ;; This function calls:
  7519 ;;		Nothing
  7520 ;; This function is called by:
  7521 ;;		_manejar_estado_monitoreo_ambiental
  7522 ;;		_sprintf
  7523 ;; This function uses a non-reentrant model
  7524 ;;
  7525                           
  7526     126C                     ___ftge:	
  7527                           ;psect for function ___ftge
  7528                           
  7529                           
  7530                           ;incstack = 0
  7531                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  7532     126C  1FA2               	btfss	___ftge@ff1+2,7
  7533     126D  2A7B               	goto	l4468
  7534     126E  0820               	movf	___ftge@ff1,w
  7535     126F  3C00               	sublw	0
  7536     1270  00A0               	movwf	___ftge@ff1
  7537     1271  0821               	movf	___ftge@ff1+1,w
  7538     1272  1C03               	skipc
  7539     1273  0F21               	incfsz	___ftge@ff1+1,w
  7540     1274  3C00               	sublw	0
  7541     1275  00A1               	movwf	___ftge@ff1+1
  7542     1276  0822               	movf	___ftge@ff1+2,w
  7543     1277  1C03               	skipc
  7544     1278  0F22               	incfsz	___ftge@ff1+2,w
  7545     1279  3C80               	sublw	128
  7546     127A  00A2               	movwf	___ftge@ff1+2
  7547     127B                     l4468:
  7548     127B  1FA5               	btfss	___ftge@ff2+2,7
  7549     127C  2A8A               	goto	l4472
  7550     127D  0823               	movf	___ftge@ff2,w
  7551     127E  3C00               	sublw	0
  7552     127F  00A3               	movwf	___ftge@ff2
  7553     1280  0824               	movf	___ftge@ff2+1,w
  7554     1281  1C03               	skipc
  7555     1282  0F24               	incfsz	___ftge@ff2+1,w
  7556     1283  3C00               	sublw	0
  7557     1284  00A4               	movwf	___ftge@ff2+1
  7558     1285  0825               	movf	___ftge@ff2+2,w
  7559     1286  1C03               	skipc
  7560     1287  0F25               	incfsz	___ftge@ff2+2,w
  7561     1288  3C80               	sublw	128
  7562     1289  00A5               	movwf	___ftge@ff2+2
  7563     128A                     l4472:
  7564     128A  3080               	movlw	128
  7565     128B  06A2               	xorwf	___ftge@ff1+2,f
  7566     128C  3080               	movlw	128
  7567     128D  06A5               	xorwf	___ftge@ff2+2,f
  7568     128E  0825               	movf	___ftge@ff2+2,w
  7569     128F  0222               	subwf	___ftge@ff1+2,w
  7570     1290  1D03               	skipz
  7571     1291  0008               	return
  7572     1292  0824               	movf	___ftge@ff2+1,w
  7573     1293  0221               	subwf	___ftge@ff1+1,w
  7574     1294  1D03               	skipz
  7575     1295  0008               	return
  7576     1296  0823               	movf	___ftge@ff2,w
  7577     1297  0220               	subwf	___ftge@ff1,w
  7578     1298  0008               	return
  7579     1299                     __end_of___ftge:
  7580                           
  7581                           	psect	text26
  7582     12CD                     __ptext26:	
  7583 ;; *************** function _adc_read *****************
  7584 ;; Defined at:
  7585 ;;		line 17 in file "adc.c"
  7586 ;; Parameters:    Size  Location     Type
  7587 ;;  channel         2    3[COMMON] int 
  7588 ;; Auto vars:     Size  Location     Type
  7589 ;;  value_adc       2    5[COMMON] unsigned int 
  7590 ;; Return value:  Size  Location     Type
  7591 ;;                  2    3[COMMON] unsigned int 
  7592 ;; Registers used:
  7593 ;;		wreg, status,2, status,0
  7594 ;; Tracked objects:
  7595 ;;		On entry : 0/0
  7596 ;;		On exit  : 300/0
  7597 ;;		Unchanged: 0/0
  7598 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7599 ;;      Params:         2       0       0       0       0
  7600 ;;      Locals:         2       0       0       0       0
  7601 ;;      Temps:          0       4       0       0       0
  7602 ;;      Totals:         4       4       0       0       0
  7603 ;;Total ram usage:        8 bytes
  7604 ;; Hardware stack levels used: 1
  7605 ;; Hardware stack levels required when called: 1
  7606 ;; This function calls:
  7607 ;;		Nothing
  7608 ;; This function is called by:
  7609 ;;		_ambiental
  7610 ;; This function uses a non-reentrant model
  7611 ;;
  7612                           
  7613     12CD                     _adc_read:	
  7614                           ;psect for function _adc_read
  7615                           
  7616                           
  7617                           ;adc.c: 19: ADCON0bits.CHS =(0x0F & channel);
  7618                           
  7619                           ;incstack = 0
  7620                           ; Regs used in _adc_read: [wreg+status,2+status,0]
  7621     12CD  0873               	movf	adc_read@channel,w
  7622     12CE  390F               	andlw	15
  7623     12CF  1283               	bcf	3,5	;RP0=0, select bank0
  7624     12D0  1303               	bcf	3,6	;RP1=0, select bank0
  7625     12D1  00A0               	movwf	??_adc_read
  7626     12D2  0DA0               	rlf	??_adc_read,f
  7627     12D3  0DA0               	rlf	??_adc_read,f
  7628     12D4  081F               	movf	31,w	;volatile
  7629     12D5  0620               	xorwf	??_adc_read,w
  7630     12D6  39C3               	andlw	-61
  7631     12D7  0620               	xorwf	??_adc_read,w
  7632     12D8  009F               	movwf	31	;volatile
  7633                           
  7634                           ;adc.c: 20: ADCON0bits.ADON = 1;
  7635     12D9  141F               	bsf	31,0	;volatile
  7636                           
  7637                           ;adc.c: 21: _delay((unsigned long)((30)*(8000000/4000000.0)));
  7638     12DA  3013               	movlw	19
  7639     12DB  1283               	bcf	3,5	;RP0=0, select bank0
  7640     12DC  1303               	bcf	3,6	;RP1=0, select bank0
  7641     12DD  00A0               	movwf	??_adc_read
  7642     12DE                     u7227:
  7643     12DE  0BA0               	decfsz	??_adc_read,f
  7644     12DF  2ADE               	goto	u7227
  7645                           
  7646                           ;adc.c: 22: ADCON0bits.GO_DONE = 1;
  7647     12E0  1283               	bcf	3,5	;RP0=0, select bank0
  7648     12E1  1303               	bcf	3,6	;RP1=0, select bank0
  7649     12E2  149F               	bsf	31,1	;volatile
  7650     12E3                     l16:	
  7651                           ;adc.c: 23: while (ADCON0bits.GO_DONE);
  7652                           
  7653     12E3  189F               	btfsc	31,1	;volatile
  7654     12E4  2AE3               	goto	l16
  7655                           
  7656                           ;adc.c: 24: unsigned int value_adc = ADRESH;
  7657     12E5  081E               	movf	30,w	;volatile
  7658     12E6  00A0               	movwf	??_adc_read
  7659     12E7  01A1               	clrf	??_adc_read+1
  7660     12E8  0820               	movf	??_adc_read,w
  7661     12E9  00F5               	movwf	adc_read@value_adc
  7662     12EA  0821               	movf	??_adc_read+1,w
  7663     12EB  00F6               	movwf	adc_read@value_adc+1
  7664                           
  7665                           ;adc.c: 25: value_adc =(value_adc<<8)+ADRESL;
  7666     12EC  0875               	movf	adc_read@value_adc,w
  7667     12ED  00A1               	movwf	??_adc_read+1
  7668     12EE  01A0               	clrf	??_adc_read
  7669     12EF  1683               	bsf	3,5	;RP0=1, select bank1
  7670     12F0  081E               	movf	30,w	;volatile
  7671     12F1  1283               	bcf	3,5	;RP0=0, select bank0
  7672     12F2  0720               	addwf	??_adc_read,w
  7673     12F3  00A2               	movwf	??_adc_read+2
  7674     12F4  3000               	movlw	0
  7675     12F5  1803               	skipnc
  7676     12F6  3001               	movlw	1
  7677     12F7  0721               	addwf	??_adc_read+1,w
  7678     12F8  00A3               	movwf	??_adc_read+3
  7679     12F9  0822               	movf	??_adc_read+2,w
  7680     12FA  00F5               	movwf	adc_read@value_adc
  7681     12FB  0823               	movf	??_adc_read+3,w
  7682     12FC  00F6               	movwf	adc_read@value_adc+1
  7683                           
  7684                           ;adc.c: 26: return value_adc;
  7685     12FD  0876               	movf	adc_read@value_adc+1,w
  7686     12FE  00F4               	movwf	?_adc_read+1
  7687     12FF  0875               	movf	adc_read@value_adc,w
  7688     1300  00F3               	movwf	?_adc_read
  7689     1301  0008               	return
  7690     1302                     __end_of_adc_read:
  7691                           
  7692                           	psect	text27
  7693     116A                     __ptext27:	
  7694 ;; *************** function ___awtoft *****************
  7695 ;; Defined at:
  7696 ;;		line 32 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c90\common\awtoft.c"
  7697 ;; Parameters:    Size  Location     Type
  7698 ;;  c               2    3[BANK0 ] int 
  7699 ;; Auto vars:     Size  Location     Type
  7700 ;;  sign            1    6[BANK0 ] unsigned char 
  7701 ;; Return value:  Size  Location     Type
  7702 ;;                  3    3[BANK0 ] float 
  7703 ;; Registers used:
  7704 ;;		wreg, status,2, status,0, pclath, cstack
  7705 ;; Tracked objects:
  7706 ;;		On entry : 300/0
  7707 ;;		On exit  : 300/0
  7708 ;;		Unchanged: 0/0
  7709 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7710 ;;      Params:         0       3       0       0       0
  7711 ;;      Locals:         0       1       0       0       0
  7712 ;;      Temps:          0       0       0       0       0
  7713 ;;      Totals:         0       4       0       0       0
  7714 ;;Total ram usage:        4 bytes
  7715 ;; Hardware stack levels used: 1
  7716 ;; Hardware stack levels required when called: 2
  7717 ;; This function calls:
  7718 ;;		___ftpack
  7719 ;; This function is called by:
  7720 ;;		_ambiental
  7721 ;; This function uses a non-reentrant model
  7722 ;;
  7723                           
  7724     116A                     ___awtoft:	
  7725                           ;psect for function ___awtoft
  7726                           
  7727                           
  7728                           ;incstack = 0
  7729                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  7730     116A  01A6               	clrf	___awtoft@sign
  7731     116B  1FA4               	btfss	___awtoft@c+1,7
  7732     116C  2974               	goto	l4926
  7733     116D  09A3               	comf	___awtoft@c,f
  7734     116E  09A4               	comf	___awtoft@c+1,f
  7735     116F  0AA3               	incf	___awtoft@c,f
  7736     1170  1903               	skipnz
  7737     1171  0AA4               	incf	___awtoft@c+1,f
  7738     1172  3001               	movlw	1
  7739     1173  00A6               	movwf	___awtoft@sign
  7740     1174                     l4926:
  7741     1174  0823               	movf	___awtoft@c,w
  7742     1175  00F3               	movwf	___ftpack@arg
  7743     1176  0824               	movf	___awtoft@c+1,w
  7744     1177  00F4               	movwf	___ftpack@arg+1
  7745     1178  01F5               	clrf	___ftpack@arg+2
  7746     1179  308E               	movlw	142
  7747     117A  00F6               	movwf	___ftpack@exp
  7748     117B  0826               	movf	___awtoft@sign,w
  7749     117C  00F7               	movwf	___ftpack@sign
  7750     117D  160A  118A  25E9   	fcall	___ftpack
  7751     1180  0873               	movf	?___ftpack,w
  7752     1181  00A3               	movwf	?___awtoft
  7753     1182  0874               	movf	?___ftpack+1,w
  7754     1183  00A4               	movwf	?___awtoft+1
  7755     1184  0875               	movf	?___ftpack+2,w
  7756     1185  00A5               	movwf	?___awtoft+2
  7757     1186  0008               	return
  7758     1187                     __end_of___awtoft:
  7759                           
  7760                           	psect	text28
  7761     15E9                     __ptext28:	
  7762 ;; *************** function ___ftpack *****************
  7763 ;; Defined at:
  7764 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c90\common\float.c"
  7765 ;; Parameters:    Size  Location     Type
  7766 ;;  arg             3    3[COMMON] unsigned um
  7767 ;;  exp             1    6[COMMON] unsigned char 
  7768 ;;  sign            1    7[COMMON] unsigned char 
  7769 ;; Auto vars:     Size  Location     Type
  7770 ;;		None
  7771 ;; Return value:  Size  Location     Type
  7772 ;;                  3    3[COMMON] float 
  7773 ;; Registers used:
  7774 ;;		wreg, status,2, status,0
  7775 ;; Tracked objects:
  7776 ;;		On entry : 300/0
  7777 ;;		On exit  : 300/0
  7778 ;;		Unchanged: 0/0
  7779 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7780 ;;      Params:         5       0       0       0       0
  7781 ;;      Locals:         0       0       0       0       0
  7782 ;;      Temps:          0       3       0       0       0
  7783 ;;      Totals:         5       3       0       0       0
  7784 ;;Total ram usage:        8 bytes
  7785 ;; Hardware stack levels used: 1
  7786 ;; Hardware stack levels required when called: 1
  7787 ;; This function calls:
  7788 ;;		Nothing
  7789 ;; This function is called by:
  7790 ;;		___awtoft
  7791 ;;		___ftadd
  7792 ;;		___ftmul
  7793 ;;		___lltoft
  7794 ;; This function uses a non-reentrant model
  7795 ;;
  7796                           
  7797     15E9                     ___ftpack:	
  7798                           ;psect for function ___ftpack
  7799                           
  7800                           
  7801                           ;incstack = 0
  7802                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  7803     15E9  0876               	movf	___ftpack@exp,w
  7804     15EA  1903               	btfsc	3,2
  7805     15EB  2DF1               	goto	l3914
  7806     15EC  0875               	movf	___ftpack@arg+2,w
  7807     15ED  0474               	iorwf	___ftpack@arg+1,w
  7808     15EE  0473               	iorwf	___ftpack@arg,w
  7809     15EF  1D03               	skipz
  7810     15F0  2E02               	goto	l3920
  7811     15F1                     l3914:
  7812     15F1  3000               	movlw	0
  7813     15F2  00F3               	movwf	?___ftpack
  7814     15F3  3000               	movlw	0
  7815     15F4  00F4               	movwf	?___ftpack+1
  7816     15F5  3000               	movlw	0
  7817     15F6  00F5               	movwf	?___ftpack+2
  7818     15F7  0008               	return
  7819     15F8                     l3918:
  7820     15F8  3001               	movlw	1
  7821     15F9  07F6               	addwf	___ftpack@exp,f
  7822     15FA  3001               	movlw	1
  7823     15FB                     u4995:
  7824     15FB  1003               	clrc
  7825     15FC  0CF5               	rrf	___ftpack@arg+2,f
  7826     15FD  0CF4               	rrf	___ftpack@arg+1,f
  7827     15FE  0CF3               	rrf	___ftpack@arg,f
  7828     15FF  3EFF               	addlw	-1
  7829     1600  1D03               	skipz
  7830     1601  2DFB               	goto	u4995
  7831     1602                     l3920:
  7832     1602  30FE               	movlw	254
  7833     1603  0575               	andwf	___ftpack@arg+2,w
  7834     1604  1903               	btfsc	3,2
  7835     1605  2E1B               	goto	l806
  7836     1606  2DF8               	goto	l3918
  7837     1607                     l3922:
  7838     1607  3001               	movlw	1
  7839     1608  07F6               	addwf	___ftpack@exp,f
  7840     1609  3001               	movlw	1
  7841     160A  07F3               	addwf	___ftpack@arg,f
  7842     160B  3000               	movlw	0
  7843     160C  1803               	skipnc
  7844     160D  3001               	movlw	1
  7845     160E  07F4               	addwf	___ftpack@arg+1,f
  7846     160F  3000               	movlw	0
  7847     1610  1803               	skipnc
  7848     1611  3001               	movlw	1
  7849     1612  07F5               	addwf	___ftpack@arg+2,f
  7850     1613  3001               	movlw	1
  7851     1614                     u5015:
  7852     1614  1003               	clrc
  7853     1615  0CF5               	rrf	___ftpack@arg+2,f
  7854     1616  0CF4               	rrf	___ftpack@arg+1,f
  7855     1617  0CF3               	rrf	___ftpack@arg,f
  7856     1618  3EFF               	addlw	-1
  7857     1619  1D03               	skipz
  7858     161A  2E14               	goto	u5015
  7859     161B                     l806:
  7860     161B  30FF               	movlw	255
  7861     161C  0575               	andwf	___ftpack@arg+2,w
  7862     161D  1903               	btfsc	3,2
  7863     161E  2E2E               	goto	l3930
  7864     161F  2E07               	goto	l3922
  7865     1620                     l3932:
  7866     1620  3002               	movlw	2
  7867     1621  0276               	subwf	___ftpack@exp,w
  7868     1622  1C03               	btfss	3,0
  7869     1623  2E30               	goto	l813
  7870     1624  3001               	movlw	1
  7871     1625  02F6               	subwf	___ftpack@exp,f
  7872     1626  3001               	movlw	1
  7873     1627                     u5035:
  7874     1627  1003               	clrc
  7875     1628  0DF3               	rlf	___ftpack@arg,f
  7876     1629  0DF4               	rlf	___ftpack@arg+1,f
  7877     162A  0DF5               	rlf	___ftpack@arg+2,f
  7878     162B  3EFF               	addlw	-1
  7879     162C  1D03               	skipz
  7880     162D  2E27               	goto	u5035
  7881     162E                     l3930:
  7882     162E  1FF4               	btfss	___ftpack@arg+1,7
  7883     162F  2E20               	goto	l3932
  7884     1630                     l813:
  7885     1630  1876               	btfsc	___ftpack@exp,0
  7886     1631  2E38               	goto	l814
  7887     1632  30FF               	movlw	255
  7888     1633  05F3               	andwf	___ftpack@arg,f
  7889     1634  307F               	movlw	127
  7890     1635  05F4               	andwf	___ftpack@arg+1,f
  7891     1636  30FF               	movlw	255
  7892     1637  05F5               	andwf	___ftpack@arg+2,f
  7893     1638                     l814:
  7894     1638  1003               	clrc
  7895     1639  0CF6               	rrf	___ftpack@exp,f
  7896     163A  0876               	movf	___ftpack@exp,w
  7897     163B  00A0               	movwf	??___ftpack
  7898     163C  01A1               	clrf	??___ftpack+1
  7899     163D  01A2               	clrf	??___ftpack+2
  7900     163E  3010               	movlw	16
  7901     163F                     u5075:
  7902     163F  1003               	clrc
  7903     1640  0DA0               	rlf	??___ftpack,f
  7904     1641  0DA1               	rlf	??___ftpack+1,f
  7905     1642  0DA2               	rlf	??___ftpack+2,f
  7906     1643  3EFF               	addlw	-1
  7907     1644  1D03               	skipz
  7908     1645  2E3F               	goto	u5075
  7909     1646  0820               	movf	??___ftpack,w
  7910     1647  04F3               	iorwf	___ftpack@arg,f
  7911     1648  0821               	movf	??___ftpack+1,w
  7912     1649  04F4               	iorwf	___ftpack@arg+1,f
  7913     164A  0822               	movf	??___ftpack+2,w
  7914     164B  04F5               	iorwf	___ftpack@arg+2,f
  7915     164C  0877               	movf	___ftpack@sign,w
  7916     164D  1903               	btfsc	3,2
  7917     164E  0008               	return
  7918     164F  17F5               	bsf	___ftpack@arg+2,7
  7919     1650  0008               	return
  7920     1651                     __end_of___ftpack:
  7921                           
  7922                           	psect	text29
  7923     1150                     __ptext29:	
  7924 ;; *************** function _manejar_estado_init *****************
  7925 ;; Defined at:
  7926 ;;		line 53 in file "main.c"
  7927 ;; Parameters:    Size  Location     Type
  7928 ;;		None
  7929 ;; Auto vars:     Size  Location     Type
  7930 ;;		None
  7931 ;; Return value:  Size  Location     Type
  7932 ;;                  1    wreg      void 
  7933 ;; Registers used:
  7934 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7935 ;; Tracked objects:
  7936 ;;		On entry : 0/0
  7937 ;;		On exit  : 300/0
  7938 ;;		Unchanged: 0/0
  7939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7940 ;;      Params:         0       0       0       0       0
  7941 ;;      Locals:         0       0       0       0       0
  7942 ;;      Temps:          0       0       0       0       0
  7943 ;;      Totals:         0       0       0       0       0
  7944 ;;Total ram usage:        0 bytes
  7945 ;; Hardware stack levels used: 1
  7946 ;; Hardware stack levels required when called: 5
  7947 ;; This function calls:
  7948 ;;		_funcion_seguridad
  7949 ;;		_inicializar
  7950 ;; This function is called by:
  7951 ;;		_main
  7952 ;; This function uses a non-reentrant model
  7953 ;;
  7954                           
  7955     1150                     _manejar_estado_init:	
  7956                           ;psect for function _manejar_estado_init
  7957                           
  7958                           
  7959                           ;main.c: 54: funcion_seguridad();
  7960                           
  7961                           ;incstack = 0
  7962                           ; Regs used in _manejar_estado_init: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack
      +                          ]
  7963     1150  120A  118A  26BC  160A  118A  	fcall	_funcion_seguridad
  7964                           
  7965                           ;main.c: 55: if (clave == 1) {
  7966     1155  036A               	decf	_clave,w
  7967     1156  1D03               	btfss	3,2
  7968     1157  295E               	goto	l5094
  7969                           
  7970                           ;main.c: 56: estado_actual = MONITOREO_AMBIENTAL;
  7971     1158  3002               	movlw	2
  7972     1159  00FA               	movwf	_estado_actual
  7973                           
  7974                           ;main.c: 57: inicializar();
  7975     115A  120A  158A  2000   	fcall	_inicializar
  7976                           
  7977                           ;main.c: 58: } else if (clave == 0) {
  7978     115D  0008               	return
  7979     115E                     l5094:
  7980     115E  086A               	movf	_clave,w
  7981     115F  1D03               	btfss	3,2
  7982     1160  2963               	goto	l5098
  7983                           
  7984                           ;main.c: 59: estado_actual = INIT;
  7985     1161  01FA               	clrf	_estado_actual
  7986                           
  7987                           ;main.c: 60: } else if (clave == 2) {
  7988     1162  0008               	return
  7989     1163                     l5098:
  7990     1163  3002               	movlw	2
  7991     1164  066A               	xorwf	_clave,w
  7992     1165  1D03               	btfss	3,2
  7993     1166  0008               	return
  7994                           
  7995                           ;main.c: 61: estado_actual = BLOQUEADO;
  7996     1167  3001               	movlw	1
  7997     1168  00FA               	movwf	_estado_actual
  7998     1169  0008               	return
  7999     116A                     __end_of_manejar_estado_init:
  8000                           
  8001                           	psect	text30
  8002     06BC                     __ptext30:	
  8003 ;; *************** function _funcion_seguridad *****************
  8004 ;; Defined at:
  8005 ;;		line 64 in file "seguridad.c"
  8006 ;; Parameters:    Size  Location     Type
  8007 ;;		None
  8008 ;; Auto vars:     Size  Location     Type
  8009 ;;  temp_str        2   22[BANK0 ] unsigned char [2]
  8010 ;; Return value:  Size  Location     Type
  8011 ;;                  1    wreg      void 
  8012 ;; Registers used:
  8013 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8014 ;; Tracked objects:
  8015 ;;		On entry : 0/0
  8016 ;;		On exit  : 300/0
  8017 ;;		Unchanged: 0/0
  8018 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8019 ;;      Params:         0       0       0       0       0
  8020 ;;      Locals:         0       2       0       0       0
  8021 ;;      Temps:          0       3       0       0       0
  8022 ;;      Totals:         0       5       0       0       0
  8023 ;;Total ram usage:        5 bytes
  8024 ;; Hardware stack levels used: 1
  8025 ;; Hardware stack levels required when called: 4
  8026 ;; This function calls:
  8027 ;;		_LCD_Char
  8028 ;;		_LCD_Clear
  8029 ;;		_LCD_Command
  8030 ;;		_LCD_Init
  8031 ;;		_LCD_String_xy
  8032 ;;		_blink_led
  8033 ;;		_keypad_getkey
  8034 ;;		_keypad_init
  8035 ;;		_strncmp
  8036 ;; This function is called by:
  8037 ;;		_manejar_estado_init
  8038 ;; This function uses a non-reentrant model
  8039 ;;
  8040                           
  8041     06BC                     _funcion_seguridad:	
  8042                           ;psect for function _funcion_seguridad
  8043                           
  8044                           
  8045                           ;seguridad.c: 65: OSCCON = 0x71;
  8046                           
  8047                           ;incstack = 0
  8048                           ; Regs used in _funcion_seguridad: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  8049     06BC  3071               	movlw	113
  8050     06BD  1683               	bsf	3,5	;RP0=1, select bank1
  8051     06BE  1303               	bcf	3,6	;RP1=0, select bank1
  8052     06BF  008F               	movwf	15	;volatile
  8053                           
  8054                           ;seguridad.c: 67: TRISA = 0b11111000;
  8055     06C0  30F8               	movlw	248
  8056     06C1  0085               	movwf	5	;volatile
  8057                           
  8058                           ;seguridad.c: 68: ANSELH = 0x00;
  8059     06C2  1703               	bsf	3,6	;RP1=1, select bank3
  8060     06C3  0189               	clrf	9	;volatile
  8061                           
  8062                           ;seguridad.c: 69: ANSEL = 0x00;
  8063     06C4  0188               	clrf	8	;volatile
  8064                           
  8065                           ;seguridad.c: 71: PORTA=0x00;
  8066     06C5  1283               	bcf	3,5	;RP0=0, select bank0
  8067     06C6  1303               	bcf	3,6	;RP1=0, select bank0
  8068     06C7  0185               	clrf	5	;volatile
  8069                           
  8070                           ;seguridad.c: 74: LCD_Init();
  8071     06C8  120A  118A  27D9  120A  118A  	fcall	_LCD_Init
  8072                           
  8073                           ;seguridad.c: 75: keypad_init();
  8074     06CD  160A  158A  2704  120A  118A  	fcall	_keypad_init
  8075                           
  8076                           ;seguridad.c: 78: LCD_Clear();
  8077     06D2  160A  158A  2775  120A  118A  	fcall	_LCD_Clear
  8078                           
  8079                           ;seguridad.c: 79: LCD_String_xy(0, 0, "Bienvenido");
  8080     06D7  1283               	bcf	3,5	;RP0=0, select bank0
  8081     06D8  1303               	bcf	3,6	;RP1=0, select bank0
  8082     06D9  01A0               	clrf	LCD_String_xy@pos
  8083     06DA  3027               	movlw	low (STR_3| (0+32768))
  8084     06DB  00A1               	movwf	LCD_String_xy@msg
  8085     06DC  3091               	movlw	high (STR_3| (0+32768))
  8086     06DD  00A2               	movwf	LCD_String_xy@msg+1
  8087     06DE  3000               	movlw	0
  8088     06DF  160A  158A  27E3  120A  118A  	fcall	_LCD_String_xy
  8089                           
  8090                           ;seguridad.c: 80: _delay((unsigned long)((1000)*(8000000/4000.0)));
  8091     06E4  300B               	movlw	11
  8092     06E5  1283               	bcf	3,5	;RP0=0, select bank0
  8093     06E6  1303               	bcf	3,6	;RP1=0, select bank0
  8094     06E7  00B5               	movwf	??_funcion_seguridad+2
  8095     06E8  3026               	movlw	38
  8096     06E9  00B4               	movwf	??_funcion_seguridad+1
  8097     06EA  305D               	movlw	93
  8098     06EB  00B3               	movwf	??_funcion_seguridad
  8099     06EC                     u7237:
  8100     06EC  0BB3               	decfsz	??_funcion_seguridad,f
  8101     06ED  2EEC               	goto	u7237
  8102     06EE  0BB4               	decfsz	??_funcion_seguridad+1,f
  8103     06EF  2EEC               	goto	u7237
  8104     06F0  0BB5               	decfsz	??_funcion_seguridad+2,f
  8105     06F1  2EEC               	goto	u7237
  8106                           
  8107                           ;seguridad.c: 83: LCD_Clear();
  8108     06F2  160A  158A  2775  120A  118A  	fcall	_LCD_Clear
  8109                           
  8110                           ;seguridad.c: 84: LCD_String_xy(0, 0, "Press a Key");
  8111     06F7  1283               	bcf	3,5	;RP0=0, select bank0
  8112     06F8  1303               	bcf	3,6	;RP1=0, select bank0
  8113     06F9  01A0               	clrf	LCD_String_xy@pos
  8114     06FA  301B               	movlw	low (STR_4| (0+32768))
  8115     06FB  00A1               	movwf	LCD_String_xy@msg
  8116     06FC  3091               	movlw	high (STR_4| (0+32768))
  8117     06FD  00A2               	movwf	LCD_String_xy@msg+1
  8118     06FE  3000               	movlw	0
  8119     06FF  160A  158A  27E3  120A  118A  	fcall	_LCD_String_xy
  8120                           
  8121                           ;seguridad.c: 85: LCD_Command(0xC0);
  8122     0704  30C0               	movlw	192
  8123     0705  160A  118A  2302  120A  118A  	fcall	_LCD_Command
  8124                           
  8125                           ;seguridad.c: 87: while (idx <7) {
  8126     070A  2F2D               	goto	l4972
  8127     070B                     l4960:	
  8128                           ;seguridad.c: 94: break;
  8129                           
  8130                           
  8131                           ;seguridad.c: 97: char temp_str[2];;seguridad.c: 98: temp_str[0] = key;
  8132     070B  086C               	movf	_key,w
  8133     070C  00B6               	movwf	funcion_seguridad@temp_str
  8134                           
  8135                           ;seguridad.c: 99: temp_str[1] = '\0';
  8136     070D  01B7               	clrf	funcion_seguridad@temp_str+1
  8137                           
  8138                           ;seguridad.c: 102: LCD_Char('*');
  8139     070E  302A               	movlw	42
  8140     070F  160A  118A  2299  120A  118A  	fcall	_LCD_Char
  8141                           
  8142                           ;seguridad.c: 103: pass_user[idx++] = key;
  8143     0714  1283               	bcf	3,5	;RP0=0, select bank0
  8144     0715  1303               	bcf	3,6	;RP1=0, select bank0
  8145     0716  0869               	movf	_idx,w
  8146     0717  3EC5               	addlw	(low (_pass_user| 0))& (0+255)
  8147     0718  0084               	movwf	4
  8148     0719  086C               	movf	_key,w
  8149     071A  1383               	bcf	3,7	;select IRP bank1
  8150     071B  0080               	movwf	0
  8151     071C  3001               	movlw	1
  8152     071D  07E9               	addwf	_idx,f
  8153     071E                     l4970:
  8154                           
  8155                           ;seguridad.c: 107: };seguridad.c: 108: };seguridad.c: 109: _delay((unsigned long)((100)*
      +                          (8000000/4000.0)));
  8156     071E  3002               	movlw	2
  8157     071F  1283               	bcf	3,5	;RP0=0, select bank0
  8158     0720  1303               	bcf	3,6	;RP1=0, select bank0
  8159     0721  00B5               	movwf	??_funcion_seguridad+2
  8160     0722  3004               	movlw	4
  8161     0723  00B4               	movwf	??_funcion_seguridad+1
  8162     0724  30B9               	movlw	185
  8163     0725  00B3               	movwf	??_funcion_seguridad
  8164     0726                     u7247:
  8165     0726  0BB3               	decfsz	??_funcion_seguridad,f
  8166     0727  2F26               	goto	u7247
  8167     0728  0BB4               	decfsz	??_funcion_seguridad+1,f
  8168     0729  2F26               	goto	u7247
  8169     072A  0BB5               	decfsz	??_funcion_seguridad+2,f
  8170     072B  2F26               	goto	u7247
  8171     072C  2F2D               	nop2
  8172     072D                     l4972:
  8173     072D  3007               	movlw	7
  8174     072E  1283               	bcf	3,5	;RP0=0, select bank0
  8175     072F  1303               	bcf	3,6	;RP1=0, select bank0
  8176     0730  0269               	subwf	_idx,w
  8177     0731  1803               	btfsc	3,0
  8178     0732  2F45               	goto	l4974
  8179                           
  8180                           ;seguridad.c: 89: key = keypad_getkey();
  8181     0733  120A  158A  2082  120A  118A  	fcall	_keypad_getkey
  8182     0738  00EC               	movwf	_key
  8183                           
  8184                           ;seguridad.c: 90: if (key != 0) {
  8185     0739  086C               	movf	_key,w
  8186     073A  1903               	btfsc	3,2
  8187     073B  2F1E               	goto	l4970
  8188                           
  8189                           ;seguridad.c: 91: if (key == '#') {
  8190     073C  3023               	movlw	35
  8191     073D  066C               	xorwf	_key,w
  8192     073E  1D03               	btfss	3,2
  8193     073F  2F0B               	goto	l4960
  8194                           
  8195                           ;seguridad.c: 93: pass_user[idx] = '\0';
  8196     0740  0869               	movf	_idx,w
  8197     0741  3EC5               	addlw	(low (_pass_user| 0))& (0+255)
  8198     0742  0084               	movwf	4
  8199     0743  1383               	bcf	3,7	;select IRP bank1
  8200     0744  0180               	clrf	0
  8201     0745                     l4974:
  8202                           
  8203                           ;seguridad.c: 110: };seguridad.c: 111: if (strncmp(pass_user, password, 6) == 0) {
  8204     0745  30C5               	movlw	(low (_pass_user| 0))& (0+255)
  8205     0746  00F3               	movwf	strncmp@s1
  8206     0747  3088               	movlw	low (_password| (0+32768))
  8207     0748  00F4               	movwf	strncmp@s2
  8208     0749  3090               	movlw	high (_password| (0+32768))
  8209     074A  00F5               	movwf	strncmp@s2+1
  8210     074B  3006               	movlw	6
  8211     074C  00F6               	movwf	strncmp@len
  8212     074D  3000               	movlw	0
  8213     074E  00F7               	movwf	strncmp@len+1
  8214     074F  160A  118A  236F  120A  118A  	fcall	_strncmp
  8215     0754  0873               	movf	?_strncmp,w
  8216     0755  0474               	iorwf	?_strncmp+1,w
  8217     0756  1D03               	btfss	3,2
  8218     0757  2F7F               	goto	l4986
  8219                           
  8220                           ;seguridad.c: 112: LCD_Clear();
  8221     0758  160A  158A  2775  120A  118A  	fcall	_LCD_Clear
  8222                           
  8223                           ;seguridad.c: 113: LCD_String_xy(0, 0, "Clave Correcta");
  8224     075D  1283               	bcf	3,5	;RP0=0, select bank0
  8225     075E  1303               	bcf	3,6	;RP1=0, select bank0
  8226     075F  01A0               	clrf	LCD_String_xy@pos
  8227     0760  30E5               	movlw	low (STR_5| (0+32768))
  8228     0761  00A1               	movwf	LCD_String_xy@msg
  8229     0762  3090               	movlw	high (STR_5| (0+32768))
  8230     0763  00A2               	movwf	LCD_String_xy@msg+1
  8231     0764  3000               	movlw	0
  8232     0765  160A  158A  27E3  120A  118A  	fcall	_LCD_String_xy
  8233                           
  8234                           ;seguridad.c: 114: clave = 1;
  8235     076A  3001               	movlw	1
  8236     076B  00EA               	movwf	_clave
  8237                           
  8238                           ;seguridad.c: 115: blink_led('V', 500, 500, 1000);
  8239     076C  30F4               	movlw	244
  8240     076D  00A0               	movwf	blink_led@on_time
  8241     076E  3001               	movlw	1
  8242     076F  00A1               	movwf	blink_led@on_time+1
  8243     0770  30F4               	movlw	244
  8244     0771  00A2               	movwf	blink_led@off_time
  8245     0772  3001               	movlw	1
  8246     0773  00A3               	movwf	blink_led@off_time+1
  8247     0774  30E8               	movlw	232
  8248     0775  00A4               	movwf	blink_led@duration
  8249     0776  3003               	movlw	3
  8250     0777  00A5               	movwf	blink_led@duration+1
  8251     0778  3056               	movlw	86
  8252     0779  160A  118A  248B  120A  118A  	fcall	_blink_led
  8253                           
  8254                           ;seguridad.c: 117: } else {
  8255     077E  2FC0               	goto	l4984
  8256     077F                     l4986:
  8257                           
  8258                           ;seguridad.c: 118: intentos++;
  8259     077F  3001               	movlw	1
  8260     0780  1683               	bsf	3,5	;RP0=1, select bank1
  8261     0781  07A5               	addwf	_intentos^(0+128),f
  8262     0782  1803               	skipnc
  8263     0783  0AA6               	incf	(_intentos+1)^(0+128),f
  8264     0784  3000               	movlw	0
  8265     0785  07A6               	addwf	(_intentos+1)^(0+128),f
  8266                           
  8267                           ;seguridad.c: 119: LCD_Clear();
  8268     0786  160A  158A  2775  120A  118A  	fcall	_LCD_Clear
  8269                           
  8270                           ;seguridad.c: 120: LCD_String_xy(0, 0, "Clave Incorrecta");
  8271     078B  1283               	bcf	3,5	;RP0=0, select bank0
  8272     078C  1303               	bcf	3,6	;RP1=0, select bank0
  8273     078D  01A0               	clrf	LCD_String_xy@pos
  8274     078E  30B6               	movlw	low (STR_6| (0+32768))
  8275     078F  00A1               	movwf	LCD_String_xy@msg
  8276     0790  3090               	movlw	high (STR_6| (0+32768))
  8277     0791  00A2               	movwf	LCD_String_xy@msg+1
  8278     0792  3000               	movlw	0
  8279     0793  160A  158A  27E3  120A  118A  	fcall	_LCD_String_xy
  8280                           
  8281                           ;seguridad.c: 121: clave = 0;
  8282     0798  01EA               	clrf	_clave
  8283                           
  8284                           ;seguridad.c: 122: blink_led('A', 300, 700, 1000);
  8285     0799  302C               	movlw	44
  8286     079A  00A0               	movwf	blink_led@on_time
  8287     079B  3001               	movlw	1
  8288     079C  00A1               	movwf	blink_led@on_time+1
  8289     079D  30BC               	movlw	188
  8290     079E  00A2               	movwf	blink_led@off_time
  8291     079F  3002               	movlw	2
  8292     07A0  00A3               	movwf	blink_led@off_time+1
  8293     07A1  30E8               	movlw	232
  8294     07A2  00A4               	movwf	blink_led@duration
  8295     07A3  3003               	movlw	3
  8296     07A4  00A5               	movwf	blink_led@duration+1
  8297     07A5  3041               	movlw	65
  8298     07A6  160A  118A  248B  120A  118A  	fcall	_blink_led
  8299                           
  8300                           ;seguridad.c: 124: if (intentos >= 3) {
  8301     07AB  1683               	bsf	3,5	;RP0=1, select bank1
  8302     07AC  0826               	movf	(_intentos+1)^(0+128),w
  8303     07AD  3A80               	xorlw	128
  8304     07AE  00FF               	movwf	127
  8305     07AF  3080               	movlw	128
  8306     07B0  027F               	subwf	127,w
  8307     07B1  1D03               	skipz
  8308     07B2  2FB5               	goto	u7035
  8309     07B3  3003               	movlw	3
  8310     07B4  0225               	subwf	_intentos^(0+128),w
  8311     07B5                     u7035:
  8312     07B5  1C03               	skipc
  8313     07B6  2FC3               	goto	l5004
  8314                           
  8315                           ;seguridad.c: 125: LCD_Clear();
  8316     07B7  160A  158A  2775  120A  118A  	fcall	_LCD_Clear
  8317                           
  8318                           ;seguridad.c: 126: clave = 2;
  8319     07BC  3002               	movlw	2
  8320     07BD  1283               	bcf	3,5	;RP0=0, select bank0
  8321     07BE  1303               	bcf	3,6	;RP1=0, select bank0
  8322     07BF  00EA               	movwf	_clave
  8323     07C0                     l4984:
  8324                           
  8325                           ;seguridad.c: 116: intentos = 0;
  8326     07C0  1683               	bsf	3,5	;RP0=1, select bank1
  8327     07C1  01A5               	clrf	_intentos^(0+128)
  8328     07C2  01A6               	clrf	(_intentos+1)^(0+128)
  8329     07C3                     l5004:
  8330                           
  8331                           ;seguridad.c: 128: };seguridad.c: 129: };seguridad.c: 132: _delay((unsigned long)((2000)
      +                          *(8000000/4000.0)));
  8332     07C3  3015               	movlw	21
  8333     07C4  1283               	bcf	3,5	;RP0=0, select bank0
  8334     07C5  1303               	bcf	3,6	;RP1=0, select bank0
  8335     07C6  00B5               	movwf	??_funcion_seguridad+2
  8336     07C7  304B               	movlw	75
  8337     07C8  00B4               	movwf	??_funcion_seguridad+1
  8338     07C9  30BD               	movlw	189
  8339     07CA  00B3               	movwf	??_funcion_seguridad
  8340     07CB                     u7257:
  8341     07CB  0BB3               	decfsz	??_funcion_seguridad,f
  8342     07CC  2FCB               	goto	u7257
  8343     07CD  0BB4               	decfsz	??_funcion_seguridad+1,f
  8344     07CE  2FCB               	goto	u7257
  8345     07CF  0BB5               	decfsz	??_funcion_seguridad+2,f
  8346     07D0  2FCB               	goto	u7257
  8347     07D1  2FD2               	nop2
  8348                           
  8349                           ;seguridad.c: 133: LCD_Clear();
  8350     07D2  160A  158A  2775   	fcall	_LCD_Clear
  8351                           
  8352                           ;seguridad.c: 134: idx = 0;
  8353     07D5  1283               	bcf	3,5	;RP0=0, select bank0
  8354     07D6  1303               	bcf	3,6	;RP1=0, select bank0
  8355     07D7  01E9               	clrf	_idx
  8356     07D8  0008               	return
  8357     07D9                     __end_of_funcion_seguridad:
  8358                           
  8359                           	psect	text31
  8360     136F                     __ptext31:	
  8361 ;; *************** function _strncmp *****************
  8362 ;; Defined at:
  8363 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c90\common\strncmp.c"
  8364 ;; Parameters:    Size  Location     Type
  8365 ;;  s1              1    3[COMMON] PTR const unsigned char 
  8366 ;;		 -> pass_user(8), 
  8367 ;;  s2              2    4[COMMON] PTR const unsigned char 
  8368 ;;		 -> password(8), 
  8369 ;;  len             2    6[COMMON] unsigned int 
  8370 ;; Auto vars:     Size  Location     Type
  8371 ;;		None
  8372 ;; Return value:  Size  Location     Type
  8373 ;;                  2    3[COMMON] int 
  8374 ;; Registers used:
  8375 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  8376 ;; Tracked objects:
  8377 ;;		On entry : 300/0
  8378 ;;		On exit  : 300/0
  8379 ;;		Unchanged: 0/0
  8380 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8381 ;;      Params:         5       0       0       0       0
  8382 ;;      Locals:         0       0       0       0       0
  8383 ;;      Temps:          0       2       0       0       0
  8384 ;;      Totals:         5       2       0       0       0
  8385 ;;Total ram usage:        7 bytes
  8386 ;; Hardware stack levels used: 2
  8387 ;; Hardware stack levels required when called: 1
  8388 ;; This function calls:
  8389 ;;		Nothing
  8390 ;; This function is called by:
  8391 ;;		_funcion_seguridad
  8392 ;; This function uses a non-reentrant model
  8393 ;;
  8394                           
  8395     136F                     _strncmp:	
  8396                           ;psect for function _strncmp
  8397                           
  8398     136F                     l4676:	
  8399                           ;incstack = 0
  8400                           ; Regs used in _strncmp: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
  8401                           
  8402     136F  3001               	movlw	1
  8403     1370  02F6               	subwf	strncmp@len,f
  8404     1371  3000               	movlw	0
  8405     1372  1C03               	skipc
  8406     1373  03F7               	decf	strncmp@len+1,f
  8407     1374  02F7               	subwf	strncmp@len+1,f
  8408     1375  0A76               	incf	strncmp@len,w
  8409     1376  1903               	btfsc	3,2
  8410     1377  0A77               	incf	strncmp@len+1,w
  8411     1378  1903               	btfsc	3,2
  8412     1379  2BAE               	goto	l4678
  8413     137A  0873               	movf	strncmp@s1,w
  8414     137B  0084               	movwf	4
  8415     137C  1383               	bcf	3,7	;select IRP bank0
  8416     137D  0800               	movf	0,w
  8417     137E  1903               	btfsc	3,2
  8418     137F  2B91               	goto	l4668
  8419     1380  0875               	movf	strncmp@s2+1,w
  8420     1381  00FF               	movwf	127
  8421     1382  0874               	movf	strncmp@s2,w
  8422     1383  0084               	movwf	4
  8423     1384  160A  118A  2000  160A  118A  	fcall	stringtab
  8424     1389  00A0               	movwf	??_strncmp
  8425     138A  0873               	movf	strncmp@s1,w
  8426     138B  0084               	movwf	4
  8427     138C  1383               	bcf	3,7	;select IRP bank0
  8428     138D  0800               	movf	0,w
  8429     138E  0620               	xorwf	??_strncmp,w
  8430     138F  1903               	skipnz
  8431     1390  2BA5               	goto	l4672
  8432     1391                     l4668:
  8433     1391  0875               	movf	strncmp@s2+1,w
  8434     1392  00FF               	movwf	127
  8435     1393  0874               	movf	strncmp@s2,w
  8436     1394  0084               	movwf	4
  8437     1395  160A  118A  2000   	fcall	stringtab
  8438     1398  00A0               	movwf	??_strncmp
  8439     1399  0873               	movf	strncmp@s1,w
  8440     139A  0084               	movwf	4
  8441     139B  1383               	bcf	3,7	;select IRP bank0
  8442     139C  0800               	movf	0,w
  8443     139D  00A1               	movwf	??_strncmp+1
  8444     139E  0820               	movf	??_strncmp,w
  8445     139F  0221               	subwf	??_strncmp+1,w
  8446     13A0  00F3               	movwf	?_strncmp
  8447     13A1  01F4               	clrf	?_strncmp+1
  8448     13A2  1C03               	skipc
  8449     13A3  03F4               	decf	?_strncmp+1,f
  8450     13A4  0008               	return
  8451     13A5                     l4672:
  8452     13A5  3001               	movlw	1
  8453     13A6  07F3               	addwf	strncmp@s1,f
  8454     13A7  3001               	movlw	1
  8455     13A8  07F4               	addwf	strncmp@s2,f
  8456     13A9  1803               	skipnc
  8457     13AA  0AF5               	incf	strncmp@s2+1,f
  8458     13AB  3000               	movlw	0
  8459     13AC  07F5               	addwf	strncmp@s2+1,f
  8460     13AD  2B6F               	goto	l4676
  8461     13AE                     l4678:
  8462     13AE  01F3               	clrf	?_strncmp
  8463     13AF  01F4               	clrf	?_strncmp+1
  8464     13B0  0008               	return
  8465     13B1                     __end_of_strncmp:
  8466                           
  8467                           	psect	text32
  8468     0882                     __ptext32:	
  8469 ;; *************** function _keypad_getkey *****************
  8470 ;; Defined at:
  8471 ;;		line 57 in file "keypad.c"
  8472 ;; Parameters:    Size  Location     Type
  8473 ;;		None
  8474 ;; Auto vars:     Size  Location     Type
  8475 ;;  letras         16    0[BANK0 ] unsigned char [4][4]
  8476 ;;  i               2   17[BANK0 ] int 
  8477 ;;  valor           1   16[BANK0 ] unsigned char 
  8478 ;; Return value:  Size  Location     Type
  8479 ;;                  1    wreg      unsigned char 
  8480 ;; Registers used:
  8481 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  8482 ;; Tracked objects:
  8483 ;;		On entry : 0/0
  8484 ;;		On exit  : 300/0
  8485 ;;		Unchanged: 0/0
  8486 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8487 ;;      Params:         0       0       0       0       0
  8488 ;;      Locals:         0      19       0       0       0
  8489 ;;      Temps:          4       0       0       0       0
  8490 ;;      Totals:         4      19       0       0       0
  8491 ;;Total ram usage:       23 bytes
  8492 ;; Hardware stack levels used: 1
  8493 ;; Hardware stack levels required when called: 1
  8494 ;; This function calls:
  8495 ;;		Nothing
  8496 ;; This function is called by:
  8497 ;;		_funcion_seguridad
  8498 ;; This function uses a non-reentrant model
  8499 ;;
  8500                           
  8501     0882                     _keypad_getkey:	
  8502                           ;psect for function _keypad_getkey
  8503                           
  8504                           
  8505                           ;keypad.c: 59: char letras[4][4]={ {'1','2','3','A'},;keypad.c: 60: {'4','5','6','B'},;k
      +                          eypad.c: 61: {'7','8','9','C'},;keypad.c: 62: {'*','0','#','D'}};
  8506                           
  8507                           ;incstack = 0
  8508                           ; Regs used in _keypad_getkey: [wreg-fsr0h+status,2+status,0+btemp+1]
  8509     0882  3090               	movlw	keypad_getkey@F1301& (0+255)
  8510     0883  0084               	movwf	4
  8511     0884  3020               	movlw	low keypad_getkey@letras
  8512     0885  00F3               	movwf	??_keypad_getkey
  8513     0886  3010               	movlw	16
  8514     0887  00F4               	movwf	??_keypad_getkey+1
  8515     0888                     u3980:
  8516     0888  1783               	bsf	3,7	;select IRP bank3
  8517     0889  0800               	movf	0,w
  8518     088A  00F5               	movwf	??_keypad_getkey+2
  8519     088B  0A04               	incf	4,w
  8520     088C  00F6               	movwf	??_keypad_getkey+3
  8521     088D  0873               	movf	??_keypad_getkey,w
  8522     088E  0084               	movwf	4
  8523     088F  1383               	bcf	3,7	;select IRP bank0
  8524     0890  0875               	movf	??_keypad_getkey+2,w
  8525     0891  0080               	movwf	0
  8526     0892  0A04               	incf	4,w
  8527     0893  00F3               	movwf	??_keypad_getkey
  8528     0894  0876               	movf	??_keypad_getkey+3,w
  8529     0895  0084               	movwf	4
  8530     0896  0BF4               	decfsz	??_keypad_getkey+1,f
  8531     0897  2888               	goto	u3980
  8532                           
  8533                           ;keypad.c: 64: char valor=0;
  8534     0898  1283               	bcf	3,5	;RP0=0, select bank0
  8535     0899  1303               	bcf	3,6	;RP1=0, select bank0
  8536     089A  01B0               	clrf	keypad_getkey@valor
  8537                           
  8538                           ;keypad.c: 66: for(i=0;i<4;i++){
  8539     089B  01B1               	clrf	keypad_getkey@i
  8540     089C  01B2               	clrf	keypad_getkey@i+1
  8541     089D                     l3212:
  8542                           
  8543                           ;keypad.c: 68: if(i==0){
  8544     089D  1283               	bcf	3,5	;RP0=0, select bank0
  8545     089E  1303               	bcf	3,6	;RP1=0, select bank0
  8546     089F  0831               	movf	keypad_getkey@i,w
  8547     08A0  0432               	iorwf	keypad_getkey@i+1,w
  8548     08A1  1D03               	btfss	3,2
  8549     08A2  28BF               	goto	l3234
  8550                           
  8551                           ;keypad.c: 70: PORTB = (1<<7)|(1<<6)|(1<<5)|(1<<4)|(1<<3)|(1<<2)|(1<<1)|(0<<0);
  8552     08A3  30FE               	movlw	254
  8553     08A4  0086               	movwf	6	;volatile
  8554                           
  8555                           ;keypad.c: 71: _delay((unsigned long)((100)*(8000000/4000000.0)));
  8556     08A5  3042               	movlw	66
  8557     08A6  00F3               	movwf	??_keypad_getkey
  8558     08A7                     u7267:
  8559     08A7  0BF3               	decfsz	??_keypad_getkey,f
  8560     08A8  28A7               	goto	u7267
  8561     08A9  0000               	nop
  8562     08AA                     l3220:	
  8563                           ;keypad.c: 72: while (!(PORTB & (1<<4))){valor=letras[0][0];}
  8564                           
  8565     08AA  1283               	bcf	3,5	;RP0=0, select bank0
  8566     08AB  1303               	bcf	3,6	;RP1=0, select bank0
  8567     08AC  1A06               	btfsc	6,4	;volatile
  8568     08AD  28B3               	goto	l3224
  8569     08AE  0820               	movf	keypad_getkey@letras,w
  8570     08AF  00B0               	movwf	keypad_getkey@valor
  8571     08B0  28AA               	goto	l3220
  8572     08B1                     l3222:
  8573     08B1  0821               	movf	keypad_getkey@letras+1,w
  8574     08B2  00B0               	movwf	keypad_getkey@valor
  8575     08B3                     l3224:
  8576     08B3  1A86               	btfsc	6,5	;volatile
  8577     08B4  28B8               	goto	l3228
  8578     08B5  28B1               	goto	l3222
  8579     08B6                     l3226:
  8580     08B6  0822               	movf	keypad_getkey@letras+2,w
  8581     08B7  00B0               	movwf	keypad_getkey@valor
  8582     08B8                     l3228:
  8583     08B8  1B06               	btfsc	6,6	;volatile
  8584     08B9  28BD               	goto	l3232
  8585     08BA  28B6               	goto	l3226
  8586     08BB                     l3230:
  8587     08BB  0823               	movf	keypad_getkey@letras+3,w
  8588     08BC  00B0               	movwf	keypad_getkey@valor
  8589     08BD                     l3232:
  8590     08BD  1F86               	btfss	6,7	;volatile
  8591     08BE  28BB               	goto	l3230
  8592     08BF                     l3234:
  8593                           
  8594                           ;keypad.c: 76: };keypad.c: 78: if(i==1){
  8595     08BF  0331               	decf	keypad_getkey@i,w
  8596     08C0  0432               	iorwf	keypad_getkey@i+1,w
  8597     08C1  1D03               	btfss	3,2
  8598     08C2  28DF               	goto	l3256
  8599                           
  8600                           ;keypad.c: 79: PORTB = (1<<7)|(1<<6)|(1<<5)|(1<<4)|(1<<3)|(1<<2)|(0<<1)|(1<<0);
  8601     08C3  30FD               	movlw	253
  8602     08C4  0086               	movwf	6	;volatile
  8603                           
  8604                           ;keypad.c: 80: _delay((unsigned long)((100)*(8000000/4000000.0)));
  8605     08C5  3042               	movlw	66
  8606     08C6  00F3               	movwf	??_keypad_getkey
  8607     08C7                     u7277:
  8608     08C7  0BF3               	decfsz	??_keypad_getkey,f
  8609     08C8  28C7               	goto	u7277
  8610     08C9  0000               	nop
  8611     08CA                     l3242:	
  8612                           ;keypad.c: 81: while (!(PORTB & (1<<4))){valor=letras[1][0];}
  8613                           
  8614     08CA  1283               	bcf	3,5	;RP0=0, select bank0
  8615     08CB  1303               	bcf	3,6	;RP1=0, select bank0
  8616     08CC  1A06               	btfsc	6,4	;volatile
  8617     08CD  28D3               	goto	l3246
  8618     08CE  0824               	movf	keypad_getkey@letras+4,w
  8619     08CF  00B0               	movwf	keypad_getkey@valor
  8620     08D0  28CA               	goto	l3242
  8621     08D1                     l3244:
  8622     08D1  0825               	movf	keypad_getkey@letras+5,w
  8623     08D2  00B0               	movwf	keypad_getkey@valor
  8624     08D3                     l3246:
  8625     08D3  1A86               	btfsc	6,5	;volatile
  8626     08D4  28D8               	goto	l3250
  8627     08D5  28D1               	goto	l3244
  8628     08D6                     l3248:
  8629     08D6  0826               	movf	keypad_getkey@letras+6,w
  8630     08D7  00B0               	movwf	keypad_getkey@valor
  8631     08D8                     l3250:
  8632     08D8  1B06               	btfsc	6,6	;volatile
  8633     08D9  28DD               	goto	l3254
  8634     08DA  28D6               	goto	l3248
  8635     08DB                     l3252:
  8636     08DB  0827               	movf	keypad_getkey@letras+7,w
  8637     08DC  00B0               	movwf	keypad_getkey@valor
  8638     08DD                     l3254:
  8639     08DD  1F86               	btfss	6,7	;volatile
  8640     08DE  28DB               	goto	l3252
  8641     08DF                     l3256:
  8642                           
  8643                           ;keypad.c: 85: };keypad.c: 87: if(i==2){
  8644     08DF  3002               	movlw	2
  8645     08E0  0631               	xorwf	keypad_getkey@i,w
  8646     08E1  0432               	iorwf	keypad_getkey@i+1,w
  8647     08E2  1D03               	btfss	3,2
  8648     08E3  2900               	goto	l3278
  8649                           
  8650                           ;keypad.c: 88: PORTB = (1<<7)|(1<<6)|(1<<5)|(1<<4)|(1<<3)|(0<<2)|(1<<1)|(1<<0);
  8651     08E4  30FB               	movlw	251
  8652     08E5  0086               	movwf	6	;volatile
  8653                           
  8654                           ;keypad.c: 89: _delay((unsigned long)((100)*(8000000/4000000.0)));
  8655     08E6  3042               	movlw	66
  8656     08E7  00F3               	movwf	??_keypad_getkey
  8657     08E8                     u7287:
  8658     08E8  0BF3               	decfsz	??_keypad_getkey,f
  8659     08E9  28E8               	goto	u7287
  8660     08EA  0000               	nop
  8661     08EB                     l3264:	
  8662                           ;keypad.c: 90: while (!(PORTB & (1<<4))){valor=letras[2][0];}
  8663                           
  8664     08EB  1283               	bcf	3,5	;RP0=0, select bank0
  8665     08EC  1303               	bcf	3,6	;RP1=0, select bank0
  8666     08ED  1A06               	btfsc	6,4	;volatile
  8667     08EE  28F4               	goto	l3268
  8668     08EF  0828               	movf	keypad_getkey@letras+8,w
  8669     08F0  00B0               	movwf	keypad_getkey@valor
  8670     08F1  28EB               	goto	l3264
  8671     08F2                     l3266:
  8672     08F2  0829               	movf	keypad_getkey@letras+9,w
  8673     08F3  00B0               	movwf	keypad_getkey@valor
  8674     08F4                     l3268:
  8675     08F4  1A86               	btfsc	6,5	;volatile
  8676     08F5  28F9               	goto	l3272
  8677     08F6  28F2               	goto	l3266
  8678     08F7                     l3270:
  8679     08F7  082A               	movf	keypad_getkey@letras+10,w
  8680     08F8  00B0               	movwf	keypad_getkey@valor
  8681     08F9                     l3272:
  8682     08F9  1B06               	btfsc	6,6	;volatile
  8683     08FA  28FE               	goto	l3276
  8684     08FB  28F7               	goto	l3270
  8685     08FC                     l3274:
  8686     08FC  082B               	movf	keypad_getkey@letras+11,w
  8687     08FD  00B0               	movwf	keypad_getkey@valor
  8688     08FE                     l3276:
  8689     08FE  1F86               	btfss	6,7	;volatile
  8690     08FF  28FC               	goto	l3274
  8691     0900                     l3278:
  8692                           
  8693                           ;keypad.c: 94: };keypad.c: 96: if(i==3){
  8694     0900  3003               	movlw	3
  8695     0901  0631               	xorwf	keypad_getkey@i,w
  8696     0902  0432               	iorwf	keypad_getkey@i+1,w
  8697     0903  1D03               	btfss	3,2
  8698     0904  2921               	goto	l3300
  8699                           
  8700                           ;keypad.c: 97: PORTB = (1<<7)|(1<<6)|(1<<5)|(1<<4)|(0<<3)|(1<<2)|(1<<1)|(1<<0);
  8701     0905  30F7               	movlw	247
  8702     0906  0086               	movwf	6	;volatile
  8703                           
  8704                           ;keypad.c: 98: _delay((unsigned long)((100)*(8000000/4000000.0)));
  8705     0907  3042               	movlw	66
  8706     0908  00F3               	movwf	??_keypad_getkey
  8707     0909                     u7297:
  8708     0909  0BF3               	decfsz	??_keypad_getkey,f
  8709     090A  2909               	goto	u7297
  8710     090B  0000               	nop
  8711     090C                     l3286:	
  8712                           ;keypad.c: 99: while (!(PORTB & (1<<4))){valor=letras[3][0];}
  8713                           
  8714     090C  1283               	bcf	3,5	;RP0=0, select bank0
  8715     090D  1303               	bcf	3,6	;RP1=0, select bank0
  8716     090E  1A06               	btfsc	6,4	;volatile
  8717     090F  2915               	goto	l3290
  8718     0910  082C               	movf	keypad_getkey@letras+12,w
  8719     0911  00B0               	movwf	keypad_getkey@valor
  8720     0912  290C               	goto	l3286
  8721     0913                     l3288:
  8722     0913  082D               	movf	keypad_getkey@letras+13,w
  8723     0914  00B0               	movwf	keypad_getkey@valor
  8724     0915                     l3290:
  8725     0915  1A86               	btfsc	6,5	;volatile
  8726     0916  291A               	goto	l3294
  8727     0917  2913               	goto	l3288
  8728     0918                     l3292:
  8729     0918  082E               	movf	keypad_getkey@letras+14,w
  8730     0919  00B0               	movwf	keypad_getkey@valor
  8731     091A                     l3294:
  8732     091A  1B06               	btfsc	6,6	;volatile
  8733     091B  291F               	goto	l3298
  8734     091C  2918               	goto	l3292
  8735     091D                     l3296:
  8736     091D  082F               	movf	keypad_getkey@letras+15,w
  8737     091E  00B0               	movwf	keypad_getkey@valor
  8738     091F                     l3298:
  8739     091F  1F86               	btfss	6,7	;volatile
  8740     0920  291D               	goto	l3296
  8741     0921                     l3300:
  8742     0921  3001               	movlw	1
  8743     0922  07B1               	addwf	keypad_getkey@i,f
  8744     0923  1803               	skipnc
  8745     0924  0AB2               	incf	keypad_getkey@i+1,f
  8746     0925  3000               	movlw	0
  8747     0926  07B2               	addwf	keypad_getkey@i+1,f
  8748     0927  0832               	movf	keypad_getkey@i+1,w
  8749     0928  3A80               	xorlw	128
  8750     0929  00FF               	movwf	127
  8751     092A  3080               	movlw	128
  8752     092B  027F               	subwf	127,w
  8753     092C  1D03               	skipz
  8754     092D  2930               	goto	u4195
  8755     092E  3004               	movlw	4
  8756     092F  0231               	subwf	keypad_getkey@i,w
  8757     0930                     u4195:
  8758     0930  1C03               	skipc
  8759     0931  289D               	goto	l3212
  8760                           
  8761                           ;keypad.c: 103: };keypad.c: 104: };keypad.c: 106: return valor;
  8762     0932  1283               	bcf	3,5	;RP0=0, select bank0
  8763     0933  1303               	bcf	3,6	;RP1=0, select bank0
  8764     0934  0830               	movf	keypad_getkey@valor,w
  8765     0935  0008               	return
  8766     0936                     __end_of_keypad_getkey:
  8767                           
  8768                           	psect	text33
  8769     1F75                     __ptext33:	
  8770 ;; *************** function _LCD_Clear *****************
  8771 ;; Defined at:
  8772 ;;		line 76 in file "LCD.c"
  8773 ;; Parameters:    Size  Location     Type
  8774 ;;		None
  8775 ;; Auto vars:     Size  Location     Type
  8776 ;;		None
  8777 ;; Return value:  Size  Location     Type
  8778 ;;                  1    wreg      void 
  8779 ;; Registers used:
  8780 ;;		wreg, status,2, status,0, pclath, cstack
  8781 ;; Tracked objects:
  8782 ;;		On entry : 0/0
  8783 ;;		On exit  : 0/0
  8784 ;;		Unchanged: 0/0
  8785 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8786 ;;      Params:         0       0       0       0       0
  8787 ;;      Locals:         0       0       0       0       0
  8788 ;;      Temps:          2       0       0       0       0
  8789 ;;      Totals:         2       0       0       0       0
  8790 ;;Total ram usage:        2 bytes
  8791 ;; Hardware stack levels used: 1
  8792 ;; Hardware stack levels required when called: 2
  8793 ;; This function calls:
  8794 ;;		_LCD_Command
  8795 ;; This function is called by:
  8796 ;;		_funcion_seguridad
  8797 ;;		_ambiental
  8798 ;;		_puertas
  8799 ;; This function uses a non-reentrant model
  8800 ;;
  8801                           
  8802     1F75                     _LCD_Clear:	
  8803                           ;psect for function _LCD_Clear
  8804                           
  8805                           
  8806                           ;LCD.c: 78: LCD_Command(0x01);
  8807                           
  8808                           ;incstack = 0
  8809                           ; Regs used in _LCD_Clear: [wreg+status,2+status,0+pclath+cstack]
  8810     1F75  3001               	movlw	1
  8811     1F76  160A  118A  2302  160A  158A  	fcall	_LCD_Command
  8812                           
  8813                           ;LCD.c: 79: _delay((unsigned long)((3)*(8000000/4000.0)));
  8814     1F7B  3008               	movlw	8
  8815     1F7C  00F7               	movwf	??_LCD_Clear+1
  8816     1F7D  30C9               	movlw	201
  8817     1F7E  00F6               	movwf	??_LCD_Clear
  8818     1F7F                     u7307:
  8819     1F7F  0BF6               	decfsz	??_LCD_Clear,f
  8820     1F80  2F7F               	goto	u7307
  8821     1F81  0BF7               	decfsz	??_LCD_Clear+1,f
  8822     1F82  2F7F               	goto	u7307
  8823     1F83  2F84               	nop2
  8824     1F84  0008               	return
  8825     1F85                     __end_of_LCD_Clear:
  8826                           
  8827                           	psect	text34
  8828     1F1C                     __ptext34:	
  8829 ;; *************** function _manejar_estado_bloqueado *****************
  8830 ;; Defined at:
  8831 ;;		line 65 in file "main.c"
  8832 ;; Parameters:    Size  Location     Type
  8833 ;;		None
  8834 ;; Auto vars:     Size  Location     Type
  8835 ;;		None
  8836 ;; Return value:  Size  Location     Type
  8837 ;;                  1    wreg      void 
  8838 ;; Registers used:
  8839 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8840 ;; Tracked objects:
  8841 ;;		On entry : 0/0
  8842 ;;		On exit  : 300/0
  8843 ;;		Unchanged: 0/0
  8844 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8845 ;;      Params:         0       0       0       0       0
  8846 ;;      Locals:         0       0       0       0       0
  8847 ;;      Temps:          0       0       0       0       0
  8848 ;;      Totals:         0       0       0       0       0
  8849 ;;Total ram usage:        0 bytes
  8850 ;; Hardware stack levels used: 1
  8851 ;; Hardware stack levels required when called: 5
  8852 ;; This function calls:
  8853 ;;		_sistema_bloqueado
  8854 ;; This function is called by:
  8855 ;;		_main
  8856 ;; This function uses a non-reentrant model
  8857 ;;
  8858                           
  8859     1F1C                     _manejar_estado_bloqueado:	
  8860                           ;psect for function _manejar_estado_bloqueado
  8861                           
  8862                           
  8863                           ;main.c: 66: sistema_bloqueado();
  8864                           
  8865                           ;incstack = 0
  8866                           ; Regs used in _manejar_estado_bloqueado: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+c
      +                          stack]
  8867     1F1C  160A  118A  21A4  160A  158A  	fcall	_sistema_bloqueado
  8868                           
  8869                           ;main.c: 67: if (flag_3s) {
  8870     1F21  0878               	movf	_flag_3s,w
  8871     1F22  1903               	btfsc	3,2
  8872     1F23  0008               	return
  8873                           
  8874                           ;main.c: 68: estado_actual = INIT;
  8875     1F24  01FA               	clrf	_estado_actual
  8876     1F25  0008               	return
  8877     1F26                     __end_of_manejar_estado_bloqueado:
  8878                           
  8879                           	psect	text35
  8880     11A4                     __ptext35:	
  8881 ;; *************** function _sistema_bloqueado *****************
  8882 ;; Defined at:
  8883 ;;		line 138 in file "seguridad.c"
  8884 ;; Parameters:    Size  Location     Type
  8885 ;;		None
  8886 ;; Auto vars:     Size  Location     Type
  8887 ;;		None
  8888 ;; Return value:  Size  Location     Type
  8889 ;;                  1    wreg      void 
  8890 ;; Registers used:
  8891 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8892 ;; Tracked objects:
  8893 ;;		On entry : 0/0
  8894 ;;		On exit  : 300/0
  8895 ;;		Unchanged: 0/0
  8896 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8897 ;;      Params:         0       0       0       0       0
  8898 ;;      Locals:         0       0       0       0       0
  8899 ;;      Temps:          0       0       0       0       0
  8900 ;;      Totals:         0       0       0       0       0
  8901 ;;Total ram usage:        0 bytes
  8902 ;; Hardware stack levels used: 1
  8903 ;; Hardware stack levels required when called: 4
  8904 ;; This function calls:
  8905 ;;		_LCD_String_xy
  8906 ;;		_blink_led
  8907 ;; This function is called by:
  8908 ;;		_manejar_estado_bloqueado
  8909 ;; This function uses a non-reentrant model
  8910 ;;
  8911                           
  8912     11A4                     _sistema_bloqueado:	
  8913                           ;psect for function _sistema_bloqueado
  8914                           
  8915                           
  8916                           ;seguridad.c: 139: blink_led('R', 300, 500, 2000);
  8917                           
  8918                           ;incstack = 0
  8919                           ; Regs used in _sistema_bloqueado: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  8920     11A4  302C               	movlw	44
  8921     11A5  1283               	bcf	3,5	;RP0=0, select bank0
  8922     11A6  1303               	bcf	3,6	;RP1=0, select bank0
  8923     11A7  00A0               	movwf	blink_led@on_time
  8924     11A8  3001               	movlw	1
  8925     11A9  00A1               	movwf	blink_led@on_time+1
  8926     11AA  30F4               	movlw	244
  8927     11AB  00A2               	movwf	blink_led@off_time
  8928     11AC  3001               	movlw	1
  8929     11AD  00A3               	movwf	blink_led@off_time+1
  8930     11AE  30D0               	movlw	208
  8931     11AF  00A4               	movwf	blink_led@duration
  8932     11B0  3007               	movlw	7
  8933     11B1  00A5               	movwf	blink_led@duration+1
  8934     11B2  3052               	movlw	82
  8935     11B3  160A  118A  248B  160A  118A  	fcall	_blink_led
  8936                           
  8937                           ;seguridad.c: 140: LCD_String_xy(0, 0, "Sistema Bloqueado");
  8938     11B8  01A0               	clrf	LCD_String_xy@pos
  8939     11B9  30A4               	movlw	low (STR_7| (0+32768))
  8940     11BA  00A1               	movwf	LCD_String_xy@msg
  8941     11BB  3090               	movlw	high (STR_7| (0+32768))
  8942     11BC  00A2               	movwf	LCD_String_xy@msg+1
  8943     11BD  3000               	movlw	0
  8944     11BE  160A  158A  27E3   	fcall	_LCD_String_xy
  8945     11C1  0008               	return
  8946     11C2                     __end_of_sistema_bloqueado:
  8947                           
  8948                           	psect	text36
  8949     148B                     __ptext36:	
  8950 ;; *************** function _blink_led *****************
  8951 ;; Defined at:
  8952 ;;		line 29 in file "seguridad.c"
  8953 ;; Parameters:    Size  Location     Type
  8954 ;;  led             1    wreg     unsigned char 
  8955 ;;  on_time         2    0[BANK0 ] unsigned int 
  8956 ;;  off_time        2    2[BANK0 ] unsigned int 
  8957 ;;  duration        2    4[BANK0 ] unsigned int 
  8958 ;; Auto vars:     Size  Location     Type
  8959 ;;  led             1   10[BANK0 ] unsigned char 
  8960 ;;  elapsed_time    2    8[BANK0 ] unsigned int 
  8961 ;; Return value:  Size  Location     Type
  8962 ;;                  1    wreg      void 
  8963 ;; Registers used:
  8964 ;;		wreg, status,2, status,0, pclath, cstack
  8965 ;; Tracked objects:
  8966 ;;		On entry : 300/0
  8967 ;;		On exit  : 300/0
  8968 ;;		Unchanged: 0/0
  8969 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8970 ;;      Params:         0       6       0       0       0
  8971 ;;      Locals:         0       3       0       0       0
  8972 ;;      Temps:          0       2       0       0       0
  8973 ;;      Totals:         0      11       0       0       0
  8974 ;;Total ram usage:       11 bytes
  8975 ;; Hardware stack levels used: 1
  8976 ;; Hardware stack levels required when called: 2
  8977 ;; This function calls:
  8978 ;;		_delay_ms_variable
  8979 ;; This function is called by:
  8980 ;;		_funcion_seguridad
  8981 ;;		_sistema_bloqueado
  8982 ;; This function uses a non-reentrant model
  8983 ;;
  8984                           
  8985     148B                     _blink_led:	
  8986                           ;psect for function _blink_led
  8987                           
  8988                           
  8989                           ;incstack = 0
  8990                           ; Regs used in _blink_led: [wreg+status,2+status,0+pclath+cstack]
  8991                           ;blink_led@led stored from wreg
  8992     148B  00AA               	movwf	blink_led@led
  8993                           
  8994                           ;seguridad.c: 30: unsigned int elapsed_time = 0;
  8995     148C  01A8               	clrf	blink_led@elapsed_time
  8996     148D  01A9               	clrf	blink_led@elapsed_time+1
  8997     148E                     l4660:	
  8998                           ;seguridad.c: 32: while (elapsed_time < duration) {
  8999                           
  9000     148E  0825               	movf	blink_led@duration+1,w
  9001     148F  0229               	subwf	blink_led@elapsed_time+1,w
  9002     1490  1D03               	skipz
  9003     1491  2C94               	goto	u6525
  9004     1492  0824               	movf	blink_led@duration,w
  9005     1493  0228               	subwf	blink_led@elapsed_time,w
  9006     1494                     u6525:
  9007     1494  1803               	btfsc	3,0
  9008     1495  0008               	return
  9009                           
  9010                           ;seguridad.c: 33: if (led == 'V') {
  9011     1496  3056               	movlw	86
  9012     1497  062A               	xorwf	blink_led@led,w
  9013     1498  1D03               	btfss	3,2
  9014     1499  2C9C               	goto	l4634
  9015                           
  9016                           ;seguridad.c: 34: PORTAbits.RA4 = 1;
  9017     149A  1605               	bsf	5,4	;volatile
  9018                           
  9019                           ;seguridad.c: 35: } else if (led == 'A') {
  9020     149B  2CA6               	goto	l4642
  9021     149C                     l4634:
  9022     149C  3041               	movlw	65
  9023     149D  062A               	xorwf	blink_led@led,w
  9024     149E  1D03               	btfss	3,2
  9025     149F  2CA2               	goto	l4638
  9026                           
  9027                           ;seguridad.c: 36: PORTAbits.RA5 = 1;
  9028     14A0  1685               	bsf	5,5	;volatile
  9029                           
  9030                           ;seguridad.c: 37: } else if (led == 'R') {
  9031     14A1  2CA6               	goto	l4642
  9032     14A2                     l4638:
  9033     14A2  3052               	movlw	82
  9034     14A3  062A               	xorwf	blink_led@led,w
  9035     14A4  1903               	btfsc	3,2
  9036                           
  9037                           ;seguridad.c: 38: PORTAbits.RA6 = 1;
  9038     14A5  1705               	bsf	5,6	;volatile
  9039     14A6                     l4642:
  9040                           
  9041                           ;seguridad.c: 39: };seguridad.c: 40: delay_ms_variable(on_time);
  9042     14A6  0821               	movf	blink_led@on_time+1,w
  9043     14A7  00F4               	movwf	delay_ms_variable@ms+1
  9044     14A8  0820               	movf	blink_led@on_time,w
  9045     14A9  00F3               	movwf	delay_ms_variable@ms
  9046     14AA  160A  158A  27B8  160A  118A  	fcall	_delay_ms_variable
  9047                           
  9048                           ;seguridad.c: 43: if (led == 'V') {
  9049     14AF  3056               	movlw	86
  9050     14B0  1283               	bcf	3,5	;RP0=0, select bank0
  9051     14B1  1303               	bcf	3,6	;RP1=0, select bank0
  9052     14B2  062A               	xorwf	blink_led@led,w
  9053     14B3  1D03               	btfss	3,2
  9054     14B4  2CB7               	goto	l4648
  9055                           
  9056                           ;seguridad.c: 44: PORTAbits.RA4 = 0;
  9057     14B5  1205               	bcf	5,4	;volatile
  9058                           
  9059                           ;seguridad.c: 45: } else if (led == 'A') {
  9060     14B6  2CC1               	goto	l4656
  9061     14B7                     l4648:
  9062     14B7  3041               	movlw	65
  9063     14B8  062A               	xorwf	blink_led@led,w
  9064     14B9  1D03               	btfss	3,2
  9065     14BA  2CBD               	goto	l4652
  9066                           
  9067                           ;seguridad.c: 46: PORTAbits.RA5 = 0;
  9068     14BB  1285               	bcf	5,5	;volatile
  9069                           
  9070                           ;seguridad.c: 47: } else if (led == 'R') {
  9071     14BC  2CC1               	goto	l4656
  9072     14BD                     l4652:
  9073     14BD  3052               	movlw	82
  9074     14BE  062A               	xorwf	blink_led@led,w
  9075     14BF  1903               	btfsc	3,2
  9076                           
  9077                           ;seguridad.c: 48: PORTAbits.RA6 = 0;
  9078     14C0  1305               	bcf	5,6	;volatile
  9079     14C1                     l4656:
  9080                           
  9081                           ;seguridad.c: 49: };seguridad.c: 50: delay_ms_variable(off_time);
  9082     14C1  0823               	movf	blink_led@off_time+1,w
  9083     14C2  00F4               	movwf	delay_ms_variable@ms+1
  9084     14C3  0822               	movf	blink_led@off_time,w
  9085     14C4  00F3               	movwf	delay_ms_variable@ms
  9086     14C5  160A  158A  27B8  160A  118A  	fcall	_delay_ms_variable
  9087                           
  9088                           ;seguridad.c: 52: elapsed_time += on_time + off_time;
  9089     14CA  1283               	bcf	3,5	;RP0=0, select bank0
  9090     14CB  1303               	bcf	3,6	;RP1=0, select bank0
  9091     14CC  0822               	movf	blink_led@off_time,w
  9092     14CD  0720               	addwf	blink_led@on_time,w
  9093     14CE  00A6               	movwf	??_blink_led
  9094     14CF  0823               	movf	blink_led@off_time+1,w
  9095     14D0  1803               	skipnc
  9096     14D1  0A23               	incf	blink_led@off_time+1,w
  9097     14D2  0721               	addwf	blink_led@on_time+1,w
  9098     14D3  00A7               	movwf	??_blink_led+1
  9099     14D4  0826               	movf	??_blink_led,w
  9100     14D5  07A8               	addwf	blink_led@elapsed_time,f
  9101     14D6  1803               	skipnc
  9102     14D7  0AA9               	incf	blink_led@elapsed_time+1,f
  9103     14D8  0827               	movf	??_blink_led+1,w
  9104     14D9  07A9               	addwf	blink_led@elapsed_time+1,f
  9105     14DA  2C8E               	goto	l4660
  9106     14DB                     __end_of_blink_led:
  9107                           
  9108                           	psect	text37
  9109     1FB8                     __ptext37:	
  9110 ;; *************** function _delay_ms_variable *****************
  9111 ;; Defined at:
  9112 ;;		line 22 in file "seguridad.c"
  9113 ;; Parameters:    Size  Location     Type
  9114 ;;  ms              2    3[COMMON] unsigned int 
  9115 ;; Auto vars:     Size  Location     Type
  9116 ;;		None
  9117 ;; Return value:  Size  Location     Type
  9118 ;;                  1    wreg      void 
  9119 ;; Registers used:
  9120 ;;		wreg, status,2, status,0
  9121 ;; Tracked objects:
  9122 ;;		On entry : 300/0
  9123 ;;		On exit  : 0/0
  9124 ;;		Unchanged: 0/0
  9125 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9126 ;;      Params:         2       0       0       0       0
  9127 ;;      Locals:         0       0       0       0       0
  9128 ;;      Temps:          2       0       0       0       0
  9129 ;;      Totals:         4       0       0       0       0
  9130 ;;Total ram usage:        4 bytes
  9131 ;; Hardware stack levels used: 1
  9132 ;; Hardware stack levels required when called: 1
  9133 ;; This function calls:
  9134 ;;		Nothing
  9135 ;; This function is called by:
  9136 ;;		_blink_led
  9137 ;; This function uses a non-reentrant model
  9138 ;;
  9139                           
  9140     1FB8                     _delay_ms_variable:	
  9141                           ;psect for function _delay_ms_variable
  9142                           
  9143     1FB8                     l2844:	
  9144                           ;seguridad.c: 23: while (ms--) {
  9145                           
  9146                           ;incstack = 0
  9147                           ; Regs used in _delay_ms_variable: [wreg+status,2+status,0]
  9148                           
  9149     1FB8  3001               	movlw	1
  9150     1FB9  02F3               	subwf	delay_ms_variable@ms,f
  9151     1FBA  3000               	movlw	0
  9152     1FBB  1C03               	skipc
  9153     1FBC  03F4               	decf	delay_ms_variable@ms+1,f
  9154     1FBD  02F4               	subwf	delay_ms_variable@ms+1,f
  9155     1FBE  0A73               	incf	delay_ms_variable@ms,w
  9156     1FBF  1903               	btfsc	3,2
  9157     1FC0  0A74               	incf	delay_ms_variable@ms+1,w
  9158     1FC1  1903               	btfsc	3,2
  9159     1FC2  0008               	return
  9160                           
  9161                           ;seguridad.c: 24: _delay((unsigned long)((1)*(8000000/4000.0)));
  9162     1FC3  3003               	movlw	3
  9163     1FC4  00F6               	movwf	??_delay_ms_variable+1
  9164     1FC5  3097               	movlw	151
  9165     1FC6  00F5               	movwf	??_delay_ms_variable
  9166     1FC7                     u7317:
  9167     1FC7  0BF5               	decfsz	??_delay_ms_variable,f
  9168     1FC8  2FC7               	goto	u7317
  9169     1FC9  0BF6               	decfsz	??_delay_ms_variable+1,f
  9170     1FCA  2FC7               	goto	u7317
  9171     1FCB  2FCC               	nop2
  9172     1FCC  2FB8               	goto	l2844
  9173     1FCD                     __end_of_delay_ms_variable:
  9174                           
  9175                           	psect	text38
  9176     1FA6                     __ptext38:	
  9177 ;; *************** function _manejar_estado_alerta *****************
  9178 ;; Defined at:
  9179 ;;		line 102 in file "main.c"
  9180 ;; Parameters:    Size  Location     Type
  9181 ;;		None
  9182 ;; Auto vars:     Size  Location     Type
  9183 ;;		None
  9184 ;; Return value:  Size  Location     Type
  9185 ;;                  1    wreg      void 
  9186 ;; Registers used:
  9187 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  9188 ;; Tracked objects:
  9189 ;;		On entry : 0/0
  9190 ;;		On exit  : 300/0
  9191 ;;		Unchanged: 0/0
  9192 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9193 ;;      Params:         0       0       0       0       0
  9194 ;;      Locals:         0       0       0       0       0
  9195 ;;      Temps:          0       0       0       0       0
  9196 ;;      Totals:         0       0       0       0       0
  9197 ;;Total ram usage:        0 bytes
  9198 ;; Hardware stack levels used: 1
  9199 ;; Hardware stack levels required when called: 4
  9200 ;; This function calls:
  9201 ;;		_LCD_String_xy
  9202 ;; This function is called by:
  9203 ;;		_main
  9204 ;; This function uses a non-reentrant model
  9205 ;;
  9206                           
  9207     1FA6                     _manejar_estado_alerta:	
  9208                           ;psect for function _manejar_estado_alerta
  9209                           
  9210                           
  9211                           ;main.c: 103: LCD_String_xy(0, 0, "ALERTA");
  9212                           
  9213                           ;incstack = 0
  9214                           ; Regs used in _manejar_estado_alerta: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+csta
      +                          ck]
  9215     1FA6  1283               	bcf	3,5	;RP0=0, select bank0
  9216     1FA7  1303               	bcf	3,6	;RP1=0, select bank0
  9217     1FA8  01A0               	clrf	LCD_String_xy@pos
  9218     1FA9  3049               	movlw	low (STR_2| (0+32768))
  9219     1FAA  00A1               	movwf	LCD_String_xy@msg
  9220     1FAB  3091               	movlw	high (STR_2| (0+32768))
  9221     1FAC  00A2               	movwf	LCD_String_xy@msg+1
  9222     1FAD  3000               	movlw	0
  9223     1FAE  160A  158A  27E3  160A  158A  	fcall	_LCD_String_xy
  9224                           
  9225                           ;main.c: 104: if (flag_2s) {
  9226     1FB3  0879               	movf	_flag_2s,w
  9227     1FB4  1903               	btfsc	3,2
  9228     1FB5  0008               	return
  9229                           
  9230                           ;main.c: 105: estado_actual = INIT;
  9231     1FB6  01FA               	clrf	_estado_actual
  9232     1FB7  0008               	return
  9233     1FB8                     __end_of_manejar_estado_alerta:
  9234                           
  9235                           	psect	text39
  9236     1FCD                     __ptext39:	
  9237 ;; *************** function _manejar_estado_alarma *****************
  9238 ;; Defined at:
  9239 ;;		line 94 in file "main.c"
  9240 ;; Parameters:    Size  Location     Type
  9241 ;;		None
  9242 ;; Auto vars:     Size  Location     Type
  9243 ;;		None
  9244 ;; Return value:  Size  Location     Type
  9245 ;;                  1    wreg      void 
  9246 ;; Registers used:
  9247 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  9248 ;; Tracked objects:
  9249 ;;		On entry : 0/0
  9250 ;;		On exit  : 300/0
  9251 ;;		Unchanged: 0/0
  9252 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9253 ;;      Params:         0       0       0       0       0
  9254 ;;      Locals:         0       0       0       0       0
  9255 ;;      Temps:          0       0       0       0       0
  9256 ;;      Totals:         0       0       0       0       0
  9257 ;;Total ram usage:        0 bytes
  9258 ;; Hardware stack levels used: 1
  9259 ;; Hardware stack levels required when called: 4
  9260 ;; This function calls:
  9261 ;;		_LCD_String_xy
  9262 ;;		_inicializar
  9263 ;; This function is called by:
  9264 ;;		_main
  9265 ;; This function uses a non-reentrant model
  9266 ;;
  9267                           
  9268     1FCD                     _manejar_estado_alarma:	
  9269                           ;psect for function _manejar_estado_alarma
  9270                           
  9271                           
  9272                           ;main.c: 95: LCD_String_xy(0, 0, "ALARMA");
  9273                           
  9274                           ;incstack = 0
  9275                           ; Regs used in _manejar_estado_alarma: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+csta
      +                          ck]
  9276     1FCD  1283               	bcf	3,5	;RP0=0, select bank0
  9277     1FCE  1303               	bcf	3,6	;RP1=0, select bank0
  9278     1FCF  01A0               	clrf	LCD_String_xy@pos
  9279     1FD0  3042               	movlw	low (STR_1| (0+32768))
  9280     1FD1  00A1               	movwf	LCD_String_xy@msg
  9281     1FD2  3091               	movlw	high (STR_1| (0+32768))
  9282     1FD3  00A2               	movwf	LCD_String_xy@msg+1
  9283     1FD4  3000               	movlw	0
  9284     1FD5  160A  158A  27E3  160A  158A  	fcall	_LCD_String_xy
  9285                           
  9286                           ;main.c: 96: if (flag_3s) {
  9287     1FDA  0878               	movf	_flag_3s,w
  9288     1FDB  1903               	btfsc	3,2
  9289     1FDC  0008               	return
  9290                           
  9291                           ;main.c: 97: estado_actual = MONITOREO_AMBIENTAL;
  9292     1FDD  3002               	movlw	2
  9293     1FDE  00FA               	movwf	_estado_actual
  9294                           
  9295                           ;main.c: 98: inicializar();
  9296     1FDF  120A  158A  2000   	fcall	_inicializar
  9297     1FE2  0008               	return
  9298     1FE3                     __end_of_manejar_estado_alarma:
  9299                           
  9300                           	psect	text40
  9301     0800                     __ptext40:	
  9302 ;; *************** function _inicializar *****************
  9303 ;; Defined at:
  9304 ;;		line 37 in file "main.c"
  9305 ;; Parameters:    Size  Location     Type
  9306 ;;		None
  9307 ;; Auto vars:     Size  Location     Type
  9308 ;;		None
  9309 ;; Return value:  Size  Location     Type
  9310 ;;                  1    wreg      void 
  9311 ;; Registers used:
  9312 ;;		status,2
  9313 ;; Tracked objects:
  9314 ;;		On entry : 0/0
  9315 ;;		On exit  : 300/0
  9316 ;;		Unchanged: 0/0
  9317 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9318 ;;      Params:         0       0       0       0       0
  9319 ;;      Locals:         0       0       0       0       0
  9320 ;;      Temps:          0       0       0       0       0
  9321 ;;      Totals:         0       0       0       0       0
  9322 ;;Total ram usage:        0 bytes
  9323 ;; Hardware stack levels used: 1
  9324 ;; Hardware stack levels required when called: 1
  9325 ;; This function calls:
  9326 ;;		Nothing
  9327 ;; This function is called by:
  9328 ;;		_manejar_estado_init
  9329 ;;		_manejar_estado_monitoreo_ambiental
  9330 ;;		_manejar_estado_monitoreo_eventos
  9331 ;;		_manejar_estado_alarma
  9332 ;; This function uses a non-reentrant model
  9333 ;;
  9334                           
  9335     0800                     _inicializar:	
  9336                           ;psect for function _inicializar
  9337                           
  9338                           
  9339                           ;main.c: 38: count_1000ms = 0;
  9340                           
  9341                           ;incstack = 0
  9342                           ; Regs used in _inicializar: [status,2]
  9343     0800  1683               	bsf	3,5	;RP0=1, select bank1
  9344     0801  1303               	bcf	3,6	;RP1=0, select bank1
  9345     0802  01B3               	clrf	_count_1000ms^(0+128)
  9346     0803  01B4               	clrf	(_count_1000ms+1)^(0+128)
  9347                           
  9348                           ;main.c: 39: count_2000ms = 0;
  9349     0804  01B1               	clrf	_count_2000ms^(0+128)
  9350     0805  01B2               	clrf	(_count_2000ms+1)^(0+128)
  9351                           
  9352                           ;main.c: 40: count_3000ms = 0;
  9353     0806  01AF               	clrf	_count_3000ms^(0+128)
  9354     0807  01B0               	clrf	(_count_3000ms+1)^(0+128)
  9355                           
  9356                           ;main.c: 41: flag_1s = 0;
  9357     0808  1283               	bcf	3,5	;RP0=0, select bank0
  9358     0809  01EB               	clrf	_flag_1s
  9359                           
  9360                           ;main.c: 42: flag_2s = 0;
  9361     080A  01F9               	clrf	_flag_2s
  9362                           
  9363                           ;main.c: 43: flag_3s = 0;
  9364     080B  01F8               	clrf	_flag_3s
  9365     080C  0008               	return
  9366     080D                     __end_of_inicializar:
  9367                           
  9368                           	psect	text41
  9369     1FE3                     __ptext41:	
  9370 ;; *************** function _LCD_String_xy *****************
  9371 ;; Defined at:
  9372 ;;		line 57 in file "LCD.c"
  9373 ;; Parameters:    Size  Location     Type
  9374 ;;  row             1    wreg     unsigned char 
  9375 ;;  pos             1    0[BANK0 ] unsigned char 
  9376 ;;  msg             2    1[BANK0 ] PTR const unsigned char 
  9377 ;;		 -> STR_15(15), STR_14(13), STR_13(13), STR_12(15), 
  9378 ;;		 -> STR_11(9), STR_9(7), STR_8(20), STR_7(18), 
  9379 ;;		 -> STR_6(17), STR_5(15), STR_4(12), STR_3(11), 
  9380 ;;		 -> STR_2(7), STR_1(7), 
  9381 ;; Auto vars:     Size  Location     Type
  9382 ;;  row             1    3[BANK0 ] unsigned char 
  9383 ;;  location        1    4[BANK0 ] unsigned char 
  9384 ;; Return value:  Size  Location     Type
  9385 ;;                  1    wreg      void 
  9386 ;; Registers used:
  9387 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  9388 ;; Tracked objects:
  9389 ;;		On entry : 300/0
  9390 ;;		On exit  : 300/0
  9391 ;;		Unchanged: 0/0
  9392 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9393 ;;      Params:         0       3       0       0       0
  9394 ;;      Locals:         0       2       0       0       0
  9395 ;;      Temps:          0       0       0       0       0
  9396 ;;      Totals:         0       5       0       0       0
  9397 ;;Total ram usage:        5 bytes
  9398 ;; Hardware stack levels used: 1
  9399 ;; Hardware stack levels required when called: 3
  9400 ;; This function calls:
  9401 ;;		_LCD_Command
  9402 ;;		_LCD_String
  9403 ;; This function is called by:
  9404 ;;		_manejar_estado_alarma
  9405 ;;		_manejar_estado_alerta
  9406 ;;		_funcion_seguridad
  9407 ;;		_sistema_bloqueado
  9408 ;;		_ambiental
  9409 ;;		_puertas
  9410 ;; This function uses a non-reentrant model
  9411 ;;
  9412                           
  9413     1FE3                     _LCD_String_xy:	
  9414                           ;psect for function _LCD_String_xy
  9415                           
  9416                           
  9417                           ;incstack = 0
  9418                           ; Regs used in _LCD_String_xy: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  9419                           ;LCD_String_xy@row stored from wreg
  9420     1FE3  00A3               	movwf	LCD_String_xy@row
  9421                           
  9422                           ;LCD.c: 60: if(row<=1)
  9423     1FE4  3002               	movlw	2
  9424     1FE5  0223               	subwf	LCD_String_xy@row,w
  9425     1FE6  1803               	skipnc
  9426     1FE7  2FEC               	goto	l4618
  9427                           
  9428                           ;LCD.c: 61: {;LCD.c: 62: location=(0x80) | ((pos) & 0x0f);
  9429     1FE8  0820               	movf	LCD_String_xy@pos,w
  9430     1FE9  390F               	andlw	15
  9431     1FEA  3880               	iorlw	128
  9432     1FEB  2FEF               	goto	L11
  9433     1FEC                     l4618:	
  9434                           ;LCD.c: 64: }
  9435                           
  9436                           ;LCD.c: 63: LCD_Command(location);
  9437                           
  9438                           
  9439                           ;LCD.c: 65: else;LCD.c: 66: {;LCD.c: 67: location=(0xC0) | ((pos) & 0x0f);
  9440     1FEC  0820               	movf	LCD_String_xy@pos,w
  9441     1FED  390F               	andlw	15
  9442     1FEE  38C0               	iorlw	192
  9443     1FEF                     L11:
  9444     1FEF  00A4               	movwf	LCD_String_xy@location
  9445                           
  9446                           ;LCD.c: 68: LCD_Command(location);
  9447     1FF0  0824               	movf	LCD_String_xy@location,w
  9448     1FF1  160A  118A  2302  160A  158A  	fcall	_LCD_Command
  9449                           
  9450                           ;LCD.c: 69: };LCD.c: 72: LCD_String(msg);
  9451     1FF6  1283               	bcf	3,5	;RP0=0, select bank0
  9452     1FF7  1303               	bcf	3,6	;RP1=0, select bank0
  9453     1FF8  0821               	movf	LCD_String_xy@msg,w
  9454     1FF9  00F6               	movwf	LCD_String@msg
  9455     1FFA  0822               	movf	LCD_String_xy@msg+1,w
  9456     1FFB  00F7               	movwf	LCD_String@msg+1
  9457     1FFC  160A  118A  2200   	fcall	_LCD_String
  9458     1FFF  0008               	return
  9459     2000                     __end_of_LCD_String_xy:
  9460                           
  9461                           	psect	text42
  9462     1200                     __ptext42:	
  9463 ;; *************** function _LCD_String *****************
  9464 ;; Defined at:
  9465 ;;		line 48 in file "LCD.c"
  9466 ;; Parameters:    Size  Location     Type
  9467 ;;  msg             2    6[COMMON] PTR const unsigned char 
  9468 ;;		 -> STR_15(15), STR_14(13), STR_13(13), STR_12(15), 
  9469 ;;		 -> STR_11(9), StringTemperature(16), STR_9(7), STR_8(20), 
  9470 ;;		 -> STR_7(18), STR_6(17), STR_5(15), STR_4(12), 
  9471 ;;		 -> STR_3(11), STR_2(7), STR_1(7), 
  9472 ;; Auto vars:     Size  Location     Type
  9473 ;;		None
  9474 ;; Return value:  Size  Location     Type
  9475 ;;                  1    wreg      void 
  9476 ;; Registers used:
  9477 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  9478 ;; Tracked objects:
  9479 ;;		On entry : 300/0
  9480 ;;		On exit  : 300/0
  9481 ;;		Unchanged: 0/0
  9482 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9483 ;;      Params:         2       0       0       0       0
  9484 ;;      Locals:         0       0       0       0       0
  9485 ;;      Temps:          0       0       0       0       0
  9486 ;;      Totals:         2       0       0       0       0
  9487 ;;Total ram usage:        2 bytes
  9488 ;; Hardware stack levels used: 1
  9489 ;; Hardware stack levels required when called: 2
  9490 ;; This function calls:
  9491 ;;		_LCD_Char
  9492 ;; This function is called by:
  9493 ;;		_LCD_String_xy
  9494 ;;		_ambiental
  9495 ;; This function uses a non-reentrant model
  9496 ;;
  9497                           
  9498     1200                     _LCD_String:	
  9499                           ;psect for function _LCD_String
  9500                           
  9501     1200                     l4244:	
  9502                           ;LCD.c: 50: while((*msg)!=0)
  9503                           
  9504                           ;incstack = 0
  9505                           ; Regs used in _LCD_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  9506                           
  9507     1200  0877               	movf	LCD_String@msg+1,w
  9508     1201  1283               	bcf	3,5	;RP0=0, select bank0
  9509     1202  1303               	bcf	3,6	;RP1=0, select bank0
  9510     1203  00FF               	movwf	127
  9511     1204  0876               	movf	LCD_String@msg,w
  9512     1205  0084               	movwf	4
  9513     1206  160A  118A  2000  160A  118A  	fcall	stringtab
  9514     120B  3A00               	xorlw	0
  9515     120C  1903               	btfsc	3,2
  9516     120D  0008               	return
  9517                           
  9518                           ;LCD.c: 51: {;LCD.c: 52: LCD_Char(*msg);
  9519     120E  0877               	movf	LCD_String@msg+1,w
  9520     120F  00FF               	movwf	127
  9521     1210  0876               	movf	LCD_String@msg,w
  9522     1211  0084               	movwf	4
  9523     1212  160A  118A  2000  160A  118A  	fcall	stringtab
  9524     1217  160A  118A  2299  160A  118A  	fcall	_LCD_Char
  9525                           
  9526                           ;LCD.c: 53: msg++;
  9527     121C  3001               	movlw	1
  9528     121D  07F6               	addwf	LCD_String@msg,f
  9529     121E  1803               	skipnc
  9530     121F  0AF7               	incf	LCD_String@msg+1,f
  9531     1220  3000               	movlw	0
  9532     1221  07F7               	addwf	LCD_String@msg+1,f
  9533     1222  2A00               	goto	l4244
  9534     1223                     __end_of_LCD_String:
  9535                           
  9536                           	psect	text43
  9537     1299                     __ptext43:	
  9538 ;; *************** function _LCD_Char *****************
  9539 ;; Defined at:
  9540 ;;		line 33 in file "LCD.c"
  9541 ;; Parameters:    Size  Location     Type
  9542 ;;  dat             1    wreg     unsigned char 
  9543 ;; Auto vars:     Size  Location     Type
  9544 ;;  dat             1    5[COMMON] unsigned char 
  9545 ;; Return value:  Size  Location     Type
  9546 ;;                  1    wreg      void 
  9547 ;; Registers used:
  9548 ;;		wreg, status,2, status,0
  9549 ;; Tracked objects:
  9550 ;;		On entry : 300/0
  9551 ;;		On exit  : 0/0
  9552 ;;		Unchanged: 0/0
  9553 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9554 ;;      Params:         0       0       0       0       0
  9555 ;;      Locals:         1       0       0       0       0
  9556 ;;      Temps:          2       0       0       0       0
  9557 ;;      Totals:         3       0       0       0       0
  9558 ;;Total ram usage:        3 bytes
  9559 ;; Hardware stack levels used: 1
  9560 ;; Hardware stack levels required when called: 1
  9561 ;; This function calls:
  9562 ;;		Nothing
  9563 ;; This function is called by:
  9564 ;;		_LCD_String
  9565 ;;		_funcion_seguridad
  9566 ;; This function uses a non-reentrant model
  9567 ;;
  9568                           
  9569     1299                     _LCD_Char:	
  9570                           ;psect for function _LCD_Char
  9571                           
  9572                           
  9573                           ;incstack = 0
  9574                           ; Regs used in _LCD_Char: [wreg+status,2+status,0]
  9575                           ;LCD_Char@dat stored from wreg
  9576     1299  00F5               	movwf	LCD_Char@dat
  9577                           
  9578                           ;LCD.c: 35: PORTC = (PORTC & 0x0f) | (0xF0 & dat);
  9579     129A  30F0               	movlw	240
  9580     129B  0575               	andwf	LCD_Char@dat,w
  9581     129C  00F3               	movwf	??_LCD_Char
  9582     129D  0807               	movf	7,w	;volatile
  9583     129E  390F               	andlw	15
  9584     129F  0473               	iorwf	??_LCD_Char,w
  9585     12A0  0087               	movwf	7	;volatile
  9586                           
  9587                           ;LCD.c: 36: PORTCbits.RC0 = 1;
  9588     12A1  1407               	bsf	7,0	;volatile
  9589                           
  9590                           ;LCD.c: 37: PORTCbits.RC1 = 1;
  9591     12A2  1487               	bsf	7,1	;volatile
  9592                           
  9593                           ;LCD.c: 38: __nop();
  9594     12A3  0000               	nop
  9595                           
  9596                           ;LCD.c: 39: PORTCbits.RC1 = 0;
  9597     12A4  1283               	bcf	3,5	;RP0=0, select bank0
  9598     12A5  1303               	bcf	3,6	;RP1=0, select bank0
  9599     12A6  1087               	bcf	7,1	;volatile
  9600                           
  9601                           ;LCD.c: 40: _delay((unsigned long)((1)*(8000000/4000.0)));
  9602     12A7  3003               	movlw	3
  9603     12A8  00F4               	movwf	??_LCD_Char+1
  9604     12A9  3097               	movlw	151
  9605     12AA  00F3               	movwf	??_LCD_Char
  9606     12AB                     u7327:
  9607     12AB  0BF3               	decfsz	??_LCD_Char,f
  9608     12AC  2AAB               	goto	u7327
  9609     12AD  0BF4               	decfsz	??_LCD_Char+1,f
  9610     12AE  2AAB               	goto	u7327
  9611     12AF  2AB0               	nop2
  9612                           
  9613                           ;LCD.c: 41: PORTC = (unsigned char)((PORTC & 0x0f) | (dat<<4));
  9614     12B0  0875               	movf	LCD_Char@dat,w
  9615     12B1  00F3               	movwf	??_LCD_Char
  9616     12B2  3004               	movlw	4
  9617     12B3                     u5095:
  9618     12B3  1003               	clrc
  9619     12B4  0DF3               	rlf	??_LCD_Char,f
  9620     12B5  3EFF               	addlw	-1
  9621     12B6  1D03               	skipz
  9622     12B7  2AB3               	goto	u5095
  9623     12B8  1283               	bcf	3,5	;RP0=0, select bank0
  9624     12B9  1303               	bcf	3,6	;RP1=0, select bank0
  9625     12BA  0807               	movf	7,w	;volatile
  9626     12BB  390F               	andlw	15
  9627     12BC  0473               	iorwf	??_LCD_Char,w
  9628     12BD  0087               	movwf	7	;volatile
  9629                           
  9630                           ;LCD.c: 42: PORTCbits.RC1 = 1;
  9631     12BE  1487               	bsf	7,1	;volatile
  9632                           
  9633                           ;LCD.c: 43: __nop();
  9634     12BF  0000               	nop
  9635                           
  9636                           ;LCD.c: 44: PORTCbits.RC1 = 0;
  9637     12C0  1283               	bcf	3,5	;RP0=0, select bank0
  9638     12C1  1303               	bcf	3,6	;RP1=0, select bank0
  9639     12C2  1087               	bcf	7,1	;volatile
  9640                           
  9641                           ;LCD.c: 45: _delay((unsigned long)((3)*(8000000/4000.0)));
  9642     12C3  3008               	movlw	8
  9643     12C4  00F4               	movwf	??_LCD_Char+1
  9644     12C5  30C9               	movlw	201
  9645     12C6  00F3               	movwf	??_LCD_Char
  9646     12C7                     u7337:
  9647     12C7  0BF3               	decfsz	??_LCD_Char,f
  9648     12C8  2AC7               	goto	u7337
  9649     12C9  0BF4               	decfsz	??_LCD_Char+1,f
  9650     12CA  2AC7               	goto	u7337
  9651     12CB  2ACC               	nop2
  9652     12CC  0008               	return
  9653     12CD                     __end_of_LCD_Char:
  9654                           
  9655                           	psect	text44
  9656     1F4A                     __ptext44:	
  9657 ;; *************** function _inicializar_sistema *****************
  9658 ;; Defined at:
  9659 ;;		line 46 in file "main.c"
  9660 ;; Parameters:    Size  Location     Type
  9661 ;;		None
  9662 ;; Auto vars:     Size  Location     Type
  9663 ;;		None
  9664 ;; Return value:  Size  Location     Type
  9665 ;;                  1    wreg      void 
  9666 ;; Registers used:
  9667 ;;		wreg, status,2, status,0, pclath, cstack
  9668 ;; Tracked objects:
  9669 ;;		On entry : B00/0
  9670 ;;		On exit  : 300/100
  9671 ;;		Unchanged: 0/0
  9672 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9673 ;;      Params:         0       0       0       0       0
  9674 ;;      Locals:         0       0       0       0       0
  9675 ;;      Temps:          0       0       0       0       0
  9676 ;;      Totals:         0       0       0       0       0
  9677 ;;Total ram usage:        0 bytes
  9678 ;; Hardware stack levels used: 1
  9679 ;; Hardware stack levels required when called: 3
  9680 ;; This function calls:
  9681 ;;		_LCD_Init
  9682 ;;		_adc_int
  9683 ;;		_keypad_init
  9684 ;; This function is called by:
  9685 ;;		_main
  9686 ;; This function uses a non-reentrant model
  9687 ;;
  9688                           
  9689     1F4A                     _inicializar_sistema:	
  9690                           ;psect for function _inicializar_sistema
  9691                           
  9692                           
  9693                           ;main.c: 47: LCD_Init();
  9694                           
  9695                           ;incstack = 0
  9696                           ; Regs used in _inicializar_sistema: [wreg+status,2+status,0+pclath+cstack]
  9697     1F4A  120A  118A  27D9  160A  158A  	fcall	_LCD_Init
  9698                           
  9699                           ;main.c: 48: keypad_init();
  9700     1F4F  160A  158A  2704  160A  158A  	fcall	_keypad_init
  9701                           
  9702                           ;main.c: 49: adc_int();
  9703     1F54  160A  158A  273D   	fcall	_adc_int
  9704     1F57  0008               	return
  9705     1F58                     __end_of_inicializar_sistema:
  9706                           
  9707                           	psect	text45
  9708     1F04                     __ptext45:	
  9709 ;; *************** function _keypad_init *****************
  9710 ;; Defined at:
  9711 ;;		line 38 in file "keypad.c"
  9712 ;; Parameters:    Size  Location     Type
  9713 ;;		None
  9714 ;; Auto vars:     Size  Location     Type
  9715 ;;		None
  9716 ;; Return value:  Size  Location     Type
  9717 ;;                  1    wreg      void 
  9718 ;; Registers used:
  9719 ;;		wreg, status,2, status,0
  9720 ;; Tracked objects:
  9721 ;;		On entry : 0/0
  9722 ;;		On exit  : 300/100
  9723 ;;		Unchanged: 0/0
  9724 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9725 ;;      Params:         0       0       0       0       0
  9726 ;;      Locals:         0       0       0       0       0
  9727 ;;      Temps:          0       0       0       0       0
  9728 ;;      Totals:         0       0       0       0       0
  9729 ;;Total ram usage:        0 bytes
  9730 ;; Hardware stack levels used: 1
  9731 ;; Hardware stack levels required when called: 1
  9732 ;; This function calls:
  9733 ;;		Nothing
  9734 ;; This function is called by:
  9735 ;;		_inicializar_sistema
  9736 ;;		_funcion_seguridad
  9737 ;; This function uses a non-reentrant model
  9738 ;;
  9739                           
  9740     1F04                     _keypad_init:	
  9741                           ;psect for function _keypad_init
  9742                           
  9743                           
  9744                           ;keypad.c: 40: TRISB &= ~(1<<0) & ~(1<<1) & ~(1<<2) & ~(1<<3);
  9745                           
  9746                           ;incstack = 0
  9747                           ; Regs used in _keypad_init: [wreg+status,2+status,0]
  9748     1F04  30F0               	movlw	240
  9749     1F05  1683               	bsf	3,5	;RP0=1, select bank1
  9750     1F06  1303               	bcf	3,6	;RP1=0, select bank1
  9751     1F07  0586               	andwf	6,f	;volatile
  9752                           
  9753                           ;keypad.c: 41: TRISB |= (1<<4) | (1<<5) | (1<<6) | (1<<7);
  9754     1F08  30F0               	movlw	240
  9755     1F09  0486               	iorwf	6,f	;volatile
  9756                           
  9757                           ;keypad.c: 42: OPTION_REGbits.nRBPU = 0;
  9758     1F0A  1381               	bcf	1,7	;volatile
  9759     1F0B  0008               	return
  9760     1F0C                     __end_of_keypad_init:
  9761                           
  9762                           	psect	text46
  9763     1F3D                     __ptext46:	
  9764 ;; *************** function _adc_int *****************
  9765 ;; Defined at:
  9766 ;;		line 7 in file "adc.c"
  9767 ;; Parameters:    Size  Location     Type
  9768 ;;		None
  9769 ;; Auto vars:     Size  Location     Type
  9770 ;;		None
  9771 ;; Return value:  Size  Location     Type
  9772 ;;                  1    wreg      void 
  9773 ;; Registers used:
  9774 ;;		wreg, status,2, status,0
  9775 ;; Tracked objects:
  9776 ;;		On entry : 100/300
  9777 ;;		On exit  : 300/100
  9778 ;;		Unchanged: 0/0
  9779 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9780 ;;      Params:         0       0       0       0       0
  9781 ;;      Locals:         0       0       0       0       0
  9782 ;;      Temps:          0       0       0       0       0
  9783 ;;      Totals:         0       0       0       0       0
  9784 ;;Total ram usage:        0 bytes
  9785 ;; Hardware stack levels used: 1
  9786 ;; Hardware stack levels required when called: 1
  9787 ;; This function calls:
  9788 ;;		Nothing
  9789 ;; This function is called by:
  9790 ;;		_inicializar_sistema
  9791 ;;		_ambiental
  9792 ;; This function uses a non-reentrant model
  9793 ;;
  9794                           
  9795     1F3D                     _adc_int:	
  9796                           ;psect for function _adc_int
  9797                           
  9798                           
  9799                           ;adc.c: 8: ADCON1bits.ADFM = 1;
  9800                           
  9801                           ;incstack = 0
  9802                           ; Regs used in _adc_int: [wreg+status,2+status,0]
  9803     1F3D  1303               	bcf	3,6	;RP1=0, select bank1
  9804     1F3E  179F               	bsf	31,7	;volatile
  9805                           
  9806                           ;adc.c: 9: ADCON1bits.VCFG0 = 0;
  9807     1F3F  121F               	bcf	31,4	;volatile
  9808                           
  9809                           ;adc.c: 10: ADCON1bits.VCFG1 = 0;
  9810     1F40  129F               	bcf	31,5	;volatile
  9811                           
  9812                           ;adc.c: 11: ADCON0bits.ADCS = 0b01;
  9813     1F41  1283               	bcf	3,5	;RP0=0, select bank0
  9814     1F42  081F               	movf	31,w	;volatile
  9815     1F43  393F               	andlw	-193
  9816     1F44  3840               	iorlw	64
  9817     1F45  009F               	movwf	31	;volatile
  9818                           
  9819                           ;adc.c: 12: ADRESH=0;
  9820     1F46  019E               	clrf	30	;volatile
  9821                           
  9822                           ;adc.c: 13: ADRESL=0;
  9823     1F47  1683               	bsf	3,5	;RP0=1, select bank1
  9824     1F48  019E               	clrf	30	;volatile
  9825     1F49  0008               	return
  9826     1F4A                     __end_of_adc_int:
  9827                           
  9828                           	psect	text47
  9829     07D9                     __ptext47:	
  9830 ;; *************** function _LCD_Init *****************
  9831 ;; Defined at:
  9832 ;;		line 7 in file "LCD.c"
  9833 ;; Parameters:    Size  Location     Type
  9834 ;;		None
  9835 ;; Auto vars:     Size  Location     Type
  9836 ;;		None
  9837 ;; Return value:  Size  Location     Type
  9838 ;;                  1    wreg      void 
  9839 ;; Registers used:
  9840 ;;		wreg, status,2, status,0, pclath, cstack
  9841 ;; Tracked objects:
  9842 ;;		On entry : 200/100
  9843 ;;		On exit  : 0/0
  9844 ;;		Unchanged: 0/0
  9845 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9846 ;;      Params:         0       0       0       0       0
  9847 ;;      Locals:         0       0       0       0       0
  9848 ;;      Temps:          2       0       0       0       0
  9849 ;;      Totals:         2       0       0       0       0
  9850 ;;Total ram usage:        2 bytes
  9851 ;; Hardware stack levels used: 1
  9852 ;; Hardware stack levels required when called: 2
  9853 ;; This function calls:
  9854 ;;		_LCD_Command
  9855 ;; This function is called by:
  9856 ;;		_inicializar_sistema
  9857 ;;		_funcion_seguridad
  9858 ;;		_ambiental
  9859 ;; This function uses a non-reentrant model
  9860 ;;
  9861                           
  9862     07D9                     _LCD_Init:	
  9863                           ;psect for function _LCD_Init
  9864                           
  9865                           
  9866                           ;LCD.c: 9: TRISC = 0;
  9867                           
  9868                           ;incstack = 0
  9869                           ; Regs used in _LCD_Init: [wreg+status,2+status,0+pclath+cstack]
  9870     07D9  1683               	bsf	3,5	;RP0=1, select bank1
  9871     07DA  0187               	clrf	7	;volatile
  9872                           
  9873                           ;LCD.c: 10: _delay((unsigned long)((15)*(8000000/4000.0)));
  9874     07DB  3027               	movlw	39
  9875     07DC  00F7               	movwf	??_LCD_Init+1
  9876     07DD  30F5               	movlw	245
  9877     07DE  00F6               	movwf	??_LCD_Init
  9878     07DF                     u7347:
  9879     07DF  0BF6               	decfsz	??_LCD_Init,f
  9880     07E0  2FDF               	goto	u7347
  9881     07E1  0BF7               	decfsz	??_LCD_Init+1,f
  9882     07E2  2FDF               	goto	u7347
  9883                           
  9884                           ;LCD.c: 11: LCD_Command(0x02);
  9885     07E3  3002               	movlw	2
  9886     07E4  160A  118A  2302  120A  118A  	fcall	_LCD_Command
  9887                           
  9888                           ;LCD.c: 12: LCD_Command(0x28);
  9889     07E9  3028               	movlw	40
  9890     07EA  160A  118A  2302  120A  118A  	fcall	_LCD_Command
  9891                           
  9892                           ;LCD.c: 13: LCD_Command(0x01);
  9893     07EF  3001               	movlw	1
  9894     07F0  160A  118A  2302  120A  118A  	fcall	_LCD_Command
  9895                           
  9896                           ;LCD.c: 14: LCD_Command(0x0c);
  9897     07F5  300C               	movlw	12
  9898     07F6  160A  118A  2302  120A  118A  	fcall	_LCD_Command
  9899                           
  9900                           ;LCD.c: 15: LCD_Command(0x06);
  9901     07FB  3006               	movlw	6
  9902     07FC  160A  118A  2302   	fcall	_LCD_Command
  9903     07FF  0008               	return
  9904     0800                     __end_of_LCD_Init:
  9905                           
  9906                           	psect	text48
  9907     1302                     __ptext48:	
  9908 ;; *************** function _LCD_Command *****************
  9909 ;; Defined at:
  9910 ;;		line 18 in file "LCD.c"
  9911 ;; Parameters:    Size  Location     Type
  9912 ;;  cmd             1    wreg     unsigned char 
  9913 ;; Auto vars:     Size  Location     Type
  9914 ;;  cmd             1    5[COMMON] unsigned char 
  9915 ;; Return value:  Size  Location     Type
  9916 ;;                  1    wreg      void 
  9917 ;; Registers used:
  9918 ;;		wreg, status,2, status,0
  9919 ;; Tracked objects:
  9920 ;;		On entry : 0/0
  9921 ;;		On exit  : 0/0
  9922 ;;		Unchanged: 0/0
  9923 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9924 ;;      Params:         0       0       0       0       0
  9925 ;;      Locals:         1       0       0       0       0
  9926 ;;      Temps:          2       0       0       0       0
  9927 ;;      Totals:         3       0       0       0       0
  9928 ;;Total ram usage:        3 bytes
  9929 ;; Hardware stack levels used: 1
  9930 ;; Hardware stack levels required when called: 1
  9931 ;; This function calls:
  9932 ;;		Nothing
  9933 ;; This function is called by:
  9934 ;;		_LCD_Init
  9935 ;;		_LCD_String_xy
  9936 ;;		_LCD_Clear
  9937 ;;		_funcion_seguridad
  9938 ;;		_ambiental
  9939 ;; This function uses a non-reentrant model
  9940 ;;
  9941                           
  9942     1302                     _LCD_Command:	
  9943                           ;psect for function _LCD_Command
  9944                           
  9945                           
  9946                           ;incstack = 0
  9947                           ; Regs used in _LCD_Command: [wreg+status,2+status,0]
  9948                           ;LCD_Command@cmd stored from wreg
  9949     1302  00F5               	movwf	LCD_Command@cmd
  9950                           
  9951                           ;LCD.c: 20: PORTC = (PORTC & 0x0f) |(0xF0 & cmd);
  9952     1303  30F0               	movlw	240
  9953     1304  0575               	andwf	LCD_Command@cmd,w
  9954     1305  00F3               	movwf	??_LCD_Command
  9955     1306  1283               	bcf	3,5	;RP0=0, select bank0
  9956     1307  1303               	bcf	3,6	;RP1=0, select bank0
  9957     1308  0807               	movf	7,w	;volatile
  9958     1309  390F               	andlw	15
  9959     130A  0473               	iorwf	??_LCD_Command,w
  9960     130B  0087               	movwf	7	;volatile
  9961                           
  9962                           ;LCD.c: 21: PORTCbits.RC0 = 0;
  9963     130C  1007               	bcf	7,0	;volatile
  9964                           
  9965                           ;LCD.c: 22: PORTCbits.RC1 = 1;
  9966     130D  1487               	bsf	7,1	;volatile
  9967                           
  9968                           ;LCD.c: 23: __nop();
  9969     130E  0000               	nop
  9970                           
  9971                           ;LCD.c: 24: PORTCbits.RC1 = 0;
  9972     130F  1283               	bcf	3,5	;RP0=0, select bank0
  9973     1310  1303               	bcf	3,6	;RP1=0, select bank0
  9974     1311  1087               	bcf	7,1	;volatile
  9975                           
  9976                           ;LCD.c: 25: _delay((unsigned long)((1)*(8000000/4000.0)));
  9977     1312  3003               	movlw	3
  9978     1313  00F4               	movwf	??_LCD_Command+1
  9979     1314  3097               	movlw	151
  9980     1315  00F3               	movwf	??_LCD_Command
  9981     1316                     u7357:
  9982     1316  0BF3               	decfsz	??_LCD_Command,f
  9983     1317  2B16               	goto	u7357
  9984     1318  0BF4               	decfsz	??_LCD_Command+1,f
  9985     1319  2B16               	goto	u7357
  9986     131A  2B1B               	nop2
  9987                           
  9988                           ;LCD.c: 26: PORTC = (unsigned char)((PORTC & 0x0f) | (cmd<<4));
  9989     131B  0875               	movf	LCD_Command@cmd,w
  9990     131C  00F3               	movwf	??_LCD_Command
  9991     131D  3004               	movlw	4
  9992     131E                     u5745:
  9993     131E  1003               	clrc
  9994     131F  0DF3               	rlf	??_LCD_Command,f
  9995     1320  3EFF               	addlw	-1
  9996     1321  1D03               	skipz
  9997     1322  2B1E               	goto	u5745
  9998     1323  1283               	bcf	3,5	;RP0=0, select bank0
  9999     1324  1303               	bcf	3,6	;RP1=0, select bank0
 10000     1325  0807               	movf	7,w	;volatile
 10001     1326  390F               	andlw	15
 10002     1327  0473               	iorwf	??_LCD_Command,w
 10003     1328  0087               	movwf	7	;volatile
 10004                           
 10005                           ;LCD.c: 27: PORTCbits.RC1 = 1;
 10006     1329  1487               	bsf	7,1	;volatile
 10007                           
 10008                           ;LCD.c: 28: __nop();
 10009     132A  0000               	nop
 10010                           
 10011                           ;LCD.c: 29: PORTCbits.RC1 = 0;
 10012     132B  1283               	bcf	3,5	;RP0=0, select bank0
 10013     132C  1303               	bcf	3,6	;RP1=0, select bank0
 10014     132D  1087               	bcf	7,1	;volatile
 10015                           
 10016                           ;LCD.c: 30: _delay((unsigned long)((3)*(8000000/4000.0)));
 10017     132E  3008               	movlw	8
 10018     132F  00F4               	movwf	??_LCD_Command+1
 10019     1330  30C9               	movlw	201
 10020     1331  00F3               	movwf	??_LCD_Command
 10021     1332                     u7367:
 10022     1332  0BF3               	decfsz	??_LCD_Command,f
 10023     1333  2B32               	goto	u7367
 10024     1334  0BF4               	decfsz	??_LCD_Command+1,f
 10025     1335  2B32               	goto	u7367
 10026     1336  2B37               	nop2
 10027     1337  0008               	return
 10028     1338                     __end_of_LCD_Command:
 10029                           
 10030                           	psect	text49
 10031     1F31                     __ptext49:	
 10032 ;; *************** function _Timer1_start *****************
 10033 ;; Defined at:
 10034 ;;		line 165 in file "main.c"
 10035 ;; Parameters:    Size  Location     Type
 10036 ;;		None
 10037 ;; Auto vars:     Size  Location     Type
 10038 ;;		None
 10039 ;; Return value:  Size  Location     Type
 10040 ;;                  1    wreg      void 
 10041 ;; Registers used:
 10042 ;;		status,2
 10043 ;; Tracked objects:
 10044 ;;		On entry : 300/100
 10045 ;;		On exit  : 300/0
 10046 ;;		Unchanged: 0/0
 10047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10048 ;;      Params:         0       0       0       0       0
 10049 ;;      Locals:         0       0       0       0       0
 10050 ;;      Temps:          0       0       0       0       0
 10051 ;;      Totals:         0       0       0       0       0
 10052 ;;Total ram usage:        0 bytes
 10053 ;; Hardware stack levels used: 1
 10054 ;; Hardware stack levels required when called: 1
 10055 ;; This function calls:
 10056 ;;		Nothing
 10057 ;; This function is called by:
 10058 ;;		_main
 10059 ;; This function uses a non-reentrant model
 10060 ;;
 10061                           
 10062     1F31                     _Timer1_start:	
 10063                           ;psect for function _Timer1_start
 10064                           
 10065                           
 10066                           ;main.c: 166: GIE = 1;
 10067                           
 10068                           ;incstack = 0
 10069                           ; Regs used in _Timer1_start: [status,2]
 10070     1F31  178B               	bsf	11,7	;volatile
 10071                           
 10072                           ;main.c: 167: PEIE = 1;
 10073     1F32  170B               	bsf	11,6	;volatile
 10074                           
 10075                           ;main.c: 168: TMR1IE = 1;
 10076     1F33  140C               	bsf	12,0	;volatile
 10077                           
 10078                           ;main.c: 169: TMR1IF = 0;
 10079     1F34  1283               	bcf	3,5	;RP0=0, select bank0
 10080     1F35  100C               	bcf	12,0	;volatile
 10081                           
 10082                           ;main.c: 170: T1CON = 0x00;
 10083     1F36  0190               	clrf	16	;volatile
 10084                           
 10085                           ;main.c: 171: TMR1 = 0xFC16;
 10086     1F37  30FC               	movlw	252
 10087     1F38  008F               	movwf	15	;volatile
 10088     1F39  3016               	movlw	22
 10089     1F3A  008E               	movwf	14	;volatile
 10090                           
 10091                           ;main.c: 172: TMR1ON = 1;
 10092     1F3B  1410               	bsf	16,0	;volatile
 10093     1F3C  0008               	return
 10094     1F3D                     __end_of_Timer1_start:
 10095                           
 10096                           	psect	text50
 10097     158C                     __ptext50:	
 10098 ;; *************** function _Timer1_ISR *****************
 10099 ;; Defined at:
 10100 ;;		line 141 in file "main.c"
 10101 ;; Parameters:    Size  Location     Type
 10102 ;;		None
 10103 ;; Auto vars:     Size  Location     Type
 10104 ;;		None
 10105 ;; Return value:  Size  Location     Type
 10106 ;;                  1    wreg      void 
 10107 ;; Registers used:
 10108 ;;		wreg, status,2, btemp+1
 10109 ;; Tracked objects:
 10110 ;;		On entry : 0/0
 10111 ;;		On exit  : 300/0
 10112 ;;		Unchanged: 0/0
 10113 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10114 ;;      Params:         0       0       0       0       0
 10115 ;;      Locals:         0       0       0       0       0
 10116 ;;      Temps:          3       0       0       0       0
 10117 ;;      Totals:         3       0       0       0       0
 10118 ;;Total ram usage:        3 bytes
 10119 ;; Hardware stack levels used: 1
 10120 ;; This function calls:
 10121 ;;		Nothing
 10122 ;; This function is called by:
 10123 ;;		Interrupt level 1
 10124 ;; This function uses a non-reentrant model
 10125 ;;
 10126                           
 10127     158C                     _Timer1_ISR:	
 10128                           ;psect for function _Timer1_ISR
 10129                           
 10130                           
 10131                           ;main.c: 142: TMR1 = 0xFC16;
 10132     158C  30FC               	movlw	252
 10133     158D  1283               	bcf	3,5	;RP0=0, select bank0
 10134     158E  1303               	bcf	3,6	;RP1=0, select bank0
 10135     158F  008F               	movwf	15	;volatile
 10136     1590  3016               	movlw	22
 10137     1591  008E               	movwf	14	;volatile
 10138                           
 10139                           ;main.c: 145: count_1000ms++;
 10140     1592  3001               	movlw	1
 10141     1593  1683               	bsf	3,5	;RP0=1, select bank1
 10142     1594  07B3               	addwf	_count_1000ms^(0+128),f
 10143     1595  1803               	skipnc
 10144     1596  0AB4               	incf	(_count_1000ms+1)^(0+128),f
 10145     1597  3000               	movlw	0
 10146     1598  07B4               	addwf	(_count_1000ms+1)^(0+128),f
 10147                           
 10148                           ;main.c: 146: count_2000ms++;
 10149     1599  3001               	movlw	1
 10150     159A  07B1               	addwf	_count_2000ms^(0+128),f
 10151     159B  1803               	skipnc
 10152     159C  0AB2               	incf	(_count_2000ms+1)^(0+128),f
 10153     159D  3000               	movlw	0
 10154     159E  07B2               	addwf	(_count_2000ms+1)^(0+128),f
 10155                           
 10156                           ;main.c: 147: count_3000ms++;
 10157     159F  3001               	movlw	1
 10158     15A0  07AF               	addwf	_count_3000ms^(0+128),f
 10159     15A1  1803               	skipnc
 10160     15A2  0AB0               	incf	(_count_3000ms+1)^(0+128),f
 10161     15A3  3000               	movlw	0
 10162     15A4  07B0               	addwf	(_count_3000ms+1)^(0+128),f
 10163                           
 10164                           ;main.c: 149: if (count_1000ms >= 1000) {
 10165     15A5  0834               	movf	(_count_1000ms+1)^(0+128),w
 10166     15A6  3A80               	xorlw	128
 10167     15A7  00FF               	movwf	127
 10168     15A8  3083               	movlw	131
 10169     15A9  027F               	subwf	127,w
 10170     15AA  1D03               	skipz
 10171     15AB  2DAE               	goto	u494_25
 10172     15AC  30E8               	movlw	232
 10173     15AD  0233               	subwf	_count_1000ms^(0+128),w
 10174     15AE                     u494_25:
 10175     15AE  1C03               	skipc
 10176     15AF  2DB7               	goto	i1l3892
 10177                           
 10178                           ;main.c: 150: count_1000ms = 0;
 10179     15B0  1683               	bsf	3,5	;RP0=1, select bank1
 10180     15B1  1303               	bcf	3,6	;RP1=0, select bank1
 10181     15B2  01B3               	clrf	_count_1000ms^(0+128)
 10182     15B3  01B4               	clrf	(_count_1000ms+1)^(0+128)
 10183                           
 10184                           ;main.c: 151: flag_1s = 1;
 10185     15B4  3001               	movlw	1
 10186     15B5  1283               	bcf	3,5	;RP0=0, select bank0
 10187     15B6  00EB               	movwf	_flag_1s
 10188     15B7                     i1l3892:
 10189                           
 10190                           ;main.c: 152: };main.c: 153: if (count_2000ms >= 2000) {
 10191     15B7  1683               	bsf	3,5	;RP0=1, select bank1
 10192     15B8  1303               	bcf	3,6	;RP1=0, select bank1
 10193     15B9  0832               	movf	(_count_2000ms+1)^(0+128),w
 10194     15BA  3A80               	xorlw	128
 10195     15BB  00FF               	movwf	127
 10196     15BC  3087               	movlw	135
 10197     15BD  027F               	subwf	127,w
 10198     15BE  1D03               	skipz
 10199     15BF  2DC2               	goto	u495_25
 10200     15C0  30D0               	movlw	208
 10201     15C1  0231               	subwf	_count_2000ms^(0+128),w
 10202     15C2                     u495_25:
 10203     15C2  1C03               	skipc
 10204     15C3  2DCA               	goto	i1l3898
 10205                           
 10206                           ;main.c: 154: count_2000ms = 0;
 10207     15C4  1683               	bsf	3,5	;RP0=1, select bank1
 10208     15C5  1303               	bcf	3,6	;RP1=0, select bank1
 10209     15C6  01B1               	clrf	_count_2000ms^(0+128)
 10210     15C7  01B2               	clrf	(_count_2000ms+1)^(0+128)
 10211                           
 10212                           ;main.c: 155: flag_2s = 1;
 10213     15C8  3001               	movlw	1
 10214     15C9  00F9               	movwf	_flag_2s
 10215     15CA                     i1l3898:
 10216                           
 10217                           ;main.c: 156: };main.c: 157: if (count_3000ms >= 3000) {
 10218     15CA  1683               	bsf	3,5	;RP0=1, select bank1
 10219     15CB  1303               	bcf	3,6	;RP1=0, select bank1
 10220     15CC  0830               	movf	(_count_3000ms+1)^(0+128),w
 10221     15CD  3A80               	xorlw	128
 10222     15CE  00FF               	movwf	127
 10223     15CF  308B               	movlw	139
 10224     15D0  027F               	subwf	127,w
 10225     15D1  1D03               	skipz
 10226     15D2  2DD5               	goto	u496_25
 10227     15D3  30B8               	movlw	184
 10228     15D4  022F               	subwf	_count_3000ms^(0+128),w
 10229     15D5                     u496_25:
 10230     15D5  1C03               	skipc
 10231     15D6  2DDD               	goto	i1l3904
 10232                           
 10233                           ;main.c: 158: count_3000ms = 0;
 10234     15D7  1683               	bsf	3,5	;RP0=1, select bank1
 10235     15D8  1303               	bcf	3,6	;RP1=0, select bank1
 10236     15D9  01AF               	clrf	_count_3000ms^(0+128)
 10237     15DA  01B0               	clrf	(_count_3000ms+1)^(0+128)
 10238                           
 10239                           ;main.c: 159: flag_3s = 1;
 10240     15DB  3001               	movlw	1
 10241     15DC  00F8               	movwf	_flag_3s
 10242     15DD                     i1l3904:
 10243                           
 10244                           ;main.c: 160: };main.c: 162: PIR1bits.TMR1IF = 0;
 10245     15DD  1283               	bcf	3,5	;RP0=0, select bank0
 10246     15DE  1303               	bcf	3,6	;RP1=0, select bank0
 10247     15DF  100C               	bcf	12,0	;volatile
 10248     15E0  0872               	movf	??_Timer1_ISR+2,w
 10249     15E1  00FF               	movwf	127
 10250     15E2  0871               	movf	??_Timer1_ISR+1,w
 10251     15E3  008A               	movwf	10
 10252     15E4  0E70               	swapf	??_Timer1_ISR,w
 10253     15E5  0083               	movwf	3
 10254     15E6  0EFE               	swapf	126,f
 10255     15E7  0E7E               	swapf	126,w
 10256     15E8  0009               	retfie
 10257     15E9                     __end_of_Timer1_ISR:
 10258     0002                     ___latbits      equ	2
 10259     007E                     btemp           set	126	;btemp
 10260     007E                     wtemp0          set	126
 10261                           
 10262                           	psect	intentry
 10263     0004                     __pintentry:	
 10264                           ;incstack = 0
 10265                           ; Regs used in _Timer1_ISR: [wreg+status,2+btemp+1]
 10266                           
 10267     0004                     interrupt_function:
 10268     007E                     saved_w         set	btemp
 10269     0004  00FE               	movwf	btemp
 10270     0005  0E03               	swapf	3,w
 10271     0006  00F0               	movwf	??_Timer1_ISR
 10272     0007  080A               	movf	10,w
 10273     0008  00F1               	movwf	??_Timer1_ISR+1
 10274     0009  087F               	movf	btemp+1,w
 10275     000A  00F2               	movwf	??_Timer1_ISR+2
 10276     000B  160A  118A  2D8C   	ljmp	_Timer1_ISR
 10277                           
 10278                           	psect	config
 10279                           
 10280                           ;Config register CONFIG1 @ 0x2007
 10281                           ;	Oscillator Selection bits
 10282                           ;	FOSC = INTRC_CLKOUT, INTOSC oscillator: CLKOUT function on RA6/OSC2/CLKOUT pin, I/O fu
      +                          nction on RA7/OSC1/CLKIN
 10283                           ;	Watchdog Timer Enable bit
 10284                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
 10285                           ;	Power-up Timer Enable bit
 10286                           ;	PWRTE = OFF, PWRT disabled
 10287                           ;	RE3/MCLR pin function select bit
 10288                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
 10289                           ;	Code Protection bit
 10290                           ;	CP = OFF, Program memory code protection is disabled
 10291                           ;	Data Code Protection bit
 10292                           ;	CPD = OFF, Data memory code protection is disabled
 10293                           ;	Brown Out Reset Selection bits
 10294                           ;	BOREN = OFF, BOR disabled
 10295                           ;	Internal External Switchover bit
 10296                           ;	IESO = OFF, Internal/External Switchover mode is disabled
 10297                           ;	Fail-Safe Clock Monitor Enabled bit
 10298                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
 10299                           ;	Low Voltage Programming Enable bit
 10300                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
 10301                           ;	In-Circuit Debugger Mode bit
 10302                           ;	DEBUG = 0x1, unprogrammed default
 10303     2007                     	org	8199
 10304     2007  20D5               	dw	8405
 10305                           
 10306                           ;Config register CONFIG2 @ 0x2008
 10307                           ;	Brown-out Reset Selection bit
 10308                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
 10309                           ;	Flash Program Memory Self Write Enable bits
 10310                           ;	WRT = OFF, Write protection off
 10311     2008                     	org	8200
 10312     2008  3FFF               	dw	16383

Data Sizes:
    Strings     192
    Constant    126
    Data        17
    BSS         51
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      11
    BANK0            80     73      77
    BANK1            80     26      71
    BANK3            96      0      16
    BANK2            96      0       0

Pointer List with Targets:

    LCD_String@msg	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_1(CODE[7]), STR_11(CODE[9]), STR_12(CODE[15]), STR_13(CODE[13]), 
		 -> STR_14(CODE[13]), STR_15(CODE[15]), STR_2(CODE[7]), STR_3(CODE[11]), 
		 -> STR_4(CODE[12]), STR_5(CODE[15]), STR_6(CODE[17]), STR_7(CODE[18]), 
		 -> STR_8(CODE[20]), STR_9(CODE[7]), StringTemperature(BANK1[16]), 

    LCD_String_xy@msg	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_1(CODE[7]), STR_11(CODE[9]), STR_12(CODE[15]), STR_13(CODE[13]), 
		 -> STR_14(CODE[13]), STR_15(CODE[15]), STR_2(CODE[7]), STR_3(CODE[11]), 
		 -> STR_4(CODE[12]), STR_5(CODE[15]), STR_6(CODE[17]), STR_7(CODE[18]), 
		 -> STR_8(CODE[20]), STR_9(CODE[7]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 13
		 -> STR_10(CODE[13]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 16
		 -> StringTemperature(BANK1[16]), 

    strncmp@s1	PTR const unsigned char  size(1) Largest target is 8
		 -> pass_user(BANK1[8]), 

    strncmp@s2	PTR const unsigned char  size(2) Largest target is 8
		 -> password(CODE[8]), 


Critical Paths under _main in COMMON

    _puertas->_LCD_Clear
    _ambiental->_LCD_Clear
    _ambiental->_LCD_Init
    _ambiental->_LCD_String
    ___awdiv->___awmod
    ___lbdiv->___lbmod
    ___ftmul->___ftpack
    ___bmul->___awmod
    ___bmul->___lbdiv
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___ftadd->___ftpack
    ___awtoft->___ftpack
    _funcion_seguridad->_LCD_Clear
    _funcion_seguridad->_LCD_Init
    _funcion_seguridad->_strncmp
    _LCD_Clear->_LCD_Command
    _blink_led->_delay_ms_variable
    _LCD_String_xy->_LCD_String
    _LCD_String->_LCD_Char
    _inicializar_sistema->_LCD_Init
    _LCD_Init->_LCD_Command

Critical Paths under _Timer1_ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _manejar_estado_monitoreo_eventos->_puertas
    _puertas->_LCD_String_xy
    _manejar_estado_monitoreo_ambiental->_ambiental
    _ambiental->_sprintf
    _sprintf->___ftsub
    _scale->___ftmul
    ___awdiv->___awmod
    _fround->___ftmul
    ___lbdiv->___lbmod
    ___ftmul->___bmul
    ___bmul->___awdiv
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    ___awtoft->___ftpack
    _manejar_estado_init->_funcion_seguridad
    _funcion_seguridad->_keypad_getkey
    _sistema_bloqueado->_blink_led
    _manejar_estado_alerta->_LCD_String_xy
    _manejar_estado_alarma->_LCD_String_xy

Critical Paths under _Timer1_ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _manejar_estado_monitoreo_ambiental->_ambiental
    _ambiental->_sprintf

Critical Paths under _Timer1_ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Timer1_ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Timer1_ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   24542
                       _Timer1_start
                _inicializar_sistema
              _manejar_estado_alarma
              _manejar_estado_alerta
           _manejar_estado_bloqueado
                _manejar_estado_init
 _manejar_estado_monitoreo_ambiental
   _manejar_estado_monitoreo_eventos
 ---------------------------------------------------------------------------------
 (1) _manejar_estado_monitoreo_eventos                     0     0      0     840
                        _inicializar
                            _puertas
 ---------------------------------------------------------------------------------
 (2) _puertas                                              7     7      0     840
                                              5 BANK0      7     7      0
                          _LCD_Clear
                      _LCD_String_xy
 ---------------------------------------------------------------------------------
 (1) _manejar_estado_monitoreo_ambiental                   0     0      0   19183
                             ___ftge
                          _ambiental
                        _inicializar
 ---------------------------------------------------------------------------------
 (2) _ambiental                                            7     7      0   18955
                                             70 BANK0      3     3      0
                                             22 BANK1      4     4      0
                          _LCD_Clear
                        _LCD_Command
                           _LCD_Init
                         _LCD_String
                      _LCD_String_xy
                           ___awtoft
                            ___ftmul
                            _adc_int
                           _adc_read
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             43    35      8   16303
                                             56 BANK0     14     6      8
                                              0 BANK1     22    22      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (4) _scale                                                7     4      3    3064
                                             28 BANK0      7     4      3
                            ___awdiv
                            ___awmod
                             ___bmul
                            ___ftmul
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4     469
                                              3 COMMON     4     0      4
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4     487
                                              2 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              2     2      0     131
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _fround                                              10     7      3    2195
                                             28 BANK0     10     7      3
                             ___bmul
                            ___ftmul
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (5) ___lbmod                                              6     5      1     260
                                              3 COMMON     3     2      1
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) ___lbdiv                                              4     3      1     269
                                              6 COMMON     1     0      1
                                              3 BANK0      3     3      0
                            ___lbmod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftmul                                             15     9      6     963
                                             13 BANK0     15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                             ___bmul (ARG)
                           ___ftpack
                            ___lbdiv (ARG)
                            ___lbmod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___bmul                                               3     2      1     225
                                             10 BANK0      3     2      1
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lbdiv (ARG)
                            ___lbmod (ARG)
 ---------------------------------------------------------------------------------
 (4) __tdiv_to_l_                                         15     9      6     460
                                              3 COMMON     3     3      0
                                              0 BANK0     12     6      6
 ---------------------------------------------------------------------------------
 (4) __div_to_l_                                          20    14      6     679
                                              0 BANK0     20    14      6
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     148
                                              3 COMMON     4     0      4
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) ___lltoft                                             5     1      4     484
                                              3 BANK0      5     1      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___llmod                                             10     2      8     256
                                              4 COMMON     2     2      0
                                             13 BANK0      8     0      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             14     6      8     259
                                              3 COMMON     1     1      0
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             13     9      4     380
                                             35 BANK0     13     9      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftsub                                              6     0      6    1718
                                             50 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftadd                                             12     6      6    1616
                                             38 BANK0     12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftneg                                              3     0      3      68
                                              3 COMMON     3     0      3
 ---------------------------------------------------------------------------------
 (4) ___ftge                                               6     0      6     228
                                              0 BANK0      6     0      6
 ---------------------------------------------------------------------------------
 (3) _adc_read                                             8     6      2     105
                                              3 COMMON     4     2      2
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             4     1      3     515
                                              3 BANK0      4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___ftpack                                             8     3      5     379
                                              3 COMMON     5     0      5
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _manejar_estado_init                                  0     0      0    2238
                  _funcion_seguridad
                        _inicializar
 ---------------------------------------------------------------------------------
 (2) _funcion_seguridad                                    5     5      0    2238
                                             19 BANK0      5     5      0
                           _LCD_Char
                          _LCD_Clear
                        _LCD_Command
                           _LCD_Init
                      _LCD_String_xy
                          _blink_led
                      _keypad_getkey
                        _keypad_init
                            _strncmp
 ---------------------------------------------------------------------------------
 (4) _strncmp                                              7     2      5     201
                                              3 COMMON     5     0      5
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _keypad_getkey                                       23    23      0     542
                                              3 COMMON     4     4      0
                                              0 BANK0     19    19      0
 ---------------------------------------------------------------------------------
 (3) _LCD_Clear                                            2     2      0      94
                                              6 COMMON     2     2      0
                        _LCD_Command
 ---------------------------------------------------------------------------------
 (1) _manejar_estado_bloqueado                             0     0      0    1079
                  _sistema_bloqueado
 ---------------------------------------------------------------------------------
 (2) _sistema_bloqueado                                    0     0      0    1079
                      _LCD_String_xy
                          _blink_led
 ---------------------------------------------------------------------------------
 (3) _blink_led                                           11     5      6     525
                                              0 BANK0     11     5      6
                  _delay_ms_variable
 ---------------------------------------------------------------------------------
 (4) _delay_ms_variable                                    4     2      2      24
                                              3 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _manejar_estado_alerta                                0     0      0     554
                      _LCD_String_xy
 ---------------------------------------------------------------------------------
 (1) _manejar_estado_alarma                                0     0      0     554
                      _LCD_String_xy
                        _inicializar
 ---------------------------------------------------------------------------------
 (2) _inicializar                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _LCD_String_xy                                        5     2      3     554
                                              0 BANK0      5     2      3
                        _LCD_Command
                         _LCD_String
 ---------------------------------------------------------------------------------
 (4) _LCD_String                                           2     0      2     165
                                              6 COMMON     2     0      2
                           _LCD_Char
 ---------------------------------------------------------------------------------
 (5) _LCD_Char                                             3     3      0      94
                                              3 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _inicializar_sistema                                  0     0      0      94
                           _LCD_Init
                            _adc_int
                        _keypad_init
 ---------------------------------------------------------------------------------
 (3) _keypad_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _adc_int                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _LCD_Init                                             2     2      0      94
                                              6 COMMON     2     2      0
                        _LCD_Command
 ---------------------------------------------------------------------------------
 (4) _LCD_Command                                          3     3      0      94
                                              3 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _Timer1_start                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _Timer1_ISR                                           3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Timer1_start
   _inicializar_sistema
     _LCD_Init
       _LCD_Command
     _adc_int
     _keypad_init
   _manejar_estado_alarma
     _LCD_String_xy
       _LCD_Command
       _LCD_String
         _LCD_Char
     _inicializar
   _manejar_estado_alerta
     _LCD_String_xy
   _manejar_estado_bloqueado
     _sistema_bloqueado
       _LCD_String_xy
       _blink_led
         _delay_ms_variable
   _manejar_estado_init
     _funcion_seguridad
       _LCD_Char
       _LCD_Clear
         _LCD_Command
       _LCD_Command
       _LCD_Init
       _LCD_String_xy
       _blink_led
       _keypad_getkey
       _keypad_init
       _strncmp
     _inicializar
   _manejar_estado_monitoreo_ambiental
     ___ftge
     _ambiental
       _LCD_Clear
       _LCD_Command
       _LCD_Init
       _LCD_String
       _LCD_String_xy
       ___awtoft
         ___ftpack
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
           ___awmod (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         ___ftpack (ARG)
         ___lbdiv (ARG)
         ___lbmod (ARG)
       _adc_int
       _adc_read
       _sprintf
         ___awdiv
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___bmul
             ___ftmul
             ___lbdiv
             ___lbmod
         ___ftge
         ___ftmul
         ___ftneg
         ___ftsub
           ___ftadd
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
           _scale (ARG)
             ___awdiv
             ___awmod
             ___bmul
             ___ftmul
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
         ___wmul
         __div_to_l_
         __tdiv_to_l_
         _fround
         _isdigit
         _scale
     _inicializar
   _manejar_estado_monitoreo_eventos
     _inicializar
     _puertas
       _LCD_Clear
       _LCD_String_xy

 _Timer1_ISR (ROOT)

Address spaces:
Name               Size   Autos  Total    Usage
BANK3               96      0      16     16.7%
BITBANK3            96      0       0      0.0%
BANK2               96      0       0      0.0%
BITBANK2            96      0       0      0.0%
BANK1               80     26      71     88.8%
BITBANK1            80      0       0      0.0%
BANK0               80     73      77     96.2%
BITBANK0            80      0       0      0.0%
COMMON              14      8      11     78.6%
BITCOMMON           14      0       0      0.0%
DATA                 0      0     176      0.0%
STACK                0      0       0      0.0%


Microchip Technology PIC Macro Assembler V2.50 build 20240725155939 
Symbol Table                                                                                   Thu Nov 14 08:21:07 2024

                                         pc 0002                              ___bmul@product 002B  
                              ?_LCD_Command 0070                                          l16 12E3  
                         _sistema_bloqueado 11A4                                ___awdiv@sign 0027  
                                        fsr 0004                         ___wmul@multiplicand 0075  
                               ?_LCD_String 0076                                ___ftadd@exp1 0051  
                              ___ftadd@exp2 0050                          ?_sistema_bloqueado 0070  
                              ___ftadd@sign 004F                                         l207 1364  
                                       l517 00C1                                         l813 1630  
                                       l814 1638                                         l806 161B  
                                       l824 0A4B                                         l577 122F  
                                       l914 085C                                         l931 11FA  
                                       l837 0AAE                                         l873 1749  
                                       l794 0C02                                         l786 0BD8  
                                       l891 17C8                                         _GIE 005F  
                                       _RA2 002A                                         _RA3 002B  
                                       _idx 0069                                         _key 006C  
                                       _luz 00AB                                         fsr0 0004  
                                       indf 0000                                ___awmod@sign 0021  
                       ??_sistema_bloqueado 0078                                 LCD_Char@dat 0075  
                      ambiental@temperatura 00E3                                        l4000 14F6  
                                      l4002 1502                                        l3300 0921  
                                      l3220 08AA                                        l3212 089D  
                                      l4100 0AA0                                        l4012 1523  
                                      l3230 08BB                                        l3222 08B1  
                                      l4110 0AD2                                        l4102 0AAA  
                                      l3232 08BD                                        l3224 08B3  
                                      l4120 0AF5                                        l4016 152B  
                                      l4008 1518                                        l4040 140F  
                                      l4032 1409                                        l3250 08D8  
                                      l3242 08CA                                        l3226 08B6  
                                      l3234 08BF                                        l4106 0AC0  
                                      l4130 1775                                        l4042 141B  
                                      l4050 1434                                        l3252 08DB  
                                      l3244 08D1                                        l3228 08B8  
                                      l5004 07C3                                        l4028 1402  
                                      l3270 08F7                                        l3254 08DD  
                                      l3246 08D3                                        l4206 11E5  
                                      l4054 143C                                        l4046 1429  
                                      l3272 08F9                                        l3264 08EB  
                                      l3248 08D6                                        l3256 08DF  
                                      l4064 0A35                                        l4136 1789  
                                      l4304 0FE1                                        l3290 0915  
                                      l3274 08FC                                        l3266 08F2  
                                      l4090 0A82                                        l4082 0A63  
                                      l4322 16CF                                        l4154 17A2  
                                      l4244 1200                                        l3292 0918  
                                      l3276 08FE                                        l3268 08F4  
                                      l4092 0A87                                        l4068 0A3C  
                                      l4412 0BF0                                        l4316 1F64  
                                      l5116 136A                                        l3294 091A  
                                      l3286 090C                                        l3278 0900  
                                      l4094 0A8B                                        l4502 081A  
                                      l4422 0C11                                        l4414 0BFE  
                                      l4350 1724                                        l4342 1704  
                                      l4326 16D8                                        l4166 17D8  
                                      l4158 17B2                                        l5150 13BC  
                                      l3296 091D                                        l3288 0913  
                                      l4088 0A78                                        l4360 1737  
                                      l4264 0D41                                        l4256 0CCE  
                                      l4280 0E31                                        l5072 1697  
                                      l5160 13DA                                        l5152 13C2  
                                      l3298 091F                                        l4506 0823  
                                      l4370 1758                                        l4362 1745  
                                      l4186 11C9                                        l4290 0EBC  
                                      l5066 168A                                        l5162 13E0  
                                      l5154 13C8                                        l2844 1FB8  
                                      l4524 084A                                        l4460 1583  
                                      l4428 1226                                        l4380 0B29  
                                      l4188 11D0                                        l5156 13CE  
                                      l5094 115E                                        l4534 086B  
                                      l4526 0858                                        l4446 1540  
                                      l4550 1457                                        l4198 11DF  
                                      l4286 0E9D                                        l5078 16A4  
                                      l5158 13D4                                        l5166 13E1  
                                      l3920 1602                                        l4472 128A  
                                      l4456 1576                                        l4448 154E  
                                      l4376 0B20                                        l4618 1FEC  
                                      l4642 14A6                                        l4634 149C  
                                      l5098 1163                                        l3930 162E  
                                      l3922 1607                                        l3914 15F1  
                                      l4538 0879                                        l4554 1475  
                                      l4298 0F75                                        l4802 0387  
                                      l4722 00F7                                        l4714 00C3  
                                      l4706 0079                                        l4652 14BD  
                                      l4660 148E                                        l3932 1620  
                                      l4468 127B                                        l4548 1449  
                                      l4396 0B82                                        l4732 0132  
                                      l4716 00E3                                        l4708 00BC  
                                      l4638 14A2                                        l3918 15F8  
                                      l4558 1482                                        l4566 1249  
                                      l4910 064B                                        l4830 0447  
                                      l4656 14C1                                        l4648 14B7  
                                      l4672 13A5                                        l4496 118E  
                                      l4568 1259                                        l4824 042B  
                                      l4816 0394                                        l4760 0214  
                                      l4912 0039                                        l4818 041B  
                                      l4914 06B6                                        l4690 005E  
                                      l4668 1391                                        l4676 136F  
                                      l3964 1F68                                        l4860 0591  
                                      l4772 0280                                        l4764 024A  
                                      l4756 01F4                                        l4748 019C  
                                      l4678 13AE                                        l4926 1174  
                                      l3990 14EE                                        l4854 0582  
                                      l4838 0463                                        l4790 033F  
                                      l4862 0596                                        l4960 070B  
                                      l3968 1F6C                                        l3984 14E5  
                                      l4872 05BF                                        l4776 029C  
                                      l4970 071E                                        l4890 0617  
                                      l4786 02E6                                        l4972 072D  
                                      l4884 05D1                                        l4796 0341  
                                      l4974 0745                                        l4878 05CF  
                                      l4984 07C0                                        l4986 077F  
                                      l4898 063C                                        STR_1 1142  
                                      STR_2 1149                                        STR_3 1127  
                                      STR_4 111B                                        STR_5 10E5  
                                      STR_6 10B6                                        STR_7 10A4  
                                      STR_8 1090                                        STR_9 113B  
                                      u5015 1614                                        u5035 1627  
                                      u6005 0B84                                        u6015 0BB3  
                                      u4195 0930                                        u5075 163F  
                                      u6115 1230                                        u5155 14F9  
                                      _PEIE 005E                                        u5405 0A64  
                                      u6125 1237                                        u5095 12B3  
                                      u6055 0BF1                                        u5175 1503  
                                      u5255 1412                                        u6305 084B  
                                      u5185 150F                                        u7035 07B5  
                                      u5435 0A79                                        u6155 1544  
                                      u5195 1519                                        u5275 1421  
                                      u6405 1476                                        u6085 0C07  
                                      u5605 17BB                                        u5285 142A  
                                      u6335 0861                                        u6175 1550  
                                      u7207 0954                                        u5465 0A8C  
                                      u6185 1565                                        u6425 124E  
                                      u7217 0A07                                        u7307 1F7F  
                                      u7227 12DE                                        u6275 082A  
                                      u6195 1577                                        u5715 11E8  
                                      u7155 1362                                        u3980 0888  
                                      u7317 1FC7                                        u6525 1494  
                                      u7237 06EC                                        u5645 17D9  
                                      u7327 12AB                                        u7247 0726  
                                      u5495 0AA1                                        u6375 144D  
                                      u5655 17E1                                        u5745 131E  
                                      u7337 12C7                                        u7257 07CB  
                                      u7347 07DF                                        u7267 08A7  
                                      u6395 1465                                        u5595 17B3  
                                      u6715 027E                                        u6635 014A  
                                      u7357 1316                                        u7277 08C7  
                                      u6805 0441                                        u7197 16B7  
                                      u7367 1332                                        u7287 08E8  
                                      u5935 1738                                        u6735 0345  
                                      u7297 0909                                        u6905 060F  
                                      u6825 04B4                                        u6745 037F  
                                      u4995 15FB                                        u5875 1706  
                                      u6835 053A                                        u6675 021E  
                                      u5965 174E                                        u5885 1717  
                                      u6925 061E                                        u6685 0255  
                                      u5895 1725                                        u6935 062D  
                                      u6775 039E                                        u6955 0665  
                                      u6795 0434                                        u6895 05D5  
                                      _TMR1 000E                                        _main 13B1  
                              ___ftpack@arg 0073                                        _luz1 00A3  
                              ___ftpack@exp 0076                                        btemp 007E  
                                      start 000E                                _sprintf$1103 00CD  
                             _LCD_String_xy 1FE3                                ?_inicializar 0070  
                         ___bmul@multiplier 002C                                ___ftmul@cntr 003A  
                              ___ftmul@sign 003B                   __end_of_sistema_bloqueado 11C2  
                              ___fttol@exp1 004F                                ___fttol@lval 004B  
                          __end_of_LCD_Char 12CD                            __end_of_LCD_Init 0800  
                                     ?_main 0070                             __end_of___awdiv 1530  
                           __end_of___lbdiv 11E1                             __end_of___ftadd 0B09  
                                     STR_10 1101                                       STR_11 1132  
                                     STR_12 10C7                                       STR_13 10F4  
                                     STR_14 110E                                       STR_15 10D6  
                           __end_of___awmod 1441                             __end_of___lbmod 1200  
                           __end_of___ftneg 1F14                                       _ANSEL 0188  
                           __end_of___lldiv 158C                             __end_of___ftmul 1800  
                           ___awdiv@divisor 0022                                       _T1CON 0010  
                           __end_of___llmod 148B                             __end_of___ftsub 11A4  
                           __end_of___fttol 0882                             __end_of_adc_int 1F4A  
                           ___awdiv@counter 0026                                       _PORTA 0005  
                                     _PORTB 0006                                       _PORTC 0007  
                                     _TRISA 0085                                       _TRISB 0086  
                                     _TRISC 0087                                ___lltoft@exp 0027  
                             ___awtoft@sign 0026                                       _clave 006A  
                           __end_of_dpowers 1088                                ?_keypad_init 0070  
                                     _scale 0D71                             __end_of_isdigit 1F66  
                             ___ftpack@sign 0077                                       pclath 000A  
                           __end_of_puertas 16C2                                       status 0003  
                                     wtemp0 007E                             __end_of_sprintf 06BC  
                           __end_of_strncmp 13B1                             ___lbdiv@divisor 0076  
                           ___lbdiv@counter 0024                              ?_LCD_String_xy 0020  
                           __initialization 0011                         _manejar_estado_init 1150  
                              __end_of_main 13F8                                      ??_main 0078  
                             ___fttol@sign1 004A                           __end_of_LCD_Clear 1F85  
                      ?_manejar_estado_init 0070                         keypad_getkey@letras 0020  
                          ___llmod@dividend 0031                                      ?_scale 003C  
                                    _ADRESH 001E                                      _ADRESL 009E  
                          ___awdiv@dividend 0024                            __end_of___awtoft 1187  
                          __end_of___ftpack 1651                                      _ANSELH 0189  
                          LCD_String_xy@msg 0021                            LCD_String_xy@pos 0020  
                          LCD_String_xy@row 0023                            __end_of_adc_read 1302  
                          __end_of___lltoft 126C                                      i1l3904 15DD  
                                    i1l3892 15B7                                      i1l3898 15CA  
                                    _OSCCON 008F                                      u494_25 15AE  
                                    u495_25 15C2                                      u496_25 15D5  
                                    _TMR1IE 0460                                      _TMR1IF 0060  
                                    _TMR1ON 0080                                      _TRISA0 0428  
                                    _TRISA1 0429                                      _TRISA2 042A  
                                    _TRISA3 042B               __end_of_manejar_estado_alarma 1FE3  
             __end_of_manejar_estado_alerta 1FB8                                  _Timer1_ISR 158C  
                          __end_of__powers_ 1039                                      ___bmul 1F66  
                                    ___ftge 126C                                      ___wmul 1223  
                                 ??___awdiv 0077                                   ??___lbdiv 0077  
                                 ??___ftadd 004C                                   ??___awmod 0077  
                                 ??___lbmod 0074                                   ??___ftneg 0076  
                                 ??___lldiv 0073                                   ??___ftmul 0033  
                                 ??___llmod 0074                                   ??___ftsub 0078  
                                 ??___fttol 0047                                   ??_adc_int 0073  
                                    _fround 0C1A                            ___awdiv@quotient 0028  
                           ___awmod@divisor 0073                             ___awmod@counter 0020  
                     ___ftmul@f3_as_product 0037                            __end_of_password 1090  
__end_of_manejar_estado_monitoreo_ambiental 136F        ??_manejar_estado_monitoreo_ambiental 0078  
       ?_manejar_estado_monitoreo_ambiental 0070          _manejar_estado_monitoreo_ambiental 1338  
                                 ??_isdigit 0073                       ??_manejar_estado_init 0078  
                                    saved_w 007E                         delay_ms_variable@ms 0073  
                                 ??_puertas 0025                                   ??_sprintf 0060  
                                 ??_strncmp 0020                            ___lbdiv@dividend 0023  
                             _estado_actual 007A                             ___lbmod@divisor 0073  
                                 ?_LCD_Char 0070                     __end_of__initialization 0032  
                           ___lbmod@counter 0021                                   ?_LCD_Init 0070  
                           ??_LCD_String_xy 0078                                  ___ftadd@f1 0046  
                                ___ftadd@f2 0049                                  ___ftge@ff1 0020  
                                ___ftge@ff2 0023                          ambiental@value_adc 00E5  
                                ___ftneg@f1 0073                                  ___awtoft@c 0023  
                       ___bmul@multiplicand 002A                                  ___ftmul@f1 002D  
                                ___ftmul@f2 0030                                  ___ftsub@f1 0055  
                                ___ftsub@f2 0052                                  ___fttol@f1 0043  
                            __pcstackCOMMON 0070                                __pidataBANK0 0003  
                              __pidataBANK3 1F85                                  ___lltoft@c 0023  
                             __end_of_scale 1000                                ??_LCD_String 0078  
                          ___lbdiv@quotient 0025                    _manejar_estado_bloqueado 1F1C  
                                __div_to_l_ 0B09                              _OPTION_REGbits 0081  
                           __div_to_l_@exp1 0033                             __div_to_l_@cntr 0032  
                                   ??_scale 0078                             __div_to_l_@quot 002E  
                                __pbssBANK0 0069                                  __pbssBANK1 00A0  
                                ??_LCD_Char 0073                                  ??_LCD_Init 0076  
                        __end_of_LCD_String 1223                               __div_to_l_@f1 0020  
                             __div_to_l_@f2 0023                                 ?_Timer1_ISR 0070  
                                __pmaintext 13B1                                     ?___bmul 002A  
                                   ?___ftge 0020                               ?_Timer1_start 0070  
                       _inicializar_sistema 1F4A                                     ?___wmul 0073  
                                __pintentry 0004                                     ?_fround 003C  
                                 ?___awtoft 0023                                   ?___ftpack 0073  
                                 ?_adc_read 0073                                   ?___lltoft 0023  
                             _keypad_getkey 0882                           _delay_ms_variable 1FB8  
                      ?_inicializar_sistema 0070                          ?_delay_ms_variable 0073  
                                __stringtab 1000                           __end_of_ambiental 0A12  
                         _funcion_seguridad 06BC                          ?_funcion_seguridad 0070  
                         __end_of_blink_led 14DB                         ??_delay_ms_variable 0075  
                             LCD_String@msg 0076                           __end_of__npowers_ 1060  
                                _scale$1102 003F                              ??_Timer1_start 0073  
                       ??_funcion_seguridad 0033                                     ___awdiv 14DB  
                                   ___lbdiv 11C2                                     ___ftadd 0A12  
                                   ___awmod 13F8                                     ___lbmod 11E1  
                                   ___ftneg 1F0C                                     ___lldiv 1530  
                                   ___ftmul 1761                                     ___llmod 1441  
                                   ___ftsub 1187                                     ___fttol 080D  
                                   _adc_int 1F3D                                  ??___awtoft 0078  
                                ??___ftpack 0020                                     _flag_1s 006B  
                                   _flag_2s 0079                                     _flag_3s 0078  
                                   _celsius 00A0                                  ??_adc_read 0020  
                                ??___lltoft 0078                                     __ptext1 1F26  
                                   __ptext2 1651                                     __ptext3 1338  
                                   __ptext4 0936                                     __ptext5 0036  
                                   __ptext6 0D71                                     __ptext7 13F8  
                                   __ptext8 14DB                                     __ptext9 1F58  
                            ?_keypad_getkey 0070                                 ?__div_to_l_ 0020  
                                   _dpowers 1060                                     _isdigit 1F58  
                 __end_of_delay_ms_variable 1FCD                                     _humedad 00AD  
                          ___awmod@dividend 0075                       ??_inicializar_sistema 0078  
                                 _LCD_Clear 1F75                                     _puerta1 00A9  
                                   _puerta2 00A7                                     _puertas 1651  
                 __end_of_funcion_seguridad 07D9                                     _sprintf 0036  
                                   clrloop0 1F15                                     _strncmp 136F  
                      end_of_initialization 0032                              LCD_Command@cmd 0075  
                           ___lldiv@divisor 0020                             ___lldiv@counter 002C  
                              __pstringtext 1000                              __tdiv_to_l_@f1 0020  
                            __tdiv_to_l_@f2 0023                               ??__tdiv_to_l_ 0073  
                                 _PORTAbits 0005                                   _PORTCbits 0007  
                          ___lbmod@dividend 0020                                  ?_LCD_Clear 0070  
                               ___lbmod@rem 0022                              puertas@puerta1 0028  
                            puertas@puerta2 002A                                _count_1000ms 00B3  
                              _count_2000ms 00B1                                _count_3000ms 00AF  
                ??_manejar_estado_bloqueado 0078                       _manejar_estado_alarma 1FCD  
                     _manejar_estado_alerta 1FA6                                 ___ftmul@exp 0036  
                             ??_LCD_Command 0073                              __end_of___bmul 1F75  
                            __end_of___ftge 1299                              __end_of___wmul 1247  
                           ??_keypad_getkey 0073                 __end_of_manejar_estado_init 116A  
                            __end_of_fround 0D71                          keypad_getkey@F1301 0190  
                       start_initialization 0011                         __end_of__tdiv_to_l_ 1761  
                      __end_of_Timer1_start 1F3D                          keypad_getkey@valor 0030  
                           ___llmod@divisor 002D                             ___llmod@counter 0075  
                     __end_of_LCD_String_xy 2000                           adc_read@value_adc 0075  
                             ??_inicializar 0073                                ??_Timer1_ISR 0070  
                                  ??___bmul 0077                                    ??___ftge 0073  
                                  ??___wmul 0077                                  init_fetch0 1F95  
                               __pdataBANK0 006C                                 __pdataBANK3 0190  
                 funcion_seguridad@temp_str 0036                                    ??_fround 0078  
                             sprintf@tmpval 00D5                                  fround@prec 0045  
                       __end_of_LCD_Command 1338                                 __pbssCOMMON 0078  
                           adc_read@channel 0073                                   ___latbits 0002  
                             __pcstackBANK0 0020                               __pcstackBANK1 00CD  
                               ??_LCD_Clear 0076                               ??_keypad_init 0073  
                        __end_of_Timer1_ISR 15E9                                 sprintf@flag 00D1  
                               sprintf@eexp 00D3                                 sprintf@fval 00DF  
                               sprintf@prec 00DD                                   _ambiental 0936  
                    ?_manejar_estado_alarma 0070                      ?_manejar_estado_alerta 0070  
  __end_of_manejar_estado_monitoreo_eventos 1F31          ??_manejar_estado_monitoreo_eventos 0078  
         ?_manejar_estado_monitoreo_eventos 0070            _manejar_estado_monitoreo_eventos 1F26  
                                 _blink_led 148B                                    ?___awdiv 0022  
                                  ?___lbdiv 0076                                    ?___ftadd 0046  
                                  ?___awmod 0073                                    ?___lbmod 0073  
                                  ?___ftneg 0073                                    ?___lldiv 0020  
                                  ?___ftmul 002D                                    ?___llmod 002D  
                                  ?___ftsub 0052                                   __npowers_ 1039  
                                  ?___fttol 0043                                    ?_adc_int 0070  
                       __end_of_inicializar 080D                                 __tdiv_to_l_ 16C2  
                     blink_led@elapsed_time 0028                                ??__div_to_l_ 0026  
                                  ?_isdigit 0070                                    ?_puertas 0070  
                     LCD_String_xy@location 0024                                    ?_sprintf 0058  
                                  ?_strncmp 0073                                    _LCD_Char 1299  
                         interrupt_function 0004                                    _LCD_Init 07D9  
                            ___wmul@product 0020                                   _pass_user 00C5  
                       __end_of_keypad_init 1F0C                                   clear_ram0 1F14  
                                ?_ambiental 0070            __end_of_manejar_estado_bloqueado 1F26  
                                  _PIR1bits 000C                          __end_of__div_to_l_ 0C1A  
                                ?_blink_led 0020                                 _LCD_Command 1302  
                                _ADCON0bits 001F                                 __stringbase 1012  
                                _ADCON1bits 009F                 __end_of_inicializar_sistema 1F58  
                         ___wmul@multiplier 0073                                 _inicializar 0800  
                              _Timer1_start 1F31                                    ___awtoft 116A  
                                  ___ftpack 15E9                                 _fround$1100 0042  
                               _fround$1101 003F                          __end_of__stringtab 1012  
                                  _adc_read 12CD                                    ___lltoft 1247  
                               _isdigit$874 0073                           _StringTemperature 00B5  
                                sprintf@val 00D9                                    __ptext10 0C1A  
                                  __ptext11 11E1                                    __ptext20 1530  
                                  __ptext12 11C2                                    __ptext21 080D  
                                  __ptext13 1761                                    __ptext30 06BC  
                                  __ptext22 1187                                    __ptext14 1F66  
                                  __ptext31 136F                                    __ptext23 0A12  
                                  __ptext15 16C2                                    __ptext40 0800  
                                  __ptext32 0882                                    __ptext24 1F0C  
                                  __ptext16 0B09                                    __ptext41 1FE3  
                                  __ptext33 1F75                                    __ptext25 126C  
                                  __ptext17 1223                                    __ptext50 158C  
                                  __ptext42 1200                                    __ptext34 1F1C  
                                  __ptext26 12CD                                    __ptext18 1247  
                                  __ptext43 1299                                    __ptext35 11A4  
                                  __ptext27 116A                                    __ptext19 1441  
                                  __ptext44 1F4A                                    __ptext36 148B  
                                  __ptext28 15E9                                    __ptext45 1F04  
                                  __ptext37 1FB8                                    __ptext29 1150  
                                  __ptext46 1F3D                                    __ptext38 1FA6  
                                  __ptext47 07D9                                    __ptext39 1FCD  
                                  __ptext48 1302                                    __ptext49 1F31  
                                  __powers_ 1012                                 _keypad_init 1F04  
                                strncmp@len 0076                                    _intentos 00A5  
                               ??_ambiental 0066                                    _password 1088  
                         blink_led@duration 0024                           blink_led@off_time 0022  
                               ??_blink_led 0026                                blink_led@led 002A  
                                _LCD_String 1200                       __end_of_keypad_getkey 0936  
                 ?_manejar_estado_bloqueado 0070                                    init_ram0 1F99  
                                  isdigit@c 0074                                    scale@scl 0042  
                                  intlevel1 0000                                   sprintf@ap 00D0  
                          __tdiv_to_l_@exp1 002B                                   sprintf@sp 0058  
                          __tdiv_to_l_@cntr 002A                            __tdiv_to_l_@quot 0026  
                   ??_manejar_estado_alarma 0078                     ??_manejar_estado_alerta 0078  
                          ___lldiv@dividend 0024                                   strncmp@s1 0073  
                                 strncmp@s2 0074                                   stringcode 100A  
                          blink_led@on_time 0020                                ?__tdiv_to_l_ 0020  
                                  sprintf@c 00E2                                    sprintf@f 0059  
                          ___lldiv@quotient 0028                                    stringtab 1000  
                            keypad_getkey@i 0031  
